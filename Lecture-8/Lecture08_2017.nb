(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    809417,      16303]
NotebookOptionsPosition[    757161,      15174]
NotebookOutlinePosition[    799217,      16017]
CellTagsIndexPosition[    799174,      16014]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["8", "Title"],

Cell["\<\
PHAS2443: Practical Mathematics II
Lecture 8: Monte Carlo methods \
\>", "Subtitle"],

Cell[CellGroupData[{

Cell["Introduction", "Section"],

Cell[TextData[{
 "There are many applications in which events occur in a genuinely random \
way: examples from physics include the radioactive decay of a nucleus, the \
emission of an X-ray from an excited atom, or Brownian motion, whilst from \
other real-world problems we have the arrival of a car at the end of a queue \
of traffic -- or even the draw of a lottery ticket. There are also problems \
which have, on the face of it, no random element, but where we can get a \
useful answer by replacing the original problem with a random (or \
'stochastic') one: even as well-determined a problem as the evaluation of an \
integral may yield to this approach. In all cases in which we use a \
stochastic approach, however, we need to apply some statistical techniques to \
obtain an idea of the ",
 StyleBox["accuracy",
  FontColor->RGBColor[1, 0, 0]],
 " of our solution."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer-generated 'random numbers'", "Section"],

Cell[TextData[{
 "  One key point to grasp is that what we call random numbers on a computer \
are in fact not random: they are determined by a completely deterministic \
algorithm, which starts from a 'seed' and generates a sequence from it. Often \
the ",
 StyleBox["seed",
  FontColor->RGBColor[1, 0, 0]],
 " is based on the date and time, so that different runs of the process \
produce different sequences, but if one starts from the same seed one will \
produce the same sequence. A great deal of research has gone into developing \
these algorithms for producing pseudorandom numbers, and ensuring that they \
satisfy a wide range of tests of randomness, but in the early days the \
algorithms had faults. A classic case was the ",
 StyleBox["randu",
  FontFamily->"Courier New"],
 " random number generator, which was fine for one-dimensional problems but \
when successive terms in the sequence were used as the coordinates of points \
in a multi-dimensional space the points were found to lie on a series of \
lines in the plane. Most modern algorithms have been thoroughly tested: we \
will rely on the ones built into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ",  for integers ",
 StyleBox["RandomInteger[]", "MR"],
 ", which can use a cellular automaton generator (Wolfram rule 30) amongst \
other, and for real numbers ",
 StyleBox["RandomReal[]",
  FontFamily->"Courier"],
 ", which can use a so-called Marsaglia\[Hyphen]Zaman subtract\[Hyphen]with\
\[Hyphen]borrow generator. Other methods can be selected by using the ",
 StyleBox["Method",
  FontFamily->"Courier"],
 " option of ",
 StyleBox["SeedRandom[]. ",
  FontFamily->"Courier"],
 "The parallel Mersenne Twister method can generate 1024 independent \
sequences of period ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "4423"], "-", "1"}], TraditionalForm]]],
 "! "
}], "Text",
 CellChangeTimes->{{3.634882248405024*^9, 3.634882274536214*^9}, 
   3.634882667093309*^9, {3.634882788139135*^9, 3.634882906011176*^9}, {
   3.63488295364466*^9, 3.634883076316948*^9}, {3.634883189282852*^9, 
   3.6348832134102097`*^9}, 3.634883397555468*^9, {3.6348835056276293`*^9, 
   3.6348835160442677`*^9}, {3.6348835484465523`*^9, 3.634883551611886*^9}}],

Cell[TextData[{
 "\nA simple random number generator uses the following scheme to obtain the \
next number in the sequence from the present one, ",
 StyleBox["x",
  FontSlant->"Italic"],
 ":\n    (",
 StyleBox["a x",
  FontSlant->"Italic"],
 " + ",
 StyleBox["c",
  FontSlant->"Italic"],
 ") modulo ",
 StyleBox["m",
  FontSlant->"Italic"],
 "\nwith, usually, ",
 StyleBox["c",
  FontSlant->"Italic"],
 " set to zero and careful choice of ",
 StyleBox["a",
  FontSlant->"Italic"],
 " and ",
 StyleBox["m",
  FontSlant->"Italic"],
 ". By 'careful' is meant 'leading to a long sequence before a repetition'. \
One can easily see that a poor choice can be made, for example with ",
 StyleBox["a",
  FontSlant->"Italic"],
 "=12 and ",
 StyleBox["m",
  FontSlant->"Italic"],
 "=143 we have \n    ",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    SubscriptBox["x", "2"], " ", "=", " ", 
    RowBox[{"12", " ", 
     SubscriptBox["x", "1"], " ", "modulo", " ", "143"}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    SubscriptBox["x", "3"], " ", "=", " ", 
    RowBox[{"12", " ", 
     SubscriptBox["x", "2"], " ", "modulo", " ", "143"}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"      ", 
    RowBox[{"=", " ", 
     RowBox[{"144", " ", 
      SubscriptBox["x", "1"], " ", "modulo", " ", "143"}]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"      ", 
    RowBox[{"=", " ", 
     RowBox[{
      RowBox[{"144", 
       SubscriptBox["x", "1"]}], "-", 
      RowBox[{"143", " ", "*", 
       RowBox[{"int", "(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"143", 
            SubscriptBox["x", "1"]}], "+", 
           SubscriptBox["x", "1"]}], ")"}], "/", "143"}], ")"}]}]}]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"      ", 
    RowBox[{"=", " ", 
     SubscriptBox["x", "1"]}]}], TraditionalForm]}]],
 "\n    leading to the unsatisfactorily short sequence of ",
 StyleBox["length 2",
  FontColor->RGBColor[1, 0, 0]],
 "!\n    \n    The ",
 StyleBox["randu",
  FontFamily->"Courier New"],
 " scheme used ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "=", 
    SuperscriptBox["2", "31"]}], TraditionalForm]]],
 " and ",
 StyleBox["a",
  FontSlant->"Italic"],
 "=65539: here is an example of a scheme which shows the same sort of \
problems as ",
 StyleBox["randu",
  FontFamily->"Courier New"],
 "."
}], "Text",
 CellChangeTimes->{{3.6348832172977037`*^9, 3.634883233063403*^9}, {
  3.63488337936714*^9, 3.6348833897301188`*^9}, {3.634883439511958*^9, 
  3.6348835017750397`*^9}, {3.634883568136745*^9, 3.634883593663281*^9}, {
  3.634884783214082*^9, 3.634884887707713*^9}, {3.634884963668949*^9, 
  3.634885074870438*^9}}],

Cell[BoxData[{
 RowBox[{"seed", "=", "133"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rn", ":=", 
   RowBox[{"seed", "=", 
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"65539", " ", "seed"}], ",", 
      SuperscriptBox["2", "25"]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tt", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rn", ",", "rn", ",", "rn", ",", "rn"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", 
  RowBox[{"Union", "[", "tt", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", "tt", "]"}], ",", "2"}], "]"}], "]"}], 
  "]"}]}], "BoxedProgram",
 CellChangeTimes->{{3.634885294907089*^9, 3.634885409606472*^9}, {
  3.634885469163925*^9, 3.634885469652813*^9}}],

Cell[BoxData["133"], "Output",
 CellChangeTimes->{
  3.4449749585*^9, 3.4449757222349997`*^9, 3.444976902237*^9, 
   3.4772904535606003`*^9, 3.634820733601572*^9, {3.634885319419433*^9, 
   3.634885410414878*^9}, 3.6348854752324867`*^9}],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{
  3.4449749585*^9, 3.4449757222349997`*^9, 3.444976902237*^9, 
   3.4772904535606003`*^9, 3.634820733601572*^9, {3.634885319419433*^9, 
   3.634885410414878*^9}, 3.634885475272086*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
+7TUMPx974vY7zZjpf/vhj53Xcl6psj953PrM5+JnvC3xTr0deY/2M+F7HtW
5g+H/s0P8b0FxNl13i/YPxt/FP2aVQr9n/sF/Lfhjdz/24HxO1NPq49sQ3y4
ygX0ceZP/Gu/zeADy3T0lUNL4oHdnMlXR9AfwLjKGbz46E/iFw7T4d+8IPR5
sDfrNZr9Vrq2vdm/7gWeUd5MAe/ujiQf886a8cz8Q+b/Z8v8/59y/28Duf9v
DbhhVkRV8fwsHxn/vwO+K/aW8V83Gf/PkvX/dqzn2KbIf+BF7It+HHjiXCPq
RVbJ/TeJ6dSZuLQhnnFnNPb6+XHka1AZ3lcRPlCaSvtkdR5979GJ9frLE7ww
fQf6ZgH9IpTQyfz+/kj0cY0m5Nej/2L938Wz/k9iWf9/UrHH3pNFnEmJv894
erF/yfiY/eBqwFzwTXRjvt8ik/4UpXpAxzPVRB21cnYF+OTpv8xnwGD491QF
4iudS1EvMof4tTJG9ieJnEj+OjMc/67wCPsXphSgD6MbkC8LiCA+eO6V3P/Z
iHzYfne5/28O9Ci3V9b/g9tN3k5S/oci/5WpszcOPQk+nhnJejqcQt7vUKei
LPyGfg+Q9Z82sv5zGH6n3v0PQVeT1STseX8d62X8yvo/ewB+Tk5iv1T9ZdTb
eDUn/3s7VfhbJg9bQUd9dnP02wPqXpUeWTL/fw17mLUX/v/4Qcb/V7Ef6lQc
+bygceDT6RfBp0njwEOlqH9TzHPRlwveoy9CdxDveLOHeEBaPvq+PPullMrf
mE90W/gtwJp4h/0yuf9rB/GIz+wvMGaQN9CUN+Ctl8OQZ2tX9KPPVuJB9wrh
5yWZ2EObaXL/z3q5/+e0yLPo/XLAr7uIgytFQ9Ef3R8Sl+5xSsSTVeu12E+f
tcjf+NXIW8cNrKfTfmn/T2P/p1ZCvvrUAr856bBfXlLe2l5m/eQ+eTW8NfbQ
jToB7eR65GvUcPLRnluITzw/Cf/pqMPXm3eT/V8eUq/9/CnyUWkZ8tV8hoz/
35Hx3/nUH167w/pexx5r2etl/f8I6DlgCPc/fCDf1bkN9D2xDH3a2pP+H0fa
1BLXl3qD/3xNEv9tp179hB/9Huxq4488/hN9NeYX9umUkXrZ3AfkBxOmgF+T
csFDJivsZdIz5L1EN/Bpq7rU23pWgx+LqLMx5lEfoLUrKf3/L+hDizhBH6Pn
euj3syv8+AVcqFr8Cf533MnvF6cQj1leAX00paKM/7fAP7jckvUfRv2EFlMJ
fgxpDX/coH5PmRzDfEPno4+mjOX59exX0P/wp37d5hD3A0oxvzrsE1P6sb9A
NTcD/3ccwH6ckSPg10ayftWXfclKKR/wZNwF4oVtSyOPttSrKUerg6+GdmG+
leLAry71qK9OqA9eP0xc1Nj6Pvmk3AkC9+niO4v4k/rBm74C+xdSD58xFvsU
+yf0+T0DvP2zJ/vgE1oInGL8kYy9PZ/K+ruOQF96QxdjrhvxgQ3/gLfUh9iT
o2XgR/eS8Id7R+T478eCz9TUVPxNOzPwrsNWxtd2OvwZEU69hFUa8afhk1n/
ms7o2yD2lSgu9E/Rnp2A33fXQx6vV5H+fzfm12wd6zsvETya5yf9/1Dp/1/l
+drxyElCFP5IlMyvfOrE+j7ZyffCZb40HH9A5+9IfcK0tjL/H8L3Dvly3+Jn
G+T/F/UdjtPoH2Ar8xMXA+CPgRaM/0MU8nB3E/pqdXPG5yX7UcWO5f6lBvBL
k6vEkaMKsae/OjK+b0ZZ/3cHetfwx755XEP+s7uBH/3Xyfgf/VIM3l+FHlXq
7ScfGHOZ+OrUZeDR5Hqy/09j4oV7t8v9f3PRD/ZHxHsNlT+iXzX28+s9M8F/
rn2Q15Q74IEv/tjXFxWZb8M+0G8s+7oMeUdF/Fifo6A/3dZQD+dbRtb/lSDf
cnka+sFvL/rfUtZjL0+hzu3eQOFHqLvqIl8/iPuq9di/ZhxK/x2tw1FZ/08e
TxvIPnblN/rHUFxZ4DWjWxLPPyyS/n82ODTgPPKTSP2b2nUJ9mJ0O9Yrewj1
05Fv4X+vf2T9zwRZ//NG4AfjuzTw1oM8Wf+fKev/p5AvzZqJf/pS+mNDqqF/
Tp2R9r89+Oj4e/RVi2Pos4imXK8KhF/PBOOfhtJPTL3djn1F/1Ylv1Iefa93
vSfwg654pIgHKI6Hpf9/Cv3aoCHxjYA8Yb+VUa7wSz8n8OXHFdj7uPmy/08m
8ZT94AKl9FfitaVaw5/mM4lvziwN/w0uxN/2lv21CuZjH7aVJR6XaEF+JWoo
+M/nG/WnHsnU256knllLOcB6Wf8ET/27jOtrS5AXp+ey/0dTWf9P/xt9GPux
TcWvwXfpMh7c8V9+f/Ak9meHUcb/bcg/GKqDtxY78L3M0+Qbozcx3mU/0W/r
X6IPDjUFX9lfxh/vsxD98Goi8dPkyeAxsxjmc2s6/t+Hlei7NOrelA6n+F6t
ZOJZ9p+pP4mOw14nUYeq1aeOVhleB36/kir9/5bgjRfj5P6vJoLvTekd8B+8
qcvQJq6T8r+OepmkpeDnRcdZr1GZxH+rNQT/FqQIPjfmTYF/p4RQnxCzmnrJ
yBjqzXc8YTzzJ6HP5pDn1iL/JF+yIFT0a9JKsh9FKZfNeuTHsx5XrvD9ddPw
TycFIg+WFjL/Nws83LcM9H5QjH4sJK+hO9lZ1JWrzWuhHxY0A1+7NaHeI3cX
9fP+MaJuX1Fk/8QygxhPVVkPozYl/reNfbmafZSs//fHH331lrzZzqX4L1Vj
yOONiCFesO8y8lW2N/KUSpxRsftD9v86C39vPA4edlWk/9+P+ptoK+zZxCXU
N1rEk//N3AH++HEIfp5PvNG0qx94ZAH7NkyWS4lX3fAhX+dmLX6v+9VDxAXU
Dd7Y05FB5Ceyh5OfcCeerjY8iL5tQ/285of9UCzBG6pDdfLZTWeIeZjMLoA/
L2TI+M8BET/X+12EXnnUvRuDn4JPRvtI+d9N/VpcN/DVm3vww+7NrMf3dPTd
TEeZ/18o8//UNRlrzwE/D90LnremDkx904d6h7SL4J3iu/B3sdwv8L0O9kLT
S/+fuhildR+Z//8Iv5zLwZ+ycoVeidKfiGqDP31H+pvTZT18EvXjau2d2DOv
W8i3lZns/1MB+/aXxH/TsyX+uyTWRRfvK/SPeiiP+umV9GXQEvOQ93c70VdP
Vkr/fy3XK+R+w5CyyMt2+hvqHo5ohvz/JN8UPQX+SPoKnjFMBE9tsJf7/zLB
+0+rk5/YUR9+TM8R8U7dvKaiXt6UM4r63yszqP91/yHr/xLJD3YywC/HpsE/
Hrdl/T91+ybzIOJ7PWV94/5xsv6ffZ5auTTp/9vhn+yywV6GUfejVf6T5/84
xvMnqBMy+l0Gb98xkIfPtxP7XkzhlbBHNt/Rn8PoI2lseBl+vCDjv4m3sE/G
VdjXC+wPUrNzoEfkTPytuPqM/xN2zOSRDJ6Zzb479UFH/MOotTL/H8b+pSD6
VOjmhpYU1/f94adTT8Ebm84xv/ZzWN+9A8i/mPWD38zl/tsuE9Anp+3h3zer
oVcada9q+X28rzL7DHW/P4h6BCX5HvJuP4C8ZaWHQl8ZkouJZz2lnlfd+g35
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
wAPNOR9GdzKL+sVul2T/Tyvsa/g4/KHge8TL7OkDpIzcRLxiEn0PdLNeUz9f
hTin0maioKcpOAr9ZHcE+jmosv5fjz8QMZV8+QX2j5lmFtAPwMED+5A1Sp7/
x74ebTTxFV3UOcEnapyCfnmzm3ryxJLUO3xvzXrOdJb5/7XkdQs2s5+q4hTs
aYpKPqIScVn1zUbirWGDkJ9iDX4oPge/fSc/rM/IlP5/fdn/vz7xtFILiPfJ
PvUmxzXYr8RhyEuPcOhzZ4qs/6+APhwk939UDOV+Uz/0gVUU/O4RK+0/+zON
01057+9HY/BoXjz1OIec8P9WppEvdntIf8Ls6fSrDcuQ/v9S/Cu7h9ArXsYz
t9OnSpffl3obR1kvY0N/E60F50Yphn/g7w3TZf+/FcSrprWS+L8M8ZWCvsRX
ggaj7+b8Rr+Mecf83SPl/r9s8GenpsjblAvYk2jsiT6ggPzaOc5l0EV9EnEK
bf8+af/fYy+qXpT+fxvsyS578tHSD9EqN2P8f4xH3514T77PbzLjuwMOMf6i
HktNrwbecKuF/AxLRR9XqQn/roqU+/+OCnqpXQOx/89KI1/vZlI31Pk09TNe
Mp51+znyfHM6/kk25wdok92J10XNoo/a7wONxPuCDqJvXtZg/Q81RB4et0O/
bqIuXWv/D/yy9zz2q9QB9I/5d+i9YAvyd/ox/PZmAPJetA17Vpp6PaXyGPB0
9ALsU/J43rfyO+Prmk59QrIj8euni2T/3+7w8wwZX7U+Dx704Zw+df8m9NuS
e/BbibWMv4xR+v/0nVDugUtMCWXJbxcdYbyNysr+fyVl/7/W+Ne7KpIvHn+B
63c66iuz7sN/LuyLVx9fg36besDPtZuDD7wmMd+2XWX+Pwh5KZb9M9w2QN+T
+5lPq2+Mvwl9eZXpG7mvk/0MSv7EHgc0gj7PqTPXytYlXuxThfVuXR//+sBA
+r84ufC9cUPBS8mn0E+R5aX//wF+/UCfcjUM+6OcOAv+3ugv9/9ZIY+BLZGX
tMPUs4QdI5/1iL4MWq9gmf8vAi+Nkf2DW7IPSs2dhD7Jqsr6vFVk/d8q9n8N
Gib7//xGH43ay3j+4rwiLeyI7P9XCfq282P9tpfgelRd6N+kO/GOnx1l/+8I
4gNm9G3SBxxnfRfLfOxy9vGaUu9y3oBdV/T15f+d/zWbfngxyKkxJAg8cGOM
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
T202YJ/99mGf7Oh/qtWkX57e0oF4Q1f4wNByGfmLR/TVVf5ew3jzvqGfvh+j
Hmi0rP9rlsf6evWX9V9dRBxQ242dVr4/Qn/P7CLz/0ky/18G+aoo+xMOrc34
rOeSj5nVnfxVmoF8X/FM6FHsCl78vknW/xeRPxlLH1Nj4GH0e6lR4Kdzc3n/
Ks4H00ffI3/d4z7r1taZ/aHTD0j/n7idyeky+akjK9hPYTWY8Xt8hE6x74n/
HJfnayzgHHl93gr8wfu3yDMdaSTqH1SPfPzNd7eJN4XZyfp/+hhoKxKwN/E3
WN9es+X+PxmfcOwr+/9OZP/yoO/IhyEP/Wl/FP15thh/KGOHmKdxxxDBh6aC
GfBvEOc4aXN8wTdjvoAHu6wX/q4+Npt4Zicb2f+PPp+aB7heyR6MPVzaGvnv
iR0ypQ6G38qT51Srtsd/dV5Ovuy2xJlPAom31iuJvvqjEP9ppj361eEQ79/j
xvVC6gK0gFvIiw3nUGjDqMdQqoxifBf+YHz956DvjOx7UZ6R39YtjBf7aoyR
16H3zh7Q+xPnWamJztj32fRfUR/Mlf3/d8j8P31nlSDO9VRfejD++37kK0LC
iZc6JcCv0/ci/3uDZf1/KvrEvAZ4oQv9vJTT48EDb9DPupMhYv+0Vprz75TK
4Dct+iL8GRCJ/VxpKev/yeNon6diLyvn4Y9vTWV8M0rJ+n8v+Ncnm+t7O2T8
n33BWokTsv7fmvl3iJH+H/uOdOF7Bd4xFtiAx7t3IT9xczN43pr+wErzM8x3
/G+Z/xkq8z/f2J8aRx7ZdOoX/Z+cTgyB/9yJb3qNQ1+0pd+BskXG99OpS1bc
psEfs6PAL626Qb8mDWX/Hy/8ZV0a9C5px3g8KzG/51b4d5Xesr7VvdFr868J
OVc2XMCfcrIm3h5Hnx012UvW/4/B/vj3Zn/dV/SjGlYO/+TET8azMVbaf/p1
6L4eMhfvSx6CfG25iL47ESn3/4wCjz5uL/P/BeDM/GfELwt+S///Af5C0i55
/sNU4oODyAsrJeg7p7ViXMYmzvgjBZ+R/7x+1NelbmU9tleEHhkrsa9NTMjv
tyDscT7nB5psruHvW3Guurb4JfS2XSz+X805TX/tmJrI12Uj9B52C/0YY4O8
neqLfb7RmTqCcZ7gr9Ab8PsUP+KJzZvTL/JhKuf72rjL/P8J8NHpHvhr/YLg
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
zUa/3OoK/39h6f8XQn4Sm5Nfhf5J/T2jB/PKo/rQ//UYgj5PzcF+mYqS/xWv
T34Q1Rj9eSH1ncISj5WX/Q6NblGP8t4DXuEae8SU632o93zzN3COavhS4vvd
8DIqn+C91N0Fb3JK4X4bgQ9SNjQT/N8S9MF7Oj+71+b+H8eSTzqtIZ968pj4
aUxrzrcB++Ysod7kJ6mlOf93J7D/Bdi3og+Q/Rn5RvD+DR9yv2vnY99+jjDq
LmrQNfppTwsbcYO6awr2fdRN6f/Ba6v/DBX8TyL+xSaR83Adgr4uZG+vurQg
+dUj9pmp3V35+5HXjDhEOQEOztTuFHjPM/C6alvLMS8W34znn8NeA8vkXMP+
W70Wgq/P7UJ+7+Ap/f8n+Psq3dHHPuzj1hePwh851sW+hQVQz6zZgfwybg/6
V0Di03HgtZUJP5nDjfxp1F3UE4eJt+oPx55JnKgFzuS+Ypnr1I/Nk/7/Nep8
mbvAc/i50b/4Nhb7f6cjeVm7NvinqK/kCznh2M/vi6n3e+Wj3p/7AnxfuXvC
/3eT+/Zkb4ia+R157cH+RVPJ3syj31tF/bdjc/RrteyvOTYAeU3IEv//3ohv
rUNbCf/vU/DdYa3pk0/va8iJNWgf+uXylOdL7c39uo0j3o1Iw17ttaNfeX0y
+vymaSnj83238fm5T3j+LA/J/2Ml/19NPrniX/TxAXmluhLcvvY2m3rqU/a0
WPO2gp8JZQ+elj1f+P8bEN++ukN+kvwP9WTrB/zn4ml8n90X5C2SPXP6P0+4
/33sldU/+Uv/192om2iVsbPqnjrEL1EFkLdk9rfqZeGPUKY2pp6b24j88Ptp
6qVH+yAvxd4SP0SW5rz853FeI2yl/z/byBf1ovbYT/uu6KHTAvZrPGGuW/OZ
xfvasldQG9AZe2eCd1hzlnzOZhTxiT6f9znetKrx/Zl7se/xDZCbwFTwjC+X
EF+F7wXPlQJfqiV9dyf0/6Tx3FaHduQ33vAA6x3YL62suYO8uTQR/E8d4sml
U7FP/uzNtnoehf8z5y35pz17KdWD8PjrLeHtVoZ6YS+27YcP5jdzFHpaIt/X
zof44UQG9d+OXcjXI8qT790sRTzZ3sS8WMQF7Jf/Vc63oyffV0f2l06/jb/s
O0j4/77xfe8bCf6/uOD/i4OXaRtjxA3WlNrEC76NwPvMEnxX5b3Ix0nyGGUA
e7/0sE7c64j37CfKCUD/57AXR7sFb7QSfJLzXLSf51uVSTxkCx+XObEh9cxi
p4T/B14MLQPecXXUAPx7n0/Yp1fh1CPdmuGPYukb6gOdBf+zmj2qtsd5nuKx
1B//aMf3DzyEvXVqIfx/mzi/HQUF/5ND/WdlAufl5UK+cTMW/T+dgf7HXyOe
qDoQ/X5SFH1skks9YXMq/ur6CMH/pxEfus8HbxbakHpqYgvB/78nPx01gfPd
Dc5D/UQ/22T7pyHf5uLbuP8U9oWqvoJnrvoOeV7vgzwfLYg/q/Cb+HHzbPKF
17V4f2/m3xXbh8Qj/8k8xOx23M854l9zen/wH42Yi1d7wCutv2A+UT0g80Du
lbAPw9YL//Nh4s3hR/FnL3fx+cNP+Xzaff6eJ7zR1gPu4BZKvjTiJ5NPSfCU
C5jPsyatYq7y+KWK6L8z+MV09lVrAUHY11rC/51USPb/kQfo86g3qDPf469t
LyBfUWuwX/mx52oR6kCmtPMG36J65QX9icgxxs/Kid3Ea57Hhf/7Bvw0vcMk
/ttm4LJMMcJf/YG6oCW2D/Witr3Rz5iGgv+3IR5uhv1TtlMn04qPwx6WAUei
a+xHVzq7Uy+PO0h8FfaJ+3o9Hn9xa7/xXJbIpcwHN6M/oh8sjD0oXJD4NoE8
VXUiLtUbbyTe2nSMOsb5JKO+Y5q+kXmX2ZnkJxPPI49W2zvm/33PiN/Md/66
zf3Pi6MuEFPTOAclF342a7kQ5PNGSeKNVHin1EDySot3A/BgI+E/0/wnUg/b
Hsl91aiP/2rcWPw/fR21HPth9IrUmdRORdDP9qlS/51qzPlZgzzBU230577T
mUO2nB9g3It2eQf4r77/Mp/mlo9+5Ftd8P+DsE/ZWcT/Qb2k/y/+arjwO1ee
SDw5eCn2piT7SbS3/xI3qSN+GeeW1xW+hLwK+I9s+OeUZzPIr6K2gsdoNE76
/+y3VS/Ct2b6dtnI75WuncnXutiRz95uhj2ZCr+m5XAH8GolhP8pegXxnN1u
5L1rGvZ97TyZ/3OhnhWyH/mYk4n83G/E+S5fzP3thB9azTCBlwh2lPy/Avft
1Irz21qV8+keD97yTJYRr1gTp/N+kV3x1wd05MMCD7HmXA55urAC+Z/yL/a0
X3d+PnMAf+T3mvuYuVHsf7Thj6zhk4k3Xy0kvpgzD96y8UMLGT9HPpf9v+Gy
/9dV8P9i3w5dEv//jXmBMl8l/78o+b8L9jJ4DvVae3ih1foNef6govw9l9/U
x/eBS1bn10d+Ezvgz0P70G8bAo+yZYlO/BqRQDzRtwDy034dePaIJvTX79nB
T2TrSXyyZzH3+QX8jrWrE/HZDHgXTNsCjHqDsrKg9P/JG8wxz7DvrzpjP+8P
Qj+egA9TN1P306aOx17vZx+tqd1I5pPsFiHvbelrKXM8sF+34N9Rz8keFk8z
81b2g6ivOTjjj+LoJ+nL10r+74n/yxb+32dXhP/3LvZhmoK+V32Mv4wtQjxz
9yX6uEj4SvLtRR8KvQGXlN5J9n/HEp/GDub+cn7ivzu3Ef6/9cL/t5b3rUue
b905g/pfK+yLNbUF8xBuJ8AjTJ6P3Wx6y5irt/oVpL4XPU74/x/I/M9H4vXE
78L/94R+5YwI7F3DC1L/Vzi/qRrPl68F9Z/8l/DvHluE/1P2VxZmXkItD2+X
3oh5EsW5NrjCNkFGv1G5zlypfm8G+hxOf88S1QN//S0C/+QeT3x0qqjwfz0E
X+Hsyff5diHf8F7CPqjgitT/H1uwV93Dpf/fwIi7tSvgGExqg1zz/36feZ36
SUw88nCHOrZqrcf7HmC/mJqP/EEb9ZD4a60b8p3ZCHseNIDPB7wmX1hXh/hr
FDhnxaMK8eL33diTr/CbWtqVNuoPiut74sOFL3nfpTIPE7CS+Kv7JuLPf/9v
/9dc4X+cTn59Jhi83dbvMv93TfB/2eQHj/qgb+s5TyWkAvLiUFb6/z2Zb/fX
mY/r8xJ5syuLfVzzi/MPO8X51oTfyeIzFv9eoDn27Tr4KGXCYb5vzQ7yOf84
4uP6R4T/pyD18sCfwv+2n/5Kynnj75t9f3J+W+9J//8D8vJtNvr4jn1LetIS
7L/HIr7/VzLf/90N/d3nS172JA5eEKcu7NfaylyJ7in42cwO2JcN4AlVjb2F
mn9J9KEGuEJ9tY/U/+2pXyVeJ876sos+emBl4q1LTfHXFyzcZ+dp5NtB8Aop
Lir6nXqb+nTaWezB83fo494j2O9oR+7zFnV8/U/qgOpccB5a+lbB/z8W/H9r
+r+VOxKPxmeB53CbCd71bTT6/FT6KaHveL7QOM4v+6Xw/9uDB0z5hLwfHcLz
FyjA/XfgffTi4GHNkVvQx3/6YO/6PwdXGTmLePMOeFN9xWnsa692wv9VRer/
tuQ7ZTdSn5w6Bn3JnUU8mgUvrD7oDPJboZPw/5US/F8F47m0cwWl//+R8y1n
4nzs2SujdV9CfPVkGvIZN1/4/yYRX+wfwPmaPhHf+Bylvtte+K6fOcr+P3j4
tFkPie/jE4gvPsTI/r804jrbCYY9U1LYf6OfTadfENCb/CuyNv1w773Evx3g
uzM72iIPLgOR72Wfkaeli6T/n0s9zvMcc6hPM8En2cs+yINbsB8tZ5JfDd1N
P7I/vHrKr5s8T9pC7itmNv7v4V7irdXv+P+dD2F/buYQ/7avQz1gNLgD3b+X
8P/BC22N/om/n+6CfO6ciT5l18C/PChKvX0lOCc9pzdx/I8tRlygvZqNvR20
G/8xfCT636Qm93/ynOB/d1F/tomU/Y9NiZ9DLnAfbdbiv27B86i6y37aormy
/3cH9WjbHMH/S3+lwn30o3pT6pMZT/n/o9oy12jbGb6gz+xfM+nRRhyt3urG
/QzcJvw/G6l/LRgs/P8/OY+WtcB3HuqJfXIK5vezRlHfdZ0Ln+HOodRnVz4U
/p883v8NdUJlRnfidb8Y/ElVH/TxY47w/8WhP03Gyv4fWz4/YbHk/+xJ09s9
Qr4SFxB/twK/aU6C79Maxdyl+ok8XcuXAi66YkHD75h+ToO/JLmszP+yH0Vd
L3wkR/3E/8NfpPe0RZ5e2+Ov4hpw3zbNOe/dnXmf2ezH1M8RZyhB84T/zyLz
vxeIX14kow/ekfizasz9qsMCsDdXZgv+fwL1y5ezeN/D4LD0QOaFlZif1Hvu
wIOqmoX/8UC44P8eg5848jfxSll4JqyZbtT30pvw/X8flPm/9+TH4VHUx3cz
36nPY65KnSl8bOHM66lRQ4T/bz71H8e91Fc+VMM+X+mJve4GT7Bywg68aDni
fGWWCXnrDX+B+r4fz581nHjtw0/sS3nyMXPuH/jXGNlPHeqM/f2LPqGy/Rn2
sdBA/Pyq1exb1GZxfzvYj6M7wyerhs0lLnFLw79OsOH/l7lNPt9M8DODibPM
Vb+QbyTAz26OacP3N74i+T94VN2eORx18AHOb3Z+7P+dj8SzHdlrpqYUQX9/
nSafyapBPlJ3gOz/OYd/6tSY572xhPNPpU9p+vLI8N/61fvIw4Uv2Nd7I4mv
O36iPlqjH/lT4wzOc+h55KGcM/Ls8hV57jRK8v/GyONl6sH64zrELxvHIJ/p
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
+PiauBrnZmkeTf83Lgd76bDKyNusHtRplU/B3L/7d/Tr1CPiq01/8PNVeJZ0
357k3853sPfu9+jvnWJuWe/eS/g/QtgnNOY48d1weAmtiZ7419QM5P8d/AWq
dRj37f3MyE/MNmO474aSd27sacSNlrR1Rp5hTt1KP6k5dS91F7wLWtIX8qPa
acSnP6V//VX269qWBo/kUx17V4g4WSmD3bEEMvetdmf/ltUxCjzsEPybvq4p
z3tmJXnT08EGL506CX+nzylAvhnwg/tbL/nA+Z/Ij8Mm/HniFOKouBrY6z4V
qbcU30A9wpHn0UfCl2qpOIF9L96v8K8FuiEP1+V9btWiDhkJ3kU9If3C+vQT
lJKvxP+D3zbHfAaPlQJfitJoNPqy1R59iV+Dvfi2jfd5d42/l7QCe+gB7kr/
LXyGP3vxPF5exK+/JvHzsifgp7bSZ7S2a8T9Z9Lf0nuMlfp/O+H/GQvfVA32
IumrF5PPbiyEvXq0EP13+kS87+KJv7n0mvg0DDy2ErGUetuwnZL/wwOspWro
j9sFcBF24cb3KX0v09+4zv5BdcIs4f9fijwfCmd/RFZ/wf8/wX83qCH871vY
7/IgUfh/zgv/TyrzH8Gu1FNCp4j+FzL033IvCXlOeoV/fHVe8P/HiJ+tezjf
Di+xR8WlnuP4nfP5p7nwf/WV+48Fz3PnML9fMVLwf13Qp6hrxCPJ9J202t+E
/7eGEYdruQWoW231MeqS2tGL6MVABTxP1yrI7dwPxh4S7ZxKPNOSPo3VqRL2
1b4D51frLTjahwHG/ktLaG3svy28YPr+M/RhSzY06iB6he34x/a30OdngbL/
z1X2/2Wh7/FX+Ptfhc/y5Rriuxpekv8zr6CfXYm9ar6Z+m6k7Pv1biX95A4G
z7ily2GjfmZNmEI/fdkl9H3pfun/pyFPXs3wr5ntiMdWwadkanrA4Fu2pD4z
6j2m0xuMPNXq1ZL6eq4/9by0IjxvDPw6+sNSxC81WuLfO2dx3zevYK/aT6N+
cRkeXd3fi+cJv83PdYTvcTq809rO/PjDbPaJWeMPgCf6Z4rk/17kr6nopSWq
HPn4IHA/+nDhc6v8gvz0BX5CrRdNPmrbHP2NuM/PuVXAW7bpRLwXU8e4RyX4
MPWqouBIFPsTzAPYhqA/PvAnaRV2oY/Vx+HPZsC7rSRV5/N9OH/1M3GmHu1I
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
GuTLAaOl/+8o/X/yGLVYTezR4LPoa/G61GM8I+BPGCH8fnnwEKp5RYgnfuQK
/j8F+zWWfoXis0z6/7M53ws1yUccqQ+aw5fQL+7Sjj7a5s1G/dYSDj5X7Z+B
fBcbgPxGXqX/5/JZ+j8f8U+1LuKf/lkn8p9NXHUzgHq7Txr1Yud+4CKd7uK/
UoOJF4LiiBfasJdZcwgV/uc71P+6tSe+f8/eA91lOvYxvAv57sAixG8WB8H/
/yK+CknFv05NIr/adYjvy8pP/cd3DHVS/zj4DcdUx75uX8V5JrpT/50j8xMn
vhOfe3QR/m/6Cdri7zL/d0PmvzbzeUXghdZKsc9IaaExrx9VDrxPEDgF0xl3
Y4+F2sAJfQxgH5Dp8W3qjtvmsp98fhD5jfdX8iWnFPINv1vU16tVpB7ssoT+
+s5L2NeQttR7nqVxfplVwcvb98Af7xZ+otfpxO+30Et15n707YFZ+P/7Sv+/
AH24zw8qG+//GIo83w8lXnrsLvMfsn+l9Uns475K2DvbE+TXjvAM6R3+It+d
U4989HUUz5fdgXqXwxj6ASWCiF/C32Dvvb2532WB1IsLHSc//lJa+v91yce3
S71lOjhjq/8l43cr0eyht8T1xt4uKo4/yTdc8P+29K+2HTXqS+q9b9SzPYdT
L8nKxj9Wt0FfxwtfQ/EO4v/3GHJt3RnG87eN4PObPRf+n2bsIQ+sBJ6sJ3vf
tWZv8U+9mLvSm2+T/j+8uVrwVuTR7RH24BRzWMooDTx2RBnqp9PciANtC9Mv
KLibfDJiNPwqCbbU/ws9AG+3+z54yCb0U9T1h5HHTf2Jh8fp2I/Y9fivUHCt
er//zX+kyvwHuGtzxg7qLRuDsOsDmG+0hk8m33TOj31v35/Pe0RcYq3DXKX6
uCa/b0wK9rXRROQvvTP9v6jDsv8vkvtYAG7E5D2TfDPfbuxX4+nC/9ac+Ymg
Ufy+gDLIU8vykv9PI/8YJftrau0nP/nuwn18lf2etqlS/39DPmNXG3tSahPy
OHkh9ZNu4LMsHrXhgxzCnkd9rbvwf73BH9yEr1N5sA//+gkcmJK2kvx13Wye
9xz7ZDS3m/w9vjv+q+JT8f+9yKcXs1dUXT2M323LXlOlcxnkNYa5EdWGfE5L
Win8f+XJl1YPJB85/hX58d1LvLokWfB/PYX/dzd9bv2I0bdSy8MnYskaY+Sd
ytEY4rFvuTz/m9fcX2gr4X+bQDz4S/D4P5dxH3s3El/l0mfXwpiPU7Y2JX6J
Iq9WszpSn1l/FfnU6N9aU98b92EpUQG+oGrX0P8jlZHXtFLoU50e8LE0TBL+
33Dw8+fZK20aXsawv9aAIuA/y7FfyhT81ZiLUfypo+nPPLHHe9LR76QlxMsp
hfl73Qzu90t3/PMnH8n/W0n+D0+A+tcq5ONBI8H/wK+ova5FvexJXf4ejF6r
wfDzmWIDwbdPxS9oif/jf0iC/8HGkXix0wLyO5eu6FeN3Zz3lZmc9x99hf8/
hOeLyaZf0OyX4ffNkafAe0VU4u/hizm/WoK/ay3z3LmHsEefCiKfg8zcb9HD
+OcaW5BPv0t834ho6f83pp9XpAX6Uzmc99eU+eMp8PzrsSnoj9t+/Nc++Hgs
hUz0N8vCb6+EWDlfHV5MZRdzrrrrQuI9X9lP+XWG7P/ZSn27Wif82VjmdfUz
Dbifluzl08KT6QvMm2nEZRbHI8z/rh4r878NBP/RxMjL9KVFyMf8moJH9IIH
XM2hzm11nQvvwOaZxj4LLWAA8dqBD8QPex8K/288eMn0VOrhwU/I7x6u4HxX
CT/h8t+JN3YeAL/bUfbFj25NvBAbRj3KHX9kjVzF6xlb8D87NezxF/Yj6G+v
Cf4/UvD/4NrVjKHIU+Ji9gEcBm9lDeyPvlQQvNc/nXh/fekHhhDHq8vBSejn
FvP3dguQhwmrue/2f/N6EX1+dWUc8m/fk3jeW/BdRfsSX4f8RXyaeZX+xSjZ
x9onjPe/cEQfI49I/g/PrnVoceyZwyvq1zaVsa92rZCH3yR/HoCeaJ4K55tl
hT+jcxvsz6vL+LNKwj+9dwT1yFeZyN9MX/T/6L/Yi0rbhP9X/v2NK9iPTRmc
TxJ7G6wpVTjf9uzN1N1knjsvP3iSmYXBT436Lv5/CPn0B3hKtHzw+ikFvdGH
RNmHkrAKe1pc9tN4bQPff/g39MH5Lz6vWV/y0pa+hn5avQ/TL7efSLy+yx55
mW3L7w8KoD7Qhj62Xr4g+tM9D/ufcFL2f1akH9e+K/9+GHJh8ZxC/jf8O593
bQ7zNbNaEE/6LyK+cvuCv5pYR/h/boCHipkGT1iJO+CFRgm+rlYX9D2HeraS
cZj+b1oX+F26/Y//2498pMcC8u1P8Kwq78Zz3/YfuK+IB8iP3V/Ed4U38fvS
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
fVJ3wf/3pr7b/h7n79YO/xT/t+D/idPUQxr//twfBh7GnMCeMN1yQvj/HIT/
7xf1pvDDhh5pxc8iD/Ucqaf49CVfLfuG5++pCP/fds57IP0Uxf4I8zS3U4gX
P9zDHp/tTDzX5jx47iY7uI/u8GTqz8FTKQP78++r6OL/LfAhed7EvgzfSn6y
tgb550Hqgbr/Ku7Pczvx9V320CkLwNNaBzrAl277A/kbZY99LG3Lv885iH36
9FP4P98Zcbep1xr6U09r8/y7xiCf3yuCt3oHbsoU3NXooyku4Em0giOor9X4
TL00zQ19upaMPnR9KP7/HfyhDn3JrwOJI/TeGcjzgx6cx3d/7uudG/F2Pfgw
lXmfsc9R4I7VdPA3WovixP+qDfUNx2HEt6W+IJ/aVX7vju7C/9HOkAtLlbfY
Sf+b4OsnHMAflSqL/fcbgbwfBa9immwy6qrWdHgnFM9/0f+mPwT//wT7m9WH
fNn3JPb2eS+Z/91LfTq0H/FcRCo8b9kB1As+Teb8vBoI/9ta9pq0u2Xg982u
GdxnVCny/fQy2K/1DsjrSHBkegvq1Or2IOxFyR/S/5tNPWKoN/GNA/z7erlJ
gv9vLvW/JPzN5W7i//2xDxukn5IxCX8d1xJ/tPwu8VPdktjjXuil+vqR4P/n
EI/92MXzBUyT/v/v0v+vhX5VAEenHR0k/G99kJcZzF8qZ9eQ7+UN5r7zZiGf
X+BDUJ4mgT90GUp9pEk/6f9HIi8XzhM/OMZTL/eoLPj/IOzxnVGC/++IfvU/
hr2q8Ibz7rWNepOL4Ec8eoj/X0i9YEUl5ntztvB8c9LQr4SD2PNlTYh3Pbzw
p6kPhP/zqOT/0g8Jg5/FHFiF/nq3IOptj/vyvC70h8xuN/En9ZmzVS3g2PX1
DbGP52djH54Ooh7f7wv50elkmf/5k3wsLoV8bEw69nF7MP/+xRTuu90O5PrE
ceKl8Prodyq4X6tdFvrW1YfPPzCees6rAgWN95c6J/l/ceLCnzPKGK+DXhCn
BVaF/63BMO4zgL1gakPqeSbPhsQH8+/z+d6XsZduFuRkhJ+xZ0otWZTnvZwn
839nsf9KQ/H/z6mXZsZyXheZU9B3v+b1Z+nf3GpIvJT6wtAD07Z3Bv5UWTFM
+v+3iP+Tr1Jv/7gE+TxchLwoawPzJs1W048JD6G+vk/iAxv8imp3kLrYmWSD
p0A9c4t6VrQr+fXZ3+hXF8HPm11HYh+cArjPWP6uLwNnoCop/P4v/+P/TYX/
1/4d3z+due7/f0eQ+b/XXsJnd2A1/mkRdQ89X0+er6Dk01t6Yh/u3SWvdnuH
v84ez/ur5xf+v6/C//dO+n8n6f/dWsj9t5V+fzN4hdVI5iq0x8zrqD0jsDfN
ruNvIjsI//9Z4odt4DG0YFee160b93dqr9T/HxJP1xJ+g2k3kGcTe0rU/MxJ
6T2sfN7zxtijQuWl/7vAiLf1JvgrxTmXfHnTWvK/yBb0o1I38XtDz+JP+4FT
Uz74k8+1H4j9OPmF+w3fy3zGdfRK95nI8zi78P3bXkv9P9LAH+ndnKX/P433
j2Fvu9qIOR8964Pgv6kD62+o86jWAdjbmAbM/76yFDH+3rgv573mOb8/SBf+
P/I8bfJBzvPvL/hppyXG85oj/gUP/imN/v3XMthTW+oWZu+l+LOCq+kLrdhI
/DC5Cf58LXMg2uoE/NOQSJ5/bT/kM2sb8rz1PP3hSaXxB3OeSv+vL/LrOYf+
6rkTyKNTS+zqrzXsVT1TyJgrUvuURL8W7+F8V78GH2Nfuw36v8Xwn9bYTvgr
G3iQ9HGFeH9zG+LX1V2k/zNL+j+d+P4l7NHQW1XnfqPZr6mNrUM+3mQA9ait
QdL/H0088jwAfHVMJfb92Mdwnj108MY5TuDDv4cT3+yFd1PNlX2bl/bzeb2/
4p/d9oKXjz+N/e9OX1HVKnB+x+nDq9WIK7VqoejfkVP8vjRF8B/rjPqrJa4B
e+eaN2FfVkg3qf/Pod5+8oLk/+t43qg2nF8r7lO7vFXu/7ohN6ZvLw2cjpJS
nd9Tl7kmde4F9DfjheD/8evacHgXlAqRzC8fdaVet4K9PPrnJuL/7bCneRnw
tv9Kg8/my37h/0+S/n8bwf/DM6EtuIZ8d6qCfbSrRr0kvCf+4Ap+Xv0DfnFr
QiL4lJjVsv+vPf5+dyL2LmIi8WSCC69Lgw9WpsHLoOd6458+OWE/Dnfg/Ire
FP6/GOzoiOWG39XO3iAeaNOF/KzI38hj5UfIc032VKlTxiIPsTuE/28k+Ut/
8Qcm8G562Tz0uyN7FawXU6nTb1gJX29gdeKTo4Kv/HoUefnXDntarYnk/yGc
/5lEXrf0wn4knJD+fxnOsxP5sXoVnL/eENyVGiZ40KXjpf/vxbx8NPxTas5r
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
J+dcxd3oU6ndV2Lfn3/AH8VcJh4Mqkn+Ngz7bYpqQDx9ujH6eM1G5j8PgM/w
Zx5MifqGPN8tTzxgZk+Eflfwvwvm4A9GLcAflBa+tZxWxKOf0BNt8jvqkzXv
oK9PPbGXu9I5zz/hRVJnhfD7Q8F9mOaFGXV7q11V4u3CV5GXtFKy/68s/rCr
g9T/oqn/OAyR+d8P/J7eVn7Pg1Hc9/fyUv/LBFcR3Zr+dgfstSXvLfcfvxr9
2iz5rtobf+Boop9X6hD3d96G/t+x8cacr+48CP0IET6+l/BSqsewX1aPb+R/
qeyv1gYnSP2/JfwK6bXJ9z038zqxJ3wLTbzgncnayHy97y7msZ/Da63crU//
InQM9bXEJejH/DrYr0+bqI/Wi8eez2O+XQubjfzdJJ/Vk2+h/+nXsVfXqUuo
I+8TH7S4IPwfx9nH4H6D5xsrfD1DX3G/Dnuxt0PLoP9h84n/O27h+y/Tz7Bk
LGF/csOC5HvfPoHv869BffryFsH/HQH/p0W+Mf/39xQX8O0773EfP/pgPwPm
Sv/fW/r/xN9KhfvYn8F3iTcradSTZpzn/SOIp0x53kb8bM7zYN7pizP19qc+
xCeJ44X/v6L0//8gXhyy0eBtsbrsID7cye/Xu9whPtn7gHpewl6Z/z2LvSj2
HnmpfYrzdaTvaJo3Br7xNXN4vn/gD9LnwWejzilH/ecw9U3TkNXMz++E70DN
hPfaGuQo+P8Q8B91plDPs7y/9N85Wtc+JF55z/y2LnVfy/wZzN/2/0g8a0kj
HnVuiL0+zz41S6gz9Zd+VakvnB4k+P9X9F9neYn/v0O8sH0P8vHiNfF7u0jh
/4P3w/RzNflmbFnO90IZ/NPqYcS3Q3eiLw7XifdLNcb+VPyH80mBh0XJpi6o
l2A/i9ogA3soe9PMceuIx/a2kv2/leCH8Wa+WHWCx0k7vpH6Wsn+5A+OO8mv
+8K3YrKfaNhT83LZb50p/DShLZCXXouZZ01Jp5+7kzkgdeZn+jWT/hH+/wrE
A+kT0Kdk4iuTSx74+vuevP/xUM7XtwTzuK0Ff73vOedv8wn/NKIr8dU82f96
5n/7X+PZ73fWkXpfkWfgRSovQR/C4dtVY7M5z2X2gv+nT6N/qS/9/6fgEKv8
YJ/RdOrQWqvS2Huv5djrA+7czyL6Xnq+mYL/98ROZzQw8mTzUBvqW9FdiPPO
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
JHOAytiv2POh75E3B/ZlmfwFb/s7uFO9o/S3LpdD/gOG0p9u+Jp6TAa4SnP6
Ss7v8njkp25xzreX8FOkpGAf9gh+/gf4dD3AIv1/9iuZnqyHP7nYNu5vMLxC
avELUv/fSr34LHsTtLxswf+GYw9+5Aj+n7qP6VxPo06h+LBfRzfPJZ66MAJ9
WP4e+d55Gnnrckri/yDir2lSv+i/AH/brI9xT5aWo9hH4lge/xo+FX9QK576
xD8riXfnEZ+rcwQfevg1+ZVzW+rlHtPQz8xNfP8TZ8H/C9+7gzvx9NY/sAd/
P8JfvF/M+bnIfLVTR/riA78TT1uKY8+cT4LnrDyM+trTcvjjfmt4vtMjBP9f
jPxqVhu+f8wW/PX2KcjvC1fsWbuOUv/dSj3X41/J/4mj9Qtzkb+uIzmvuBHY
yyLgqvTC8I9b7vUBHx4tfF9Bpfn9JZh3UxtsIn4+CR+AMnQK8d2d89Tbcica
dsUa3Bd77jYEe3Zc9Kskc5P65UbIW1/40XWF/oZymfqLntlB5n/Hsb+4V1/O
+/MEzuMWOD91Zhee2/cT59vFTvr/C8DzJO8g/ngBL5Vy2Ib68TlXY/5N3ST9
9NaBnO++/py/zXf0dO4o8CAdikr/J9O4L2s0cbx6ljlHvYAj/axZezg/p1LI
W2wY8ryMuVul43bqN1+mUp+6SN/a6p4t/E89qOe1Er5fr63Cv/SjqvF6keDh
8rkK/r8T8dAW6sbqvSPU0zzZ06JkxYBPXl6A+tWtl+Ah0q30H+tdkv6vDf2n
treId3zzE89HfhL/vxh/2/MO/RHfPsSjrQ6D/5jwD/FfUGnqVfFvuc/gSdz/
zL6GXFiW9DXspTWCfFadxp5siy17E5SCFakP9wCnoSScxh8VAkev1HvD/XWo
Df/A+h7Iw41XyPu4ffi32FvUf5z28Tz93oJPeJ5CfbB9Ieo5GUWxJxvbYC/W
t6Gu6pRI/XQg8+b6NvH3j17jbz1vk488Psf3jykl+N9VxFNZgpeLGiv7/1yo
b1lTsDcx8JCr+azEZfY2hr9R11g476xc+icZj+AnSBtEv73bWJ7P3pV5zh5/
0U/52Z984esHns9tD88vc1CmM5rRr7V0aU69YbJG/Ly2OvnM6sUy/zcVeVoL
n5V6ugzxy1Y34oVJgp+Z0wd9mfyU1+tOYE/PMR+muRUlXw7Oxf5XTJf5z4ng
oexiya89HsJfd/4ZfAydl1K/G+gm+N925BPjOgv/H7yQWg0/7NNx4ni9AXNj
6hLiAL3VNOH/g0fCEsHcqVq+LvFI4D76UUfTkcuEdEP+zTHh3N9F4WfoURn/
mlMJef1ZgPuJ5rnVXHBZ+iXhX+vthX/2PMm8Wbw/8Up35t+U8w3xz8fp15hm
dDXqz/qq6vjjsbH4zzhv9j94/qJeMHQN9ekwV+77PHw2amf2kOjDLNjjhs+w
n76Pief8S1JfXd6K593zAP+UxB4209aXhh3Q6+6S+d956HOGDfFc2kzJ/89g
f/+Cv1U7WgH5XVEOe/SZuWT1yTPsXfBj/FfwUvLDL/uE/1/nPCPYL6seTpH8
3533dwK/a3Wx4s+r5CPeugK/l7J3A/bLiX2M6t2y2OXk++jPbuo4esRJ4f8I
4PxLfwevPE32J+Uwn6l+/03wfz/BsQwYRDxZ4xT65FcF+RpRS+x/PuN7NYfa
nEdl9izpNbtI/a+Ikd+Z8uCRUe3/N/83DXk1beb8yzaiHxHymX6Bfkf4v07T
P82y4D99tyMvXz9yvv/KvhF35kXVsbL/48xE9LFlY+xLuB36HJsff9OpDM9X
4yjn0XAv/jMMnjN9aQL2qsUK/LkXvJhKdkPy78on8Qf7C5J/ZdSEX3sofOz6
HzH4s9znnG98Jvik4C7g54/zPnXVWr6vM30n04zmBs5e67ifeHH5NfpTfibi
p9Bn5C+9LnF+M8ohL317C//nCObTjjoJ/t9W8P/MFSrJfsy7u2Tj7wbdBF9y
Dj5ik9LMwF3p/5iYx4u5ir0KmSv8jz/BM56z4fzbsbdXn+Av8f8H+Ek8Cxt5
jFKZOQzNCZym+n81nXtYTfn3xw8xIYSmCQ0xIYQQcndyyy0xjWIaE0IIGSH3
DoYk5N7Q0CYJTWIal8alYwwxLm1Cg4lN7qRNCKHf892v9fvLc57S2fvzWff1
Xu/lwdyVXkX4tRrkkx/MpA6ljqbOpA+Bh0F5EAte12s78XruaOxrgDf6XgF+
Xqvt7+Bjlx6kz6R//eZ/76EGeCAPbhI/R/5JvNqnPfXJx+CWNecg7Pme2cSj
l/3pZ8y8Rf0ipwr1Zi9d5j/3gY+7AL+NNRTeIyVhkeD/T2Nv63vzvD3Y16lE
HRT8P3u41P2zuL/kGVL/TyDfsTQV/r+Jwv9HnV0N+YbzW7ZG8F9ViW8PfKA+
4Kjx80HgfdWHu/j+QPC3in196f9XpI54xg4+0nkewv8zFTxxSFXwMwPAIeoF
H9CPVI1+VFFDI/+yPPwd/3kuVvL/9dznferMpj/cDX5WPZw6keon+fCkxvBF
2Sxin0tgEOdrM5H4Yj/4ZKWxzKeVWrHnj+DBMh0rNPBeaiP8qDUanmw1+Xvs
yfwo7OesqdynfUv8a7Dwj5e/y/lXWs/5Fv5E/n6uD/F3v0HIy82r2A+3M+BR
IttinwYT95u20JfTipdgL6emg+9sZibe7a7K/Ec7w44qWT70L8LuMf/VK5Tn
qdgMea4ZRvytdeY8d7DHQXe/K/j/9di7i5/Atbdr6Wz8vCZ1fyWMvVv6b//h
P6sx/6YfrkV/rbs3zzduOO/Thj2Lej3Z/zJiJ/Z7NnyU6iQrcuZyE77R+F7I
z0Jwl+p86vCaPzgupXQI/ZgY8h5lqwv7IaKug4cMN2OP/jkq/r8v9iEsgHxv
u/BER48C/922HfcTxL5nxW058hk0G3mJ2cD3LVkh/D9RxAuZ6K/l0GT816PP
xM/hwjc25hH2rG8b9Md3FvY1Nxn7PnQk9cw3JdSzI5ZI/3+u9P/z0Ieqkejb
iIU8n7Ps+5jRGX9xvDv4qjJwa6bHUV8YP/9A/1DVP3IvHs+In9vAJ2u1aU+/
6i/4BzSnAvxrEvsHtFX0A5Q9RYL/96V+mvod9YOq4NLVJsnIsxN1UtWnHPrQ
uDHxyhE37F8pvGfmR33wTwfssbcrorFPSZJf5fXh/G7Xl/x/kOT/laX+L/s1
+gdzH/mfyHeCd5FvuuSiP81rcd7lfMn3Aj8L/x88I9rdruDFkjcR7xctwx55
skfWeusA73vuKfXu7eCX1AdjqW/OaQpe6Nbv4E6iZhjzd0q67J/6K038/wPi
u6CZ4KUd2BOuV7os+X9t+GlyZZ/YPGfOs/p1qf+f5bwi3oAj/rOiURfS9oAr
VhfuQ16Cmb9XXcB3WMPYG680NBMfxCbJ/ufmzAcqwld77xL2+9lJqf/l0W/3
9eL3dzlhfy9HIZ8zw4mjt7U0/LmyqpL0/88wz6GGfjD/7/dfHcE//VsX+5Iv
fDKbwUvqHcVfDKuH/NuAw1Tt7mPPSp6AB5uTgz14Mor3O14Lfa3wVPB/R+hf
uMQTr6SDe9JXNJX8P5f46o0DdbB6J5iPVuHPs2xyMPTTcmeN7P/aLPivNAPH
q/6Mv9NsuiJvdhvQs9mD7Y2fX08lPvdzkfnfEuLnb9oJ/19t4f/Lwh75o1f6
BME7d6Y+qXtWQF8TPuIPp25A/wcJX0bof+RPCc2F/x9eVnXbJ84jKx372qOM
9/8Tvha1NXzV1vjazNP9JP040yvkrfwZ8gOP/vy8YDz12NtmI99Xmsl+vRD2
j6gbZ2BfL1AHM03pYPhpa3A6/sblEvX25O7Er+8Ez1nU3xv930d++csg+r8b
2XevZYPXVgKZ39K6eaFfEXb0L/svkP5/qPB/uMI/1op9QHoReErTp2PwaTz9
LPxP4+EvGPaY8y0HX63e+hTnu64T9fSSCuRLESX4xw6VsW87waNbo/dgLxvD
j2MtTiJfKJR6v/004k+n2oJ/3808lutC4uspNtij9a/BC7gGgnf4Xvgc1rOP
Sz3KXK5+qRbyPhk5tuQkCP+TP/xPG2K4vxPg7nSXs3wO7sf7tG+Evaj7j1F3
05fKvIlrFud7spLk/x+Y10tfQb/B5l/8zXjmktR2gjdzbSP4vwjB/+H3lWoV
kUcv5t0t3ceBnxkXi/2vfRJ7ttVX+v//Mr9R0IV49lom8/HRc4iH4+HX0D+z
f1f9mI//8AeHoZS+pz71N7wD6uAL/H2/+XL/g5n/HrCR/6+l8z4H55OP9rqA
P+sl+Kbfwbta7mzqg/5/Y8ix5fAxeFSaHKJ+ZnuLen8sPI76D7mS/1/F34TK
/nUvwdvcs4Cj67vRsLdagj3+K5f9g3rTI8Snz0aTHxb/LPj/TxJ/DvzS+Fwn
m3pCaJbw/0QJ/48LeLjbQXxflIK+R+GntDc1ZP+PzDc+eEGctfoB9d1FaYL/
642+2Hli/+PIM/Uz47HX34G/1QpiuO/UBdj7OsyhmxOWGXUyzeM9+Wb2A+oT
tVoI/+9j5K0U3lelWPjGhtdEH6s0Ev4/+utqmMQLx1tL/x8cucUP/Kha7wr9
Eb91Rn6k5LNvXQsWfIu9zBPvlXkAUwb+2n2HzP/Uxd/qodSLBiYa528tkvpo
xgi+v/C87P9rSD2ll/DDjptD/PioEHm5tZP7y+4n8x/J4EV6+nAfZ08jfy0F
XxXzHfq6/Kb0/5kD0f3hrVVKqMNp9RKJF0YcJ/7oNBl7GUT+Ykl5Rfz6eRL2
6k5H5D1xC3/vZnf8a8MRxBt9hN/y8gjkw/sK9Zgx7GXW8r4Q/j/shOn2TgNH
qTy5Tbw59AD13Dx76nXP6TOqZ0yS/1eQ/P+T8P/gT8whW7H3I69jn+oI3+YR
/LE59Tf+3pIF2M3jyw39tZbeJH6Zs5v3nyj7lUt+xR/8DE5MXf2U+NXle+Qz
+AX9dMcKgv/5F/z5zAec/2iZDxvC/ID6aiHnleDP8/ilwq+YNoH4qoL07xb5
od9Lb0v/X/b7BbA/QHcT/vjIJejjjos83+Ph9I9WDSG/2iP128fHkOO0MOKR
jIroi1d57GG+M/J8oQ7nu3k3z3uR/S36H79I/v8n8XYUPL1qFvMXeuf2yNNo
F/KDgeTf6ssOwv/5gv7wYvjt9fPrkccQ+NT0ZdRfLLuu4j8PjMQ+udfCPg96
QD3z5kdjLkhL34J+2LK32RJ/BjzY7C08/3HJNzspwv8n8jBgOvFIwSfOM5W9
U3p98IXqD+nglBKfG3KhHJ0NPnW9F/X9fcLnGuWOffBT8EOBp8CrmeFJ1K8J
H/4i2Qeyvyr+ouVo+F1Ke3H/OUXGuVhvVSFf6D+NvqHLCfiI46vz8+L+5Auz
wHlo9hnoT/x84f9rSj3OdT/x9K1msv+P+pS2lrlP9WY14t3E1oZdUrt8Q76z
FbyL+lzw9e938vyF7NPTv4wgni1cD+9X2SDsUVQG+rHlGfZi+zj0p+IF8f+7
ka+TCdzXDvpBWuBZ5G0Je871hy/JZyfG4u9dN9AHGlnA/NZv7PtUv6AOoh8e
xvO5veT9x52Q/N+ZPn6R9Jsy6uKPZiMnyjXmtPVe3bGX55lP1hcWI+/z2Zut
+cOzaS7pQ9/OracRZyhb4VXQc2S+NZx+hLYxn37GEtnvHsb+OaXXQerZ9i+J
79sWEh+HXwZ/4nARe/DVWuKFmL7YT++m4GuckqgXRxRjn1pe5Hxylkj8n2b0
NayxE/EnTXugX76biVsH0/fQhlLPUT+0Q98ilkn/X3hLI4fBx1h1CHiJjL/w
585N8Q9P6sr891/Mp5UtEvzfM+z1h9GC/3dHX8eZhf9/DPXORdSPLF8tI7+L
fQ0+Ka4D/F6rzNQht9Q1/IA1+wb6kEqerVftzN/z7cr9OW0jvvP5h/Nb1wd7
d0T43EqX4U/ngCvQ/2WOWXGEh0NPYq+NkhcIH+s8H8H/D+R+Y6g3KF18if92
Lkb+XkRSrwpugf7F/U4+1Jy5CaVcFPHWRvYDKUvog+nTDmBfvoX31HKnsaF/
lm0vqVcWSv4ydjD3t517Uh+Ak9K7PkJeDyWTD0ftxD6ljyTeWXpS5v/6M1+f
NpJ81KEWP695VvD/vxKfpFwkXp7Hnmu9+jn8wQj2SmsRR5n/CWJOXb8aij8T
ngwtq53U/z8i7wfhF7AsO4u8xT4Bz+PTCTy6wpyLei+a/kI6+1HVUyc4v13g
qCy77hjnYfWJRe/2nYKP70Yl4f//hP7c2cx8ReIq/O0r8J7KgVDZ/5ODvdmc
wvl13Mp57s2mf277mZ/bFVLXLbIx9NNcXB55zI0mHpoXSfxY4TjPX539A6ay
x+B70p2JBxwPIw/KYuzZm0PYw1PN0J/tPoL/D+L8vZpjb/3T8d/Xp3C/P7N/
XS9Xjs8V2dOj/7oWe3edvZ56yrfIb1EO8vxNKP5/QmP0u9o9/GuzTVL/X4k/
6Cz90sRO1C8TKmL/pkZTX91cFXmtA++96tsd/zGxQjj6L3xPWfCCqz36IQ8z
6xEPtBY8SuOJwv8TxLyiaSn1KbuPRnxm9RjG/RcUcf9fdMOefpnC+YTUJ75y
74L+XYC/Sh0PPkZLz6c/Ft0V//rtt+jXu4e8f7dB+PfMq3z+JZif/1Od+Dr7
M/Gou+zX3LYaPEOml8z/lCfeza/Be7gdZR/DyBbkX0XwjVoWNpH9f8SrqpXz
tAa2NPIas20/Qx8t0Qfg41r3Cv97x703+m9Dft1hPs+3k7xcH72K5xnYmn5N
cRH+4m0B+YL9W/AfHuB+9cVpyPfyd+C1Dm826gemGVfoV5ydAG7g+rfUy91y
OL+jTahLRbZCHiaXQz5yMuDzfHyI/YUbfqB/VvoV+t4DPJM5qg/5W90+wv8r
fGdL68n996a/Niqe+vo3h4jHUxtL/e9n7MN49nMoE+9jP9cKP0XYaeSxxQ38
hfML6pPhL4T/D54aS/xp4pnazE1bI/8CX5GxhP7VO9lnmBqIfTyVBZ7DA34Z
7dMN5Pcj8wwWvwfEk5+SqW86ZAv/H35G92OPgHInCP0bwJ4MVTuLvznoQv4S
3RW85pp+POcmX8PPWsOpe6rr16LvmwYI/28i+51sQ6mP9VmAvGeCu1O/CsFe
hIbwfV51kd977LEyrfoTvFnCMOxXrkb9r+l5/OPcodj74mjJ/+2p2xT1NOIs
dSV5gn7jivD/TaB+9Vr4wm/LPtIoeAWVMvyAKf2wMfdimtCxnPH9512l/ttS
8n/qomrPluR/TpOxl67wnOpnmItTv1tA/yCuB+d/LZSfr2SvluLLXJbmEUX9
LFv6r7XY96d2hEfAWuJP/aQ4X+qnLcobP68ykud3tfJ9YbJ/9Ec76f83NOJz
q9tY9K2e8HE3ei74f+pOWnAR8mKfR/yxd5vw/8m+U8cZ3L9tG+px+gf0+wp7
U/Quuzi/0NMy/xNCveXcG+KPhg+x7+d7w7eXY9eG83XmfOOc6OekN+H9jq2p
b3yf6zzjvS3hc6hXxlDn0JcXSv//J+yFP/Pjaqnkk6t7cn6/HeZ+IrYhb2n5
1IP9+wj/b5zhHy1lt6mX98imnn7zpeT/seh/nzPgTXzsyMcbfESexrAvUA8D
n6X2ssFOeHmD75sh+weHfin8fy2wh8/TBP9fjH8viiN+eQQPsz69IniBVRWZ
lx75HnvieYTf/8kX+Ws+Fn1bYuF9Y3/i+06QBypzvie+nEg+q3ZbQ9/ErR38
IPWysSf206ivB7P/WK9Cn15tYI/9z2sInuuUxE9Dpgj/fzj5SAJ7IZQUcOJ6
gBv6VWE8/slmHP56qS32vtMs4pWAhpyHG/11NXIQ77MDnnNzUjZ45FURxHP+
G4k/LieyF/n6J+YRQ2sK/+t27EV+OeqFmx8w7+jpxPddXCf4/33c/7wL2Muo
3cR/ZeAU9M5S796/G/+fTJ3AnB3Ffh37x8x/2E0lvopvST4awl4TrVohnzf4
Y28OsN/IHHiWfHbzNH7+8Bfse7A3+E/7nvTbBqYzzz7hmOGvLEWF5H8RUo+s
DT+DsjEA+SwwCf/fK+xh/eXi/2swP5z4tYErV47C36Dfb4C93fct+hS+W/i/
BtCPnRSLPJnXcT/X2Iek2FRDPvYnSv9nNva/yJl8vrg333+oPefXiDhPO7WA
/sRA5sQsj9wNe2g5ZGPEJZYe9/HX8dLfL+8j9d+mxt/XCw8jH+eYa9X7TRf/
34H7d7uC/ezizvsMjkL+niOnWrE9/rUwGn39si/62B08uJ44mXjjDnuntPbd
JP7/kf3kdrepn7vOxZ5p0k/bUQt74/5I/P8m8AIPxyIvuXOZ36zZUvw/PKH6
b4vBaUyxUD8+/Avn5fYn+t9W8CG/7CLvLaoBP2HGc8n/w4hXJ7XlvHp54y/n
zjH6ivrCh+j7/CTiyWbwFCil7JGyOkzBH1xaRB3kcx3wxeFX0M+NvXjfk3uJ
X9qD01S3n+L7aqyT+28j/b8/mZf2G8485uEG4Bd7f+S8vWV/2+m14v8T6WcH
LUR/cirL/j/2Y+tjfImvmv4r+P9j6H9uf+zL7qvY/ze3OI+IGOn/r5T+/3Hk
eXw/Q870Eb3JN6od53xnsN/ePE/ivbLewv9VYryP9Zk//cK7IyX/l3nRNtSH
TfbtmLewczPyNqvHbeKpJOGn7uvA/fsLP+VPwp867CP67snch9oknvdzoq6p
+rB3T183m89HRgj+HzuqFPeV/b9B+OsV+AVrHPtX1Wd/CP+ng+T/n4g3Y9jD
bnkx34hfLW5p2JP8u9T1o87hr+JKsV/DdJn/GUM/0j1W+P+s2INpvYlfB75h
3iQyBzzHtk7gNWat4/7Gkv/o2+Nl/m8K9dQ5M/B3h7aRL/mkIa95Jbz/Xw6C
/3fnfQ6Xp99UeTr1kJovJP+/xt/PnUh8UnSQfkL1Y+SPLRpJ/68ie6mnrkUe
rnbm90sXcf/B4E/NUQ2oT4a1BL/acCf28rQT8dJQL95fOY0+3DODL093YZ73
tW7gljVfG+LB1zPAn/nAx6jOPEk97sY+4f9/znkUXcE+hf7GebyqT3xwYDPz
CZHuyKNnQ+xvx/0S/5c35MtqX4n+qt1b8uMFZ6h3zPHEPzxpQvxSAi5Xr7CG
862uEJ9GraTem858m+ZYT/L/BOTvjcjvXeZQdPUQ8d90eFCs4aOQt5Rp6ON1
DX37eR3PY3OWeKXi17zfr/fBswdFYi9TZB6+SPZT9mkn/H/zhf+vivD/wUOn
T7gh+I+79KM8q6D/CeTD+tS52IvNJ7AXdT5J/v9I+P+HSf+/CHuR1V7m/3oj
D396S/1f+NsbV+W+f/oSvH651rxP+Y5830DmHpXsl/CWhpuM/EFpZiJfafOK
89p4Rvi/qlNvH89763kH0JfoivjL5CrUi1eVGf7BWnIM/c6E/1hr8wD9+ccH
fxjCXKzqHsn7bVvE9/3HXlS9fy/p/2dy/mNXcP+t4uT+/bDXOdW476djBf8n
80vD4D8y2z4n/m9NfGlqmWngF7SSGuTfEfBeW28dM+y6ef1bznO0TrzR+CTP
+3Ew9qCQOUHdVuqXHt+hb4vB+6vL1zKveBh+RcvgMfjjtSXET9+H4K/dhI/i
qAf2okuBkW+atvgyDzOHfrhy6wj16A0eov/sldZdBkv//yb6HKYZ/1/Zvp98
8kQNY3+X4hqCfI9qLvl/OOeZCo5btXlK/fxiV/SnHfvdNdfj4D8O2pGPjBhO
vLJsBvcZPkP2f89lHnBcIPa9djH2bet66f+z70N/xzyock34nqLZI6UOpI+p
f77D+3yM43n86YtaXkSK/W+C/d86H/n2Ky/8v/A26wNK0Q8NHKZ+UOZ1G3Yk
brHPNPo56u+LeZ5bR8iX3NrT324Jr72lSV/qZSe7Sv1/M/4i85Xk/z8gn6G7
BP93hnqVkxf52ND+PN9FX+LRiTeQV5+X1PfnIsfaI0fB/8t8RSsv/JNnAPJ3
g3xGcXZFH1+fE/9PH0wrG0R/oAwclvVZJvn2Xfrj1vhc8NoHVgv+nz25lq/a
Ei/bdcLfuMJrq58ZJP5/hPD/O3Kf17C7Vs+bRlxo6bCVfS7xi7nfbPgDtMaN
RP9D0K/SIvT9veyzGu4l9f8WyLPrKan/TwdfeZz5AKXTdfSrsvjDeo2IP9Z/
NPI5dWpL7Ff6n8L/1wD/tnco9sL0gPgz/Qj2wbs99dO7zrL/T+brujRDvzPC
+PyWOWHlXAr63BCeAXN8S/rDc7I57ykdiKezL2EXT9yDP65nGudxtoQ+6Z1v
wHPHNCH+XG7CH215Kf1/4mGlJIT7Xd2en/+2hvfp1Bb7n7YM+fiuEe/7mTqg
NaqUfm5iC+H/7S/4nyvYjz6yH/AyfPCad3386+nO5NdhMejF3OXwgTRhDlZ5
Ak+elvQC/X8zDPl4bsJfrHog+b8j88SP1hCvT+8o/r8teMujHYmXQ78Ej13w
EHztsM7ED7bsO1Cc2Edtuh0PX9TFEAPnr0+szfm+OIc+/vye+13NvkrNZTz2
1EP6f46q9P8UQ+6teWnkp6eYC9eHyLzDg7vYH68M5DOX+FZLgw/S7PAR/VsE
74y6FP5aa0RH4pk06m2a31TsV6Sj4L86E18nuVPfXLVJ+H9CwbtdPs3v/0kf
X8+wwz+Fs7dVf1Es/H/nqYMlPmH+5mIX/EkuvP3mefuZt+vhhD3Pas/9dE7g
8/6T9McGHiUfKqBfqpU7Jfiffswjnd8s839zOY9qudQ7NvyGfTzgivw5gvPV
B8VinxJ8+P5Af+H/f4p8X9nG788G92ItKc/8SsR94f8TvsMB93n/Ahv+f2op
+tntLfISsRR/fa6d4P9XS/0nEbz7yHjwa1lpxKd+7HvVJ7FfSlkUgP24VkZ+
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
/vCEKPndwSuVVcG+2v9OvrD3sOB/fqCe7jgSf+5tS14ZnSj7/9jro3fxIL8O
LSXffdtG7t+DfUTRXclPxsn88LHK3H+Hatx/9nfkf8GZ4EGXNgFfdbYZ8WLQ
fvBfDuyt0Jc3kf5/COebco/4vrQX8y1dpjIvdLE587ad3lFvDCKe1vbAQ6N+
Zr+3fqc3+p4Ir7B+k/6CugZeZL1PuvB/5xt5gt7gIPj02G748zD2binRXWX/
Lzy35lxf/FPSXOT/TQr+5QZ9K/WM5KMlNahrPI4w5iH06dL/HU7/2hoZw/yP
Zyvs6xGZ/2puj32ydcC/xbI/Rz/xF+fbtSP1uxTyarVbLPL2cyL2ZDX7lHT7
TMH/Y7+t7h0N/2354jL1iJnCTzoanKy2HZ4R5cFp7jshmPNNqcfzBVjQr8r3
+Hu2U6mnL13M83aaIPE/e8w1P3DVStFg5ldjxxN/PT4m+j+dfH8P9QXtsuyD
n+lIvpK4Cvy4M3vXTUXbwCddoK5lydkp/C9T8a9/3Mde1d+GvPfYSjySlQ3+
bib7atX9xdjzgT4y/5PH/tJy9vSnK1YjnjmfSDyXvY0+yG1d+H+OC/9PLvft
SB9O2zyGfOCiLfoZKPbdFn5pLRm+LnX2Z57vOPm6EgG/mtamN/I+IIDnzXbg
c6rMC81jDk3JhPfT1H0E/OVHrTzftq5GPdF89C37ibJOUxf81Bv+jUnMZarm
fOH/FfzvIurY+v7hgv99TH+s1A9/VHwHebvVmXnB9dOoD53KoV6Y7EZ8Mr8+
5z1rIJ+jH4j/Xyz8fxr+rNIa9K+wAfK5Ppn4v18qvx+WTX7ndh/96tKX8xo8
nHj1+TvszfvWgv+rSP/vyyzB//3BPEfZCCOON0f1MvTZkncMft1eQcin3X7x
/5ohh9YlofifHd3Qz3Qr+Iklwp/3UOZr/2jG55oBxC/tX6Fvv82T+r/wfkU5
g09xc0S+xwUgH20KiJ+LhoOHyxhDvDh7J/ZpUj7v12uA1P+3oj+ln9Cf+cQ7
pu4P4CMpfUo9vTf7681dMojvc6h/K3e+J179pzPnN4o9sXr7m9ij7fDo6TUG
Ev+d700+EmQS/o+/iee+Gon+x1THHnj/gT06XZX6Y4Qr/cGWG7Hnj3zx94dv
kNc5eQr+ry/P48s+VvUJc3H6bnCqyps26F/EOun/p0j//3vmVMcrzCfkTPJB
/63g02eMIB4//g5/XeZMPacMvLT12WHB/xfjH0+sRJ9D9sLraM/+TrNdrvE9
pqxKxtyR4lPA8/adjP5cbYe9LKgg/D8vOI+q1GvNCZWk/zeE/VY+L4g/1tUk
XyxYN5z7n2fEUUrxMeKXfx9ij1fI/HTSAPTvWQ74npIX/H4nB+Yv3S4RT28d
gPztvES89YK98qayb9jXEAeviN58LX/ni6/ZT7CRerZ6kvlB66k35HfJKvi1
SNkL380VfzuLurbJt4mhV1ov9s6pD9pg3+aMJ5+91UT6v7/Tj05Pxl79+Iux
R8TsegP5TIPHXHGAp0arOYr4qi68vJbETfTP5jGXqtVrzve1YA+KnjlR/L/w
x13NIF789BX3EdyE83AhntC/H4u9aNiZ+DC2HPF+0n3wlspC9O9eGPqat132
/5wmHt51Ez/U7hN82ZenIp8zu1KPC10i/P/MfZii3IxzUkPZ82WJz0Ie/mXu
QM+Hr0TxjKfe9tMV8tPUfeDrbNhjp9rV5Pe74zeVOf153yc52NvjwchXhcrU
iwr3My/n0h5/l06/SXP0o5+mPGRe59lS+uXVs5EHNVzw//QlNK+e+HM/X+7r
eieJ/57Dn25Tl/ikYjz1rIhZ5DtpNdGXlB+xlyXCFxd7Afs6IQZ74XUE+9qs
M/d7uRF6mBZBfcXTQfh//KmvTfUX/O8e7FMd5lPNXjHEYxN/pa5QuMeYi7OW
faCeH/Wv4H8n4T9Hm/C3A6m7qT/lkB+ZLmPPyoObsgRXoR9e4ED+9YXk21/a
Ed+1cSYf3VeVfoxnGPHMeAv3lTdX8P/sodW/lfmPlxt5npJR8KVEvEQe28Dz
of7DXIEeEiv8T/T1tG4HiQf+g8/Q4jeG+m++7Bsea8P3tfpAPFj0LfY/8bLs
/ysx+gCmar9Szx0GHkCxmcx84qnl4KvWXef/z4PvRY3Yif506Cf5v/ClRo/j
PhuDA9c/+qBfhXHoi60t/9+pIvnE4jlS/88kfro1Fn6A9fgTi88u8o/v4dnQ
10eQf0TKfOjWJO5r8jjOdw79C3VKHu+/gf0IyoJc7EmPVuDOP+9l/iust/D/
rqIe4bSL/GsteyL0UQU87zdbqC8FhsCvY/8l8cv4EuH/g4dUX8vcoTmvLj9v
0Rh7uow4XveykfrPRfxUfGPsQ+0T4MUiX6EvGefBzxUcpt5yjTqpfuo8/nGg
P+f/+Qj+9GNdznvPWX7+CRy2/rfwxQ0mn9T9BuKvii4Tn25sij07OQL7cTAV
eWlYzN9fswH9/525Lf2Wt/j/68xPBX0v/L+hwv8LH5zZaSn1k8z7gv/sCP4z
8Tj4Na/u6Mu9KM5vN3vCrV638OeDk+BxiJsOf92bSTxf8XrJ/wMl/zeDH1nZ
AH8VOg+81ip4q6y5duDF5hVwH1H0j9So7tizN9UF/33J6JPoD/6f/8GXfMh6
kPPoWRP/Yke+Zal/gLlWr1bwa+z5izmIOMmXr8m+0ZXwnpsTsDt6/EDkMS6Z
flYtd+Knn8hr9U/wqKrv14H3CzkJvsa9AvVhn1+o5+TtJj7+MY/+f7voesbn
yuOE/6c79mS9hj5OZf5YT8ceKC5viS/3TkI+Ta3RL0cT8aC3Tj5wF959JRle
Q8udtcTLOXWpF7wVvq37sl+74XT6bq08Ob9j4O6VKVWRjzgPnj99KvagZ1+Z
//2K/mvLeTxPzGjq3rP/NvYEKu078bz+M3i+0kG8z+rqxNcjvPDvnW4J/n8R
8r2nM/2Tz+wv1e/YYq8ShY//5nHJ/2VfQh/hp0mCr8pi6228hzm2IflPWC3B
/2wlX/BtSrzwZDjfP5Q42rIvGnzX8/f4q1VHwZPe8QNfk5NHfeLBDuoTw8fi
f4+CW1LrsDfDWvAP95/agPu3rUO9x8md+OTEQfS/K/VvfSJzV2q3dsiPwz/E
g6tlfsx+PvW8YHjMNMfyxE8NiDuseUPBS0fLfOWQTIn/ZT9twj3J/z2I5wOK
+Vx5g/B/gLdXl6ZK/9+W+09jrk93Y8+aGjkNPXIax76Yy6n8fBX4c8Uf/mlT
3An0f2Y0+p/BXJ7q3Iq//+KC8P+k4b89PYhvLnYQ/P9t4s63R6if9ZD971k1
BP//B883ug7fn9wX+/DyFPmezSTh/8vC/sf3od8QInyFy3ryPhvgn7DEjcOe
OwpeY9DPvGeHR8wvBoJrUOxX4O+SwUeqs+PRt3m5zPFvzYUvOOQq9n9jfexF
QVXh/2O/idZtN/7/h+f0abpnGn1I5Wgt5OP+ZOR55BTeL1z2USayN06fJHzY
ZvpBWupl4rdFe8kH9z/DPjUGr2DK8jDqLaZuccQLh8phj/sL//fdf/AvyUPo
p72/Rz1hFnU3Pbqp1P8Er1Pegd+v1Iz7LGTfitmtKMD7/wCFYTgM
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 3.3553759*^7}, {0, 3.3554381*^7}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.4449749585*^9, 3.4449757222349997`*^9, 3.444976902237*^9, 
   3.4772904535606003`*^9, 3.634820733601572*^9, {3.634885319419433*^9, 
   3.634885410414878*^9}, 
   3.6348854755340443`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzUvQnUXcV1Jvr7v9M/SHgMmV4n7vRbWb2SdJLuTvL6BSdxxu42TpzVTrJW
Oi9ZdjsdQAY7xmDmeTZIAiSBhiAJIQmQxCA0g7CE0CwkoXlAIGZkBjPYmDHo
3V2n9jm7dn276lyBQd2r/3B9dc85dWrY47e//edfPe3E/33KV0876Wtf/ex/
PfWr/3ziSV/79mf/7Jundr9qfKyvr///6uv72J9+to8+H+7r4/9zuPv/i//z
C/R/6Ov3/8Up7j+dn3rttddGz5kzZ9vFF1+89Lrrrrtv7Nixt0+ePPmXDx06
1Ndwv2l8cdu2bc+efvrpJ61cuZK/+9lXXnll9pQpUzZefvnlff0rrrnmmr7G
7xw8eLDPP6Xv08X96d5Luvd958QTTzz8T//0T4+dffbZdP8/27VrV+17DdS4
V/9RMtbOEY61v8Z6/NQHOM528bu/X7duHd2D/vpa7v+295x//vn8OznGj2I6
W70P88OeSb/iv/rMM8/cctNNN2255JJLFo4bN25l95d33njjjf/xySefPGpO
0meLw3+y+8/gwNtvv733vPPOe/ukk05yw+x+2//ee+9Nmz59+o+//vWv/97+
/ft5s155xx130GPnTZw40X83MOLNN9/cf+65526/6KKL2u+8887HutdOmTFj
xhvda3/9qaeeOra49O4JEybQpb9Pt2vWu3TYvPTDHsmQeenIYCTdb2rN5/sY
SrHTGp/54Q9/+KNTTjll+ZgxY/qal9599919nfGzZ89+8Vvf+tZPv/rqq/Sr
D3mS2ubIPpkc2Yc2aYP0kYZ28Kyzzjq2Kxro29a77747s3tk3zvhhBP+aM+e
PR/RXv+38lA2fvHFF1+kO1x32223+XM9QAOmc0+yjK6mb0m+feu+++77pRde
eMGPm8QKXfrXDz30EL/Lz7/88sv0frd1RQULfRITpUjwouNn/PIIkdaYPm3a
NLrfb9KyNGs+Y9i+Vg6572ga85B5bScYc/cbsDxNvTytD2HIhU3UOHPJkiWP
dPdWp7uv/LXt/7FlyxaW+kfrLumYwx+yhq9n/yOcfH/t32zatIl+d/z27dv5
Gf/mBz/4AX23+4ILLuBrj9p97yVP4Qs0Pr9v375PvP766/JR9Bp0C7qMh0R2
BX1Hr8W/Iwn++sknnzz01ltv8eN/6/HHH/9hV+T+8/Lly/l3f7d+/XqS6n9M
4nbAHnr2GejIDh5F4xu0x5ed5w9jfMW2adKJuXnq1Kljb7/9dvo8fBRNYTs5
xKNiFv2JIHuFniPG4ob92je+8Q26/pg33njjaDo83g34dvFPa6666qrSZvHi
s/Gv3f/XFRPPnXbaaXzbOZMmTVK2zeBw17ZZ6R/nhtr9lob5blci77zwwgud
qYWG2qj5HHTOB46yMaKz/nEwtx/WeIprm2Tekuc77tZbb6UdOniUTVsHD/MT
H+HMjSiGRL97a9SoUXRfeubRdijC8/vUGWecQf/0755//nk+v/QI+m4XmSH+
FjfOnDmTvvurzZs3+991SBx8b/To0fQ9uUI0xB3dITrRgfZ1o+b9E+f2Ix9b
4ryCufxJj6NJ/uG6K6+8kpQc+YdHyzQN4OF9FDNVnMvGH+7du5e+W9sdDuve
j3ya/GH0RjTZ/z9H5gf9r8Lmbv5G18mnn3//29/+Np1tf0Z/5dlnn6WvXbTO
3/nqefPm0XcuQli8YYtGTmKDvqfooRsxOl+NmvdNnM2PbEwJe7nOlP5kp6pJ
BtzmSy+99P4xY8aQ0dk5KmYrGtbARz9hA9VpIzVI/+v//v73v0/mJ6kzF31v
f8SzF5zYgRMeeOCBR88++2yyqkm+/fvnnntu6yWXXEI//58bNmzocbRfXbNm
DTnYZD/Qv31n6dKlH/Vp/cDHZJ/W7HR2fkJDKtzC5r994YUXyG8icU2a6+hY
vWhYnY92sor906bHk0CgnBXpw2u7LnY1uo9u0oID2vnbjRs3XnbXXXedt3Dh
wtVdr4Asj2XXXnutc4M7vVkBX+kOlUxrisVTMJEkJ/3m9GXLlvVoBQwF9z9c
pBMoMEnX3zBr1ixKH/zCSy+91LAP8Ecw7PD+Pip4Yncj0LSS/8W/A4e7zlJ8
uGP1y0/TTr+76J577unVMPxQx9sG4+0cpXPr42+UlHvlm9/85rU+/nY0T+/P
S8HRoLj8xO4l7n/5sCH71ocyPvxxBw4c4GH/lM8XkiHCw//LrVu31vHhxXOG
g+d0v6EZvWf8+PGc0rt4/vz5ZOg0u5fy66UCXx/BO4TP8WP89r333kvffZLC
sbb0CNdj6CMco5caBMeg7x64+uqr+WQe1XPbBuPuHJ1zSwqQvvvCjh07/o+Y
21B0fO6RRx5ZdP3117v/5aMPHD04VoXVCVYw+Pbbb/Oj6Difv2DBAhl+p+HT
d2QjpEL34Blt+QzyqSir8OWuBPRv8R+efvppuuQP9u3bB6XG4Ec6/PAZfnwc
yHHuYEJiBMsw9BGNz39HVi3tGPe//Hf/+fHHH6ffbbrssst45x9F89wO3qP7
Db9Dwx7+0TTl9B1tbznlFFCn35GpdBROefgeoVAhsA/JNClUOEdPWAKYo/fA
orldZ0IPCVzbCa7tfvOfnnjiCfoN/ZfvT04JffcP69at4++C+w/+RMYWXuun
kGwdCuo4K7dpjyWYu5//gJ/rf0fYMLJ0yQWWIF26H20J3m4fwrx0gvF1v6k7
tg9jnh7vjoXyW/JYXnL33XfT/UatWLHiQ5yncHzhcfts19sgM4BCCx6N2CCU
rvtX+is8lAHSqXSSKRtAaESSElM9+vDXur//TPFj8tk4DKlGOyJ3C/oVWUJ0
3Z/s3r27eKHWn3Y/0lckM/j2ff30TV/jNz0WstgOH9RIs7fwGDKafkJu8gj4
lvbg8tP9qQ9qdCP06P7X6tWr6VYXkjt9uMCPzp8wYQJhSun2H/b0DcsB5gZ3
FMwfH96/ePjhh+l/f/zHP/4xwfJeOPXUUymR8GHPXyMY4M8Fp5ryHCQE3EZs
FtuRoAPlNBXORptAcpTne6hr26zqOkrkPPz2wYMHC5nTJDgynUTC5RHGrpW+
qjiwI//cS9xbp0yZ8ukf/ehHNBgCKpQYxu6v9J29EfUBD8jnEClovP6KK66g
/3KqR99psObEffoDHkib7nLv2LFjCd1BlxEuibyUwZ/chAwF4+h+Y41h4EOY
lGE9GDr6FA+jLUO1HHRKqEbEqYif4KyEq+PP05xCeHNikADwhEonDB2h2F1e
/w+Lyyk0SbkC978+D757P7/7WTmcxqe6p4qG89927tzZ96fFdzRtFCcb+cYb
b/Btg+/+8H38Lnw8ySNaHeddeLODTC4O2fV9rviO5tt5DMIEIhPkDEp90P86
rubvPqr7/Uzx2nOL7fPfu7bJE2eeeSbJNPrmgq5DdOCcc875veJKenuqP/rd
AwcO9PX/l0cffbSvQZ8pgeOCl8fV/N3nPqL7+bf9YvHzPjrmfMD/vlBahDon
u5JQLnRS3IL716d9ooUExajKe/y/NX/3ux/R/Y61X9/93y0f3b8XCr/5mdde
f+tPdj76Av3R55/FX7fw17+Nv/5H/PWn8defwV//Hf76V/HXv4G/PqaYgD+i
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
I4ZGiLZcCWWAsOPVRonKGVhyu6EbUIUK7h6yn4nkjMODewldlRq20NNyXdZ7
soaRapRmn3x45Xqn4KBGzrmjtQLH4qgJk8bOZtxdS0tYYcIaqSyxAyyLEtW5
JPpt5k9SKRnmj72VURvNCTcv2gHCkEioWrWGIoagPXQLAJOpOvt0PAhXsxt4
k8kch7wjqCuVYcgsZ7tXECQzeTRzx83ZTLeumhg3pWwUpTqkLjOJ2oY0+HIZ
J6QwMiOPapi8ZZfoN5Y2bf3Ejbt58c58/zG7biJZICPz+UEaMNFupJJTgzpf
QHeLUL3DQjkU7kFDviusUOxuFmey6xrCJhmvscM6qNUKMvNYEEh4prJ8moyH
dAI7jk5px9XwB2s1XZKmZi0TrL6KTkj+mi3GRfOSwITUOcCwi2mHmwrxrepK
fiNLh46GhISoVHgbn0NDR6Lqjmxeywej9TuCvCYLqoxxq0V2cfIrRZLshJXO
iBrOhyaoSWk0Q3aIVDaddtXuAEX7/FblpZGARkrFyow0sNlrhQDoeSelMDai
kTh5y/O6yoU85tASbGbK/iuJK+y1IRRLKJ9zPT1n8xMA4kT/pe55frQAT16b
oBtoBAOvAmV6BlOjxYMLDZTeZIlD1qrHZ4GLMNBPvfbaa6PnzJmz7eKLL156
3XXX3Td27NjbJ0+e/MuHDh3yG/6L27Zte/b0008/aeXKleUheOWVV2ZPmTJl
4+WXX97Xv+Kaa67pa/zOwYMHyyEWVkyHbr2ke9t3TjzxxMNdJfPY2WefTbf/
s127dtW+14jQrCFlZQVTDE+LlItSHPSToM9Kza7v4CxJ3FkvlJBop+g+sFr/
QmJXJmus9IPPtWpiMsmICFzFSNvT2ySojAMlJEu0V4Ql2qCYpegZD5KjGsjB
XNz3XnXLhu8sWvNo+J5KMgKecLBTTL03Mp4F+iz76IyfsXgnD52/K8Mf1T06
EsrSvWYXSLrjdpRUp6zkbiUGAkO7knQdXfPNbyV4ENr/X1fDSIotokCjfze0
iRdLyXAtco4D41cdBq499QkbvdvALUwcJzq6wg5sS9RHeXbiraDVGQxirCvJ
gFq+QC5khjDsIiOThZyYKvXQXwnwqAIKpYrk/hWQoelT7t7Gl1ExMx9c3bwg
UNX1qLQMYxVqI6DA9AHgy/qMl46nSGVnRnh1Njjw9ttv7z3vvPPePumkk/7j
k08+Sd/3v/fee9OmT5/+469//eu/t38/0w83rrzjjjtIH82bOHEiUw2NePPN
N/efe+652y+66KL2O++887HutVNmzJjxRvfaX3/qqaeOLS69e8KECXTp79Pt
mvUuHRmeMdJgFu2+Ue2Okk0Wa6dIp5CkpDWfO27u5pk33rn1K6u2PlVW+tfu
Eaj0HRpLQI1yRQHtFtV8jo5Z+qACDBS5ZAanIMUgUgw0MBTnoVhyR1H8Yv61
cQ8x8apmMSCZsvxKzJ1hRLelPwHDQ4DphWpOUyVe0ngfWVvqWPZHBtURBh6z
bW4FLH2dAB2viyN1ZIMvGj1ro5bf8jrC+uUoeJhbdf1FVd6Y7HptcWuP1Ass
yyX2I5CksNoA1HBpVOif0fQdRByrRHJPgTD9XaElyxPY1uhJuqbq/duUJYjV
LLRgJXotdvSgnl5iomvoQ7uuADTyA5pQLCOHpnQVgXzs5vMnr/6C74LRC+od
ObIodFCjxTLdXoSmOw4vCiq8zIwUq8HGL7744oukn6677bbbuJTi2K6XRy4Y
eXmkm9jz+9Z99933Sy+84BszNsjDo0v/+qGHHmJN+fMvv/zyeyeccMJtXa/N
WzrOY1Pv3fiZV1+tSlg9Q+D0adOm0f1+k7Rxs+YzgK6kzwZy2ICAch2VYtES
+MOmjgZm4nwpzvE2St4Lq10678JqR7atkhItFMPwDdoC+7lEaeV9jIiRjrKd
vKcAzadVjDfKC5Q0/17G3kOUbcP02QLgsRr9x5VbnpROgJwAfxjqFh3VjeII
3dhTeDfrbfQg2pskq+KO5UFlGSszilyJIFYd6SWj8GQjsUISmF0p0tk9Qu8J
oxSMXpGqX+2IVDuzsCWnh3MJDSHDuwlkAToVIyxPE4XQTl287jF/e/qoZnYY
KU3kWVJOQ8NEqmKzfge2L55C4GhGtvA8QQ1VqylqQ+bv2T6QnWmkyob53ip/
4zVMlIaHdbWQY4fA4X5c9FFbqyiCHFQgDbPmo/9+ft++fZ94/fXX+ZzuvuCC
C0jdkIph9UUhRvqONCCrL3IcXz/55JOH3nqLU1KN33r88cd/eMopp/zz8uXL
+Xd/t379enIm/3jPnj1MEo/UXPYZhYjqMBiV1FzJY5O3zU3y3agiF7DbkAiZ
ctOC7awJaVHkRkIN3aVfAOM2CYxLtY+D8snevM+ORG1EJaGAho4mQraKlnSZ
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
ADoyEKg3VXVvxTBuoGiCsEL59HQxij6A9g9xPCXBPeyTrVCvkcS58X5Ou81U
xg+avuUDqS54jH5l1RjeNxaYbVEpaOWXL17/rF+XW+R0uIHChmIhpTQ1Lh0W
d1iWVcacqSBfyPrIwZwSKgNC+kawwy5aIU607HuuWLJjyN7MJs5akJSEru4X
f/azn/3jeeedt3X27NlD7avXrVs39Jn5q1evfvub3/zmL/3kJw6Zve7ee+8l
f7V24cKF9P+HP/zww6OXXnrph1OmTPlPr776Kr026ZNPPlm+YsWKf/rqV7/6
X44fPz70ucpPrVuwYAG99wv0mqdej7///vvHL7nkkoPTp0/vfvTRRz/Xf++S
lStXvtd/72+dPHnyzDIXB9y46YfQENANzbAZeJ6tfSvW3LHrUU0lvL4OhIuS
gvSD6TEH09BAddSoZbK1AYYMMnGHUwdR/BldzrRNEy9Kf8dvE1kPiBVPVzrT
CcD4xb6r/w3GXMyWzGklBCNNWEXWS/oXTsRF+RYNQmpJkM/mNVv3z0u3bMmG
gyhPPyO9U9Kdqiq7chMo/Pu+/eDEiwg519q3BZFfxDABfVddarugcgz1Asxe
9dBhBncNjf+EMzPKSsLgwwCxbW6OcVpw3adAVsNN0V798POkC0KRkHMkdfNG
100yUXvQoK+A2DFTKAmadRiwbCRUO/Sr1Q1TUOUFOxRleDIXRY1S4NNDZ9fV
EDjf/ue8c3KP5cLNmze/0HcWvb6j8DIX/+OZZ57hnIjyrm8+8sgjv/bWWy4/
/dW3336b/M3cO++80yf9n+v/CaVclJqRq2FT0M+01Olr/bL3eNXerV5bsXz5
cvrE3yZP53cKJX702l89/fTTrB/+Kz/+8Y8/Oeecc+7sZ3RDyoWJmSlWvRNR
J3GSE8wsDm1K1k/c2qi1cEEZwS8wgdE4kw870rryHc0sRck/e1GR9vCnBLga
gEdTtpMjfhvW6qDWpCHTA/tUR49KM5iSin2uLbC4Wc4wb1jzUG1QSMunzhI8
mUhPFPcklMhn+PK2tqehL+3CyfN1784woyUWlihWMGIPV7ceSbzHwzJEHF95
s7EgRAPJH4Acem4AmexCAqUGUPqA5RErM5FOjT5n3u0P1jpDstM6RY8GmzZw
kFJMiZ7vUEW2GaHfVZ3rhxE5PSOPaSiKmyMqZTmI53IJx9iSQ48t0hvogE3G
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
U5AEnt1IaiXrzEp+A18m3ybhhhOU8ECTdkkRKBcXM4SIn2qBRD/VgHC0g9BY
ouCvJS7p2K0q+WJ2ghfMEQ+yxiQ8P+qhwiY9OXzKVgvSn0K/kbR84bZpfbXI
JIN4smAcbUovQuUPoEAp/R9ExxuYEKDkj78S8D8YHoGVV5PcoCqmJeY00DBy
zyBHpih/HgCsSKGKGkumr3hW2j+5oAu6XkgRUbzGTp9Ek9ditLVNg8abf0HH
Bka9N3w3+qMKyqKy2vS+danpAg/s8h9aaFm0IuLShL2VrWWY31raecCma1vt
S3S0+THXXhMaH6LQ1yhADkb1WtZXAzquzR+cPn1aWjHk7rx78803k54YfPHi
RScgKPBGp0h18RAeGzNmzHs33nhjzwcf8Hqr0+X+s+O4/euWLVv4e//4zDPP
vN/xnv6cnLYuWz0l7zHQVk9gtnEkZsPEhbvZewgxzpL4rUSG+cBvUHWVaaOy
+RfssUMLSTfQCBNGTSg3cvO4odmzAfcOI0sloBklvISMCGIyQgS0kS6qquqM
rKsQEwN1JIn9PxTJKabJ3Npd/taO4RX/pW//y9RTQqgeZPbJdhOoGpBuv8rf
ni1KVqEy22jDn1TT1/1jZm3jfXwlMgXpXilnOEYkzw0VFU2sTGG7SIc849IH
/RqpXKdi5ObLFJifOTnfmHx1zlZmfwPF7UEwXb7SlAXrDw9b//RLZm2Sa7is
l7wrqNFxglR4T8sIH4eK816uHBEpdWvdg7tJ00EQyVJ+iggGJi/aeJjXpQ5R
qDUOe5rlRaNTY0WjgY5v4aEd0B8L1Lla7lL1Tz755IOhQ4d+PGTIkN5Lly45
vDKd/qTj0rx66623sm5ZNmvWLBXp66af9Dmdk+mrzlnSVXS55++6664s8Ij0
Vb3ifZy+Ytud9JW03ROmO8mQbT+a+zTPg+5pKs05PQ9m6kDEne2OwUEbVF4C
wgTmK5Yzhev7HdJKl9PF/EF5LoyAQ0XSo+Gd9II6GQsa6slbMT9vzHwGpobq
FQqifLA7lL+De7B8EY8Xhe14FsCmXaci9W9knP7d7qOvUmyE4RWypKh4U8P2
bvlrWio4MkmcrKFIHMqFx2WNmQQT3OLIWEnjGiqhPGSALzu+jOEwXlVb5+Xc
7emdN00oKWZmduSshasSVTco1M7z8jN/XjRlK0zlyVsRRMztWS4r9vcsoqfE
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\
\>"]],

Cell[TextData[{
 "Modern algorithms perform much better that this: here is what ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s built-in random number generator produces."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rn", ":=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      SuperscriptBox["2", "25"]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tt", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rn", ",", "rn", ",", "rn", ",", "rn"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", 
  RowBox[{"Union", "[", "tt", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", "tt", "]"}], ",", "2"}], "]"}], "]"}], 
  "]"}]}], "BoxedProgram",
 CellChangeTimes->{{3.6348857522104177`*^9, 3.6348857569039183`*^9}, {
  3.634885900033492*^9, 3.634885912251588*^9}}],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{
  3.444974959209*^9, 3.444975723097*^9, 3.444976903158*^9, 3.4772904542746*^9,
    3.63482074512964*^9, 3.634885722439694*^9, 3.6348857597357683`*^9, {
   3.634885904273281*^9, 3.63488591307251*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.005555555555555556], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw0nXVcU//3x68J9jCwdWL3sNtrizk7MIadOFvMa4M5xc7ZhToRDIzPtVuH
he1EscWJjai/r+e5H//sMbbd+44Tr/M6531ukT4j2vdPrSiKoaSi/Hv9358j
qPOkBv971cu9m/jv1Zlt7uR/r4ZvG0f+e1XCz/T896qNiGkl79e1rifvI6/2
+PdqXGzv/+/V5ro/Xt5/GBUin//t3lyu+3pS53+vlo6V+snn+RvLq2XmxWly
vWqT5T62Usfl9+rSpsPkd0//WuX/q8fIuMzNEqbK/xMnyPf08ekHyXWu2QbI
/YYe4Xo3Awb+ezWlyyTXdWdzj/r3au9fZJx8r3AaGbd9mZ/cx/Lu1Bj5f79u
jeT+kx1yfS2udm+53ve4XjKObq0m/Ht1hR3qK+M59kzuZ20WMkX+v3iEzNtY
5auMRz/9s4/8vvBrma+ah3kofx/L+hlPxMp4HIUvyPgsWwOGynUWrJTr61Oa
yvVdLi/53PZtEvN/XlTu495klPk5HhSTz/UCXdinVTVk3NriTHIdS2K0vGod
25vl/Z/fMg/H9t1yHbXONRmXoURpmYfa96fsv7rWLvdTIxfLfJTrT+Vze5XK
zO/ugO7y/0EB9WV8eTvKfJS9s1T5XaYaHeV7tZ7IdbTdsQ3l93Mqsb9rCsv1
bF/Kyjw1e+q28vtnT5C7PJ0D5TXNfj7fX2mwvK+cQ+TC8qW23E/vP7uTzKfO
CLmeJfMw+Z660Ge4rPOfaN4nJ8n6mLPvl+vb94fLelsrt0b+XOlEDlzVk7nf
61tj5Xvr28n/lfuOIfJ5VISsn9L7htxXq/9ErqvMOFpX9iX6O/LjW1vmo5VN
I9fTAzLI+JRVV+S9fVB5kV+l39H8Ms6g/TIf12l/GY8rb5dg+d7McbJ/yukf
VWR+vZNGyPfbNpBXrdc5Pk+0tJP/l81hkfeWaLm+ccxd9mVCDfmeaf9QWT/j
jhmiJ1q8U+TbcuWTjMvYc3If5GO7jNd5ZIDMXw+ZxvXyt+Z7iYvlusYjDUfL
dR6u6SavbTq2l/vlul5TXjeFyqs2ZLXonWV7Nq579IrYHbtPHZnH/7QUPQwP
lfmrVZbKvll/lkRva+eQ/1vy15f3hiPTRE61+wno3cQBsu7uymewA/vGi70y
ZcyM3tW8JPKoZIkRe6UnP0KfA4uI/igZc1aU//t1FrnRj7zpIverPAI71HeC
vKpp7surVjUV8ppms8iR/VAn5OyrRdbfNqyDyI8pfRzyvLtfE/m83VBZB6X4
KsaZ7Fde5rN3E+Psd6KSzOesr1xXb5+C/u3fKb/XEn83lvfj88t1bO9vyDpY
ftRif9rclveKYbCsi7Lng6yza+se0UNLxETZL+P99Mhp08/yuTnrLZmX6VgX
7EnuN7JP+uwSYr+t5RbIdd07/7AfLTagzwuqyTzMr/fjRxaa+XzDaVlf+9MZ
sg7a1vzyfzWbSfTFvjhMxmvI2Q19LPKC+afB37jH4R/UpWvk/3q+jLIf2sv1
Ise2xCbMb5oicq+29Zb5KXY/L3ntuauZvB4sIfe1LNvH/F5WlnkrIYPbyLiX
7pLfWdskyfiVhT1k/d0+CezbtZryO8W1VvTRVKQY+9Z9EvL94yPXzzYPP5TS
DD2o/Ubm7SqwLRg9UGW9XINzcP/wPXIfy5YO2JvwP8zzUX3syaq5ch01rcfv
tdoQJN/vGyn6ou54LnLsLLdF1sFxYzv32zFA9s/ZaCnr2XWKn+x30Xuj0cs4
7p+cU/bHcDOrXN9esJ7on3nvDOzF7cXYy0KTsVuvD2WU7zc/K/czBwfL9+yf
x4ucGtulYJc/VBD51059l/fmBj9kHfW2YSI/zqf95feuZbFif5znW6DHd2xi
X+3ZkmS9jBU+yntt2wm5v7FgK7mPUmah2EHX/hbyPbVlNdFXd8+B7N9k79ry
/W7oqzUiRtZB2+Uvv7cNSoed/Rwkdk7PsGoS+txG5MjWoYSsix7p10GuN6oj
+ldhXC15/XlE5Mq0qJbMw7JoscijwRkP/ll1Ua5vTbjAOrXOgZ1cZhYcoDce
zP6au8r+a4V2ix64knbIPhiznAIfDX4pvzf1CZf9dOiNZH+tXavKPtkLrOY+
b6fJfR1/RyPfA+ojL2WbiVw54vuwv09ny3pZUt+T6zpb1WZfKqSWdTB8PyT3
MR4dIN/T7u4H/8wojD2ptQB9ODFM1ksd3FT8n3Lc6Yde/MLP5Vsr+6H1PS32
yhFzn/1uc17mqf8Kluva3rM/trTtsBsvKwsuUK5UEz0xFKwMDt1YT/bf3DyX
7KMldyFZb/Xea3mvlqsk++RSPiLfmVfJ547nvnJd0+Uo9mXwCvZ1/w3xA/ZM
b2Seuk8qsW+uoR/wK2lXIkeF4kWOFOeG7+q/cW5LlN9bLtzk83Wt8bNn6glO
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
5Hd6lr1iD7WFrcCTx3LK/Gz3t7Ju1hL55PNxzUVvTK6j2KnmJYhXXO1ELl3b
coGjzkYxvruvsCeh4+Az3pdBrtP2xo6nXiz3M+R458GfzzLLdQx9ZR8s45vK
57aqe7FbTTTyCIYk9C9tf7H7xryZGPfVRvhdxxr86oR9qeV9zWpiX5ybw5G3
a72xE3Z4SeOOoSKv1sE/uM7vgvi5+uRt1Pap5Pfm49/BQ42+g2+GDRde0lAI
PlLp90vwlWPTE/iBKQ3JO3fcVVJ+X/ud6Il7FXqnBWwnTnrXG94mrCrzXDxd
5Nx+fQo4LuKIXNeSEka+ebEJe1hqHfHwhx0SL5sPDUQu1y/DbrRuQXyZnfha
1/lcTRwi8zXtroK/epIAH13/ObxMnaAKcr0ph5GT7dWIt8btw4+U3S/zMyz/
y3q9WEDc8OY88lr6h4xHWbFG9NB+pAt8zLGL2PP9b8AxZxeAR54uEz23W9rI
uJXey8jb9G+FHfIvKfposY8XP+e4Tn5f6e2xfyXA/+5EK/7Jjj1UX0wU+XZP
o35BCXsNL7r1GP6q7gvZH0uJdvjhbxuJ//2vyP9N+dOCv0vNF7tv/nOG9Tkw
FPk63Af5H/wJOek6B94mfBf7Xv+E8Fauz3vk+s4zeeX37oCR8FghV9CXRp3Z
t1eecfS9y/vRR+FRpy/si36Z4IXNyeC8t6GCRy1JB2X99J7wvZZqd1jHMSvE
Pujbm5C/944XfXBPagOvFUYeSz9aTtbFcH0/ejh3BfLXdCx68fUr/MykT/B7
3oVlvRVLYaP8f8YEsY/2J7PR2+pTRS71KquJn25dJy6cFcy6h3bA7hWfB85Z
WVzwjHYOPKtNqCq/M/nfxD43fivra7eFsT9/DmKvMnvyh5VniRw4C/Yi77X5
Ef5yexh5wapNRX+MVffA846CHzZ1zivzNZUtiT3a70W+o3xL9GZSGuynLU1h
eZ+fvJbubCjztPk0gvfcMVBwvT1fFDz770/wPgOfwbe0LgtOahrEuD6GkXce
tUH0Q03JTT59+Gzms3285KFNOUuSTzqbgp6r34g7CqZDbveYRR7ca66xrleP
cN0/5KPt38j/Kr4zhzO/2exfvkHwJs0jyFOXiiTv0Hct+a82mYmv22wl/zU3
APs9Yhu8053zst7acofIj+bbGXm3mPLK765ORK5PNRU9Nvvnx2/+Jb9p7Jmf
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
Zw/kuq4x15CDxGPCp1rDnnJOZAb5eDWNDp/WzUB9ePZe1F98zkRe4mF55LDj
ZfKvT1Nz7ufYcPL0fYtKfGTL1RU7PjkUOQkqCx+3k1djldse/rQzvOniFO6/
F7zhLPmduuBirJd26gZ81qgQ6rHMDajr/RIKrhkaw3moaSo82qf0/D42nnVe
uozr7KuM/qXKBO/X4yt4MKwjfMLeauzXjX3w9fWqs+7VObdpPTsKuXsaTl1o
EPXtSp9E4qLGg/AjB+aAq3OkJh589lb0yKEeIN4ZWZ78Rpo9rGO5IcRpH8PA
/9FVODex1lPP1fwheegPO0S+3UvW4Dc3r6fuY+RD7MDtZ+SJ001Ary2xZdHb
coIP7HpO7nc6LfFc4QXwFitOIPdxzcCLlZsRV5ecgjwe9ibOL4w/N5QL4n5F
DlH/NY48rp70FFzx8C3nBkv0Bg9XDSC+HJ4PXuhFT86hpMwjz9w+UOyU5fxv
7NeI9+DHz5nx/3dPin0zOR5h7wf1kvHZ74wDT0V0BDfOzS3rbcrQAH7p9jux
A6acW+EBxlvhrfyXg2fUSvDoFWOIS/P8lDoCW+ZT7FMh8I7z62Diqd0rApGL
2tQzdgziurl247c+zBB8q6zkPKP1WRjrEN8d3nJIM/bFOQd5+QWucu2dRtzm
+sX+lGkAz9NlEXFIt6XgiBql0sj/LbHi55W9h+GF3GP+qv/meYL6ZFfaIui5
F/ys2pW6W0O+wfidiRk5t9oXvl2Z5anTnrtG1tlVyJ86lOtJ1LmVXkl9crnb
+NOrS8m73+kg+2jc9Yk49E0ZkU97YhsZtyVnZs4zrTkh83LloI5Dff8dXijV
J+ZXrrvEB+ZG8K9KtgEyPm1+W5EL55pbHnmnblf/cZu6nJy3sYeDT4Erd/4U
P+sKLoCfuZ5T4kUtW1biiFXnfUUeFlM3oAx3EBcP+c5+jDzEvAae4ZxrneYy
bvvLliJHzrG5wUcFOlHvsWI583r2gjpdS1/wTMtA8ETpGOx0ZFAxuc9RzlFq
Y/fhT1v8xu8t+ChyZTu6F386fAPj+/iEOrWqA0SvjRWyy/WcvkP5XGsi87WH
cO7TlLYpPNN66p6NvYczn219iHcnXYPfS/CHlxp1lvnUuC7n+/RjodTtheWF
B2pcDP937gG463YE61pnHrzmn7LUy1WqQrzeZzvjWuWPHDeux7mOg16sb73m
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
l/7I6n0LfroDz2vXKk5j/cpwflAZUE34fKd1PvGIrS5xWeJwqSNRV6wQ/6TX
cnK+pyf1b+5GbuTs5WPizU3wolrh9vBGIzgnb/uRjrr8MfRnV6bwfHttWCw8
XJpXnKvKehKeo95P8ndLHlP/+LY+6zddx04uDObcQ8d0zGdoMXiXGPqSaqMz
U7/4cQp1x4/oM+HK2Bfe5GRG6h3yTEPepibx3KhXM5CfDwep4w7mufHaxBXU
HfdKL+Myn/M8T7ByW/iIs5XAc90y0z/i8zbmvZ/zH5aHBvRkO88v04c/pb/y
9RLwAmM88UjnCVy3zDH6e7nL8Dy01TPEjjljOW+h/NeTdSy6nfFWfEKcoezC
35xp78k3/caf/ekpdslUYSD5s7Ad4NB79AsxXv6NvfyyApxQlefXKqkaC8+v
b74C35HyC97eAh/nKrQSnLi3IXnET1nAXZX7w8eXT2K+496A5/vthVc4Pgv/
XmIH+PVEqKeP2nn0auEc8s7Hyas7HqN/lsO3ON/2PgD/oEzdr4p8DqXueu44
z/n8rtiFVEfR61fP8ZevCjGv7q8lbrPNIq+rpoRSL3bWJLjF7sVzabS5b2Qf
DFuawgNmnIJ/O9qaep/s9CPUdoWCE7dUpT/Bol3Ui7h5rpXJtxL+NT11Z6rt
Jdf3OgnOa1mbfaxVhrxnic/4OfN8qVuxnSDvr1W1UhcSmpm6jp4J5J3C+lFH
UtdFXuQmvLx+6B75v8jyyNWXQuCpdAXh/599IM8YsB073H2H4AvTPubrWjWK
9bw+Bz43nD4byh/6yykXEsBR3d3gvS+F6N+9KAr7cWew8N3ueZy/1mrVFP5S
XTpbPje04DnM5vv5+X79ReCuKnewn4t7Ix9zRoMDMnJuS2kzBF4z/D19FGzU
oVjuRrNuVU7KOjmzn/b0ubmDfNdYBr7uf1v4eYtbw19++4ocj99GfWvICsHJ
pqL00dEHU2ev/7xFvVvMO/pbz3MynhlZpa7GOpY6aN1WFJ73VZTnOWYFqReu
Nx/9GTAQOarkiUff0K/d0jgFnBJaHXv3dQY4/MxM6sYzHuXczonTzDPrN3io
zd7Ip8tPxm3tG8i8//qLnCvBa5DvdV7UN/8NFvl1Z9mBP739WNbLXcGKv7hw
kvt66syUsPmcu93Cc7W1yMqsf4pGH9FNmbi/A57YXNQXPnNoa+qD/3vAOQtn
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
/f2WIW85L2eq4O+798AOFe+NfsU+D/Kiw2bsWMZqePLlkuBFnphP3BCTnbp+
nfHiPLsG7CSfeDcBu9CS+Fiq35l13j2H+9b6APdk2UX64puik65lu0/9oj9z
J5UCzPsxzInAf6Tp8wSuohctVUJ/QZJyi3xFKXYIXFNjjpJkNAo9JsPnipzj
AL1P/rAdvCj/QPoIi3zCLvimUectcUZ8rml6IfDqiStEvVA+GEPctWgkeMWX
rtjDwyfAsX7lRxfI0QOe1b4V+NsB9OdIjSfTJ9cAXN/ylbzdcnA/+WOLK+DV
g47Ag6mCXqNaojT3VEZHVN2CfpOllhdxxhJwQVtP7KA9G7iEfT9xjpRtkfDX
0oZo7HmhqdiXhJWcwwmjwA0+Wqhz/qpNv1ehb6J+on49w/n48pC4/mwN9CdX
018nhTHPRKriRdyQSH+59LoCvCHXUbFv9hFn9X2IR9/WvSvvtZl55VqWBM5z
bCT1hfhp2PHcdZiT4NhLvaLaLuKCNY9FnmuXyxJXHaMvQNqKLotWH76GNEKv
E/2OETiCWuEk+7GuIXWzn0fgzVXS45QJR+HLrKeeaqsdgJ/cnsK8pPHvwCsu
0Y9qyf6a+uKV8yKet4RNw99E6/P8xoPDa3If8ugH6JxK+ZlnqrkmM0+6+SHq
VAeLk58lD8fe9v4qzp3t3W7mobz4A77ROIV7eOMf8phc1EedHvyc6t4XvGrj
YnCygNuCHySdGgF+N/swvOEFBYizi1WlPpLvjh7XH4HfuWUXddmJRuLVzcux
T+ePw/P5quvAtaW/QBpyCX27v/fR1cnuwP7PQxdTC6MvX+q2h7668fe474c6
iPPmvF6SuNt/Iud3XRf0NRudoJ73krl5tn4vxPo5qsD3tC3+outMk7+a7hqp
35gKkRf/fUAd6/hn8K5FR0Q9US18nnt0sSR57clA+mzlq/Spfi8C/vk9mDh7
uwXc+0wh3uc8uncW2c7+lhsg7pvxRC7qKvOZI+usHYNunk8ncd7VLujPaoGf
6SM6lMg6Xz+LXXgXzLnpWILPlS6CY4S3ph/c7z084oW+rKcB/qq58iDswyNd
h08xon+x8ya8hvl12a9bbugrbevC+heazX4Ve0RdtCN6Dc619F+a1U7wt/uP
Io5PoO4mP8kqzqc5/ytwrCZb8T/1g+jbCod/omz+y3k1HBJ6+M5x6L3IB+HF
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
fotdWrNX718ZWk78nJE5CMZTxHty8Rusi9sf7MUpeLiKehtc7/p7+GZ9ctCH
kbWWsLPG0iexcx0DsSPNc+PXnpnJg3eHEZ9cjsV/Z18k7o02Hv1fZz3mKEta
kNA9sowegn37J4W4Zzdxlfx9FecoAP0JudBC8t+yj6hzHf8G/uZTROBSljnk
UWr/IWJ9nSdaED+fR5/R/E2f713vEPHqiHjytEUl0cOK+gSP4W0fcf+1Uznp
A2zwWvzd0GwH9sj7Cu917jj7kj1ZxLnGF8PY/7JtwT8KbGFdq9H/KJXzEPtp
P5rKfbsuo39VoAf6zvOfE1+lLAdnCUyAH5K0XNfRa0l9qk4h7vGGduL82BdR
x5RuBYt82fSBviFHG53vV7e64Eu5HqLbqQytyDls7C++3zoTPWD7Yr2uEATf
VXO6uM9Xt1D3f0nd2jK1G/XvLTfwx6HHmaPdKJw60IjC2P9Nf8TzWT/YOVdu
6F44bqOXJb0w0G+aZT76R8vysq4Z+0UcodVifpd9RHdwMuXkKfm/P+3R8L4e
gNMr9eehV5e4kry8zXf2MRneoMsTPUHFgT6k+nEBdundFOpdadvhA0jJug5+
L97X2ZP8pOYSzmu5vGKfFNsA6pxzL4rz4aqaBi/2chx2du8a4sk+HdmHtDd6
XD4Kv1O6JPWLUW/g142JYM5BpTzgjfbP2Ptv6Pg6fUPIP1olwCt8jw6N8rg+
ecdh5glakpdTTxwbLtbd/LoDOoPr6cfQQtC/Ud6G6HqOxdivjYnYxR/oWSiD
DqJzs74BdnbFGe5lzvGcp2tZhV83VdTreJ/2CT+g1XkDnluG+ZeKrY+I0+0L
9bqkx2+db+sh/jQFDGG9oqgvqgkPWLd/kojbvwzinuQYR3/D8K2cj5R0E/ea
urXTCc/FskmjjqWWgUfv24jvjZsDv2ZkTXGunD3hA1oLnCLO7KnPK8kojn0L
W0J90HmQOWy3we2t50aTP5Y+T/ydNIt6pze6ptLypdSDxgSJ97M/68TzDerD
fXnqws4PB982TizH/mV9TNzx9y/ruJP6vlwRf2dfxdxHZ9b6nIOiOv88aZPI
Cw0tu+JngtEfsdVwox9jfRf6Z8LQx7XcvSF+T6mHTqc8OYx9npupnxcP7uU1
zonxzzf8/BjmjWkvmd8olyTuNdV6BY/9TzDx9b13+ONsy8Al9/WhL6HBQPZv
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
vOTj9r/0rTpW9yF/i2COgvoJ/WypDPrZugn8ni0hJ/ngsfP465nE16YJ1Ies
PeFZS76NwbXeryBfCeqOnekSrOmLNCDfNYfDfxg9U/gJ+VSG2BfzuU7EU2X9
wVstzJtwnPHg/sagD+AMBkeV5iyH73f4LHwObc6M0yuJ5y00gvrRVC0v6a3F
jTd8yCvjrsAzW8k+SHvCscf5NmGvQ7h/UkX8mtWlMvlXN861yX0mvNp3fYmD
p+7Efgz35hwaS/KeI1TuyYJs6v57Bmu860nM33i7i/wiqgt8pyKvwY36MWdN
TsgBTuELbiDvmCXeyzh1IPHclReh7Pdznr/RI5HPOS6V0Xj4kfAVO8CDd4Yu
JG44cx07PYY5QtZXVXiO/S/RJ2s/hbh1QTBx4JPl1D3i+oGD5T9L/9oo6qLm
BuT7kty2EeeeeqdlDXOTTUc+kn+cfYheZ8U83AvPs4LfJn2IQDcwozn397aZ
fva9t0Q+o1cL4t+brCev82YOlSH5KXbXd43II+RX1eHdrQvhPQqlwMsMoC/H
0EWrt4cWx+9tXQjPIA1dGsklSMS5yrJEUVeS190gT5RPkv81b0Zcsw4dL0v1
K5r+N3Ns5A/oP+oLdUb/d+sc3qfqBPJA/70aXv8Gfu7cOPRkvvdiztXtX9j9
YUOpIyuF+X0ln4u4j6u3ci/OgTdZbcOpi6/4Tl5pok/WvGEA92kG8+OtaQtY
/w7u6MQs78v3Rs0HZ7BOp3/hainmlS7U9NnPz6f/9Iemn9OnDfeodpp4T517
MvbodQn8+djt8MyDPLAvPlOoY/d0kh+6VgPPaqXpCX7aTFw5Zjt+uMs0gQfr
D8GLtjxFF1aKPQG+/lqbf1wpk/jvfU70KC4n4h/Unqx79EYRT9g2o7cgdfok
9FIMRyN4ziEj6CMdiy6jvnw++Mv5yxGvTOjBvV6SKuJy6ds//MikaBEH2t7A
U5Ia3SaOmkz/rrLiOfzijEjs5HrmFSg5BxIv1DlEXez8HOLT5Gx4Q/JE/ODT
B+C3UYWJh/fsYn18PNifBe/pt57Xis9tuxNenh+6cHI6c1dNvcD11SnouEjX
vJjXd6YJuk2R9Nna7wbgP3NXFOfcVp++ZGXwYnRI+zRGZ8LFmzpBNrwx++UB
9PVsQlfBdu4D9RC/h+jwvrjGeWw5h/4Ysyd+dlIW9qDtH54vkHXRTQZXMW+v
wT3MVoiLdrwScwR0l+fSzzvMDh6yrD985hpfRd+GWpD+eTVDjz2oXVrkCepR
6pnS4mHooe0ziHhGub1I1EGc9auQf7pdJT50kudLlb/QD7OwFfzuTgbwr3nt
0W3eWVzcZ9145israUfhdQePQZdwAHNJLP+0eYtm+GGWIvh1U47D5OVm7LFZ
D/9WSS5H3BVbWNwT4yDwesOHuvAT7vcl/v5WkrpEt2/0z99YCI/j3nbwk/4R
4DirNsAXdMsiPvAagl/KmQSPbG684CfYfvlyT166cL/eaf2Rx75qdez26Hw1
6M77HgqDh9Q6Azws5zfsw8d/4BqnLlEHnK7H37TLA1/Jslr4OUccc0OVmj2p
x049S959H/uq9GD+oXko9UYp43g9zsNdgfOZsnbjf49fhRc+djl1jJ5e4FYJ
P8B1ja7geUexE2oNHbzeVPqZ9Z4d4H/Eg7caXIzg1eHa3NxGP7Q5XKW/yZKo
66FnsbgzcV+v/MxhrEd9wb4mlHP99RZ8ohR0XmwvmSNp8p0Kv6kS+u7O79SV
5WlT8f+56SsxnQFX1HfTgYfEFwRvvMT3Wr1z8By645zXCdp8zjJrwZvnDiYu
GjwBXGkk+IbDfgF+frkN6Fb9a8H5nPcXf7R/F/zREvnYnwTmuymvnor8xBK6
Ex56p3TOyfs3rM/jTuK86n0zuS/Xz7Ivp7S+96mJ5LVbfoEr9ND8xckRYv/N
pYaB6yw/jR37GI4daJiD+bOlxoBnDcgj7r19wl7i1XzMx9OVQadSrW0DD0xd
RJ34A/UbZa1DxB0mg1a3eHOUPPr3V+71knP0eTZnPpey2lU8l776Lu5Lngjq
DlUngX+t+Mrzv72KLtZLdJh1069qfZjohihVa1OniF9P3NFFT1x6tLSIey2z
Nd3q3dEi7jC6JpB/j5LIk45VBA/p2hR/szED+2ZHt1D/LR38oUwzjVfvZO7E
8JH03buXA9/2Z+6mWjKMPPBKPfZdagCuNgI+mXSReZe2N9NZz0uLsBvbiUvk
g8+Zk3D2PXbpG7xNNXmnODfyiXvgaw8Wcq7dyPelOG/wiYVnqNv9y6PZu67C
X+q/zKI/pPRE9r39ReYzN/bkfP20c9/LJBB/nUTHX35blP2r9Qo/3cVMnuf5
Ej51HHw9tfom5n+OKKjxiskrpB3VyH+C6KM1nKZ/2dYyns//BI/AUTOU9fdD
R0Z+WI28/t5P3k93knrb4nnci04mkd9IiTe5Vz80nkb4NuJxexT52Oka4KKr
x6J34wsvWl7OPVY8BpPnVkKHTirZStwH83b6SaWKPqKuZ736iD6J12uJc8+g
62sb0oWf2wmOZy5Hv6K9zR78c7O+8Aba+1Nn3fOY/CVnbvCdFU85B5d/oTcy
Dn11Y6N7xL+bvrKfz0aTnzUsxbl/iz6m3mrm86qv1uYrmajbnJih8V//iedy
jG9GvPnPgt96ZSM+739E2GtLEXRNlCfzyN/qjKbuUA19D1s2ethG6SR8hPnw
YaWo7gJP0c/dy737NoW8Sj8e3l078DJbMudY9neAOxvhmdjCX7M/1SoRBy8b
TlxXwYu4bGs7dJ/r78MPHpjA862GR6Oq6A6Y+6D/aa3uBB8uuYp4uHUs9rVc
N56rLLozapetxGdxzL1VnaPxV+7X4Vnsoc/DkVPTvWwYQb1n809xTpw++8Hx
57YnHp0IP1Eq9Bq8sIFR+H/ZpTM4aBh636a6LsRdg7+JeEkZ8JG8qn4tsQ/m
U+juOuaewI4PGU+eYvouvt+Zhj63MXwC8clMdJgsqyqA+6Wsxt73Pks/zqA/
4Fs+4/Fje+nzVd+jm6vYmsBfTMxGf6H0LBHv2ZX92N8/0djPmFTwiE3UG6Qh
lQWOIpdpDK57/hL39HQe6s+JecHzD6+kP3JsMrzasyOJs7r8JK8ttJL6wayP
7N/adejV7Qlgv8KeivV2hP8Bp1iXFx7qxQ7cr/jn+KujzAc27yiAXWx0kr7k
rI8ibpQHNBXnxLYwFpzh0F/4EGX7c7+uoVspZSWI/MjQmr4+w1e+R7+V/nnl
qhX+5KDZxPtj1sEHnuoNv8c8l+ceM4R8p2AhzkVZ5h+bOg3AL/Qrgw7TsFLY
x/6Jwl8qrf6xXue/gfNNi6OPNcVJ3rRf4j4/RMdIeTmA3+/VEXt2rQl2bNkZ
4hTLB/zpmWb45xXgMPZ9/Vi/tW3QYdw3kP07EENfgl3TdU2ZK+6P7fEfnnuY
p+CDWz+9gcd3rTH2699c4li/zeAKdY5y/mcv4Hnc0Y202YvQR/JyOLyBbbc5
Xza5BOu0E/xh5yb8fNUX4Hht6mFvbsUIPEO5fpTn3BJAvnB1KHY8zxJx/kw+
6AAZ27YGd/zUV6yDs7c7ceqvGHAL6zz8WeIW9rHgSuxSAriRw309ecSzqeT5
EZOJR/wrUu9f9BgcL4I5hkrH3OAvAZoO2/SSWl8UOtNWP3QRlJbp9J83juDc
mw6RdyY8Z1+qPCd+SkNXXzpO35o9w5N4I8CFfLUKc5/lI0bi85HMFXZWPoxf
uuAi8nrdPuatGIxdwTPje1GndTZiXdKWc35LV6Jf6eNq/PG90eJ9LHbmxksB
Zvj8a/qTD96kH0n+RZ1K6jeKfU8J4rktq93Fe56cpc0xGsjv7xkjntsU0wz8
Ouwc8fD5FPLhxujYWGsxD1hpHkSf0MRp5Ns9Z9A3NmIR8YoX51Wq94j1Xx1M
nuByiPzzEXPKpF5dqIOn0E9g3lOBfGgheZa18A148x7aPGQ/5spZdq+mH/X9
CfKwXaHo9EnwoZSlNYQfcHxFD9te8BA4wfuq6MWfS+J7iv9jHVZMqyT+nnoE
fuUs8iGTC3o6hnFafKhkCtzAmFyJfCQ/uL5kWMscrgZr6T9qf5l7lP0Ce35c
D3+0zB34Y7EfyXsTFxNXOQZQ/+s4Wzvf47S+MfBv1RKJf/h9FD2Gxe/BZ05Q
7zA2P029YuhQ6j19mfsrb9B0B1YdId74HYH98xkn/LWxjAM7vYX+Z8eu7+Ck
/XZhD8bA2zZMfUict5M5WYabJ8CR7lRk/Z48QW+v/l10TvbWQUeh6RZwpb/0
g8sZHcXzm7qP5hw0P0wdbcU07NmoSGEvrOO/4d/uNwav21Wf+CF8GvORi29C
n2V8NHHcXeYvqa3SiI//HKTerH+JvX2B3VNT/cEHbO1Zn8CG1JdmwBN3BF0l
TwxHB0gKO8tzdxkv7rHVF76joXYu7ufLhtjHrQ01XnMr4pleC4lTvH7xvs3L
U4cYCx9AH3ee5+65lPzmUD8Rvyv7VeZCDv5NHD6tBXyCSsfBrZQw7OPzDOqH
H9ALMOzQ5rrOciMeO1ZNxIFSt8/0UQR+AR/oy/w0yauY8KvyqVjqf3d+ogfZ
irlciiONdRq8lvj5AvUuY376DtW8NVgfy3Hw40n5iZPuvOD35zwWv2/xdtfy
lrHgtre3Uq8NWoI9KdwSe/WYPiBpGLi36sLcMOM59L+tHv+ht7GfPktT/nR+
f2U/7G9/9HRNLVOpz5aBd68m/wCPmQZP3rphDHH+Ge6FXmoNH7VOlui/UDIt
6N8F7Mbe12dOg+JJv6mz9CLitlJDuDe9s+k3HbGOeOjbY/LElm3BdwJ/st7L
z2I3/sskDkxDb80ePJS8IAA9JOVtQ/Zj4QPwNe9z+NdPY/l3v53Mj+rXHzxq
M3NjpSArfPoXj+GfvhnCvd/NPF19Mfq6dYs2Yre6anXj/C2Jj0Z9oV5y+C3/
/9lGPL16voirlBuNeY/0YfRBf/2E/w2oTV4Rs5R1HfaB+HBxPHHS+mqcy6fw
mCUJnT5Hj2rg/G0bi/Os9r7Ic9TNRDf+E3N7nG2ZQyxPZF6BY3I4eoHuxNv6
p0k8x6IIrZ9lGzzv7blZ14tRxLdf84KbnPrMOqdPEjiFvkQ6cdL43cwli8be
mKdQ77UGzKH+EEMfnmV5fa1/Kl3je48C94m6xXvuoL5h3wD/x+Gt6YBE7IH3
eymV/ogw9EzkKHRGpIJJ7fh3vaZH3Yp6wZRn9Nevs6DzX8xBfSxPH/ynIUL0
9anlA8kXXhvzie/9CV9Yly8nfJWVZcFzalNH0m9jnp46vgd5QZl84nOVlsHo
vck/8U8lEuHBRTAf0lSFOVaGgNfU33ejS6meHEce8BAegHQvUsQDlvtNuYev
0cOQ9jBfQR7hBs9sPP3ckrWIsD/GGvDhzF00v/J4AnX0JPRaHD8b0T+dzpxU
Q4KF+73/m9Z/NRu77BvNOs5Zgh+pVo04QX9Ww3HhcShH4LtK3QzoLOxOJm66
Vgv7cPQU63fnJHFzOQndwd9x1AWXMI9PKXue9bwNrqoMyk3/UZsEcKiV1FVt
g+LE8xtjDnMuHw/CTow4A15Su4nQvZXLoSenLz6UOmAW+KS8YDX8oHoO9Bze
Dgfn2I+d00cFU28p0IZ9jS+MDm8o/C3dHnAo5xieXypWHB3cRYPBL0oUI259
2ot4Vu3OXMdoq5gfp8TSV+HYqPWp/72CnkHscepQ7uWFndIXOolfe3tP4D/6
z1vJL625Wc/zF4lfH6BHr7ahv9luKUock38O9fUbieBU8bnE/tmP0N9oyWae
vGH/e/DhW2vBI1uU1nRx34DfzZDQc2iCX5HkpsxplrvCd5+CTq5tM3NopfYh
xBnpZTgPLQ5xjpZputRL6FtxdGG+rKMLdk35mQNeaprWX+1dnnhue0nO19IA
3vfxKPbrzhJwlvMO+qSLMs/UWt5GvH3vEXb7Nzxgo9t/5MXzz8K7UFqBl/qv
oC4U4EZ/3yzq+7rQgfz8j5zso9dmcW4M2fRJSUMOoFfuhZ6ryZ7Ke29NJE+o
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
ehXSZ60PI4Lz7ejP3B7ji3u8Z6/5+I301+hHbprG/Zo4inx/KX2C0hrqQKbj
zNGzd4TXp+zV9KhKoFttbOVHHjOqA3rbV6hTStv8yKM3XAF//cN9lx42IQ43
9MN+PknhHJXfhz7hpof4gVFThP23l7QQ5+RMod6/3A/e24sweKVV0GtX3JLE
7+uTNN6GqTg83+i64N1P8dvG/Og2qilm6mzP0X00XfwC79b4B7xgRV14p+mV
8ePnjpGXbS4n8n9zhRr8PXcvEV8av8/iPn3R9KXPo//qzIbHa66GfTZMRJ/S
PqEf/mlzOHlZ3nbY2fRq4H1RzDNWPr0ROKs0szZ5ztOG1PHsu4iv2pEnme+h
V6j7R5+Ctdkj7ESFOcJumsahB6NvfAp//Ge2ltcX/S7/7/+nLqN/ov8P1q99
Z1FntOuHETcMpf6jRozkPLfdx9xLmwf+epyDOC5uLfWRvbHwlpe+IG44WZC8
441OnDvriJf8fNu9wl6o9VTer2M93vuzhL8v2l/su6UEPCHb3UrwEj+eIh8N
6k18/Re9S6npctZzpkT94TvzeiwzmfepnPhMftrKiN8vcEL4c2v3LfBqfSpQ
X89sif7UVnAvW98B4j3NX1to+dZ76jeGssyF8kZnXR1YHVyof5DWr3+E/lT3
NuRROdDjUDvMQQ/GXIb4sE4IekWXb4CHrV7H/tRED86QqPXbhQwSOL11gTf4
SNlR6Bb8JU/VjT1O/BKVi7nod+uQH3Qg7nQcoj9bnvta3G9rZiPqcy+Z3yht
1uZvL7vDHPqto7k361qCl1fLT7/C1uLwyn8t0nQptXnPUbfJ56q1EvG12iST
+MjvFXFGjaLCj+jCyNOUKQ00Hv4j8MgexOHODcz/lDuUxT4kZRA3rTMRT7Se
ig798XPg/ksqEY+PjcV/6W5r/cLwzOXYfOz7TCd9X7/pf7c/ns/n+fbBv608
wvcNekCdzTENO1K6JnXE1/BcTIuYXyb7NBefYymJn1TcnbznSgn+nJsRfkA5
4mznDHSmHdOO4df3zeWc9L4v7Ih9Zl/s5HX0LO3bRmp5ajx1z4fwJ5V7qfQb
h8aAT8Rp969OA/AZuwt5VlAU5zQFe6WsaQiuHk89RQm2M6dpyCni/Tf4GWfO
1tijSptZz77R4r3sRTjHNi/muToTtP7W6fR1Og8voD5eMJ3z9Lqc4FnKLprf
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
7M1cXyWQuTbKtYXEq18OENcdUnW4fjBnXunCvdZ0N+AnUodTL/pYFDs0dCx9
81WGwqffcY73mL4KvSnfSuTx1Tzgf4aDQ2rHqH34Rk/6LZ/tB/f811jkefbu
ody3kTPxex3QybevPguvqtwjzuWbCeDIm+pSl7wNvm498oD6UCmF93v+Bn5R
5Cyhb2joi5614Sj1p/8F7iXE+lRazb159BEe/9RWxA2zmKMjBQ8VOmbGvFc4
zxFnhN11XIO/JXucQKdib3P0Aec3BF+0OoQ9MFzaRNy+aAx+puxJ6u+PYthH
P/os7V1M9KtcOcJ+9G/JuT7EfFnj+EXUPS5744d+FKwgfqasg39T4ijn7G5d
4ccMjZmja6pIXVxx/y7OpTUvfDf5EXwRJS4eHDkgi/ykSh502jo9ph53vyb2
qmsl8uYas8V9Nky0oPOVzNwJ+/JmxCGby/J7YdH83u1h7PvWWfBdFxRTdYxL
g/tnXea546ahy/ia+r09mzkNktJD5BPamGjwirKliOutwzkXj3LTB9ayC/F8
sw3Ulzy+Eu/n5v4o0577831jwKdnTiOvd3dBF/0dc9Hl2vDYzWd02MfI+UKH
RRu8nfxgL33GllD0MOWgvmI9tPuugl/Xb4YOw+VPPM+3eQIH0y5W57W2ihFx
v+4Bea92dRXscoOrqg5QL9GXqKyjbiBN8kdX/ctf4sWD/YmbIu6Q54XOwX4r
o3lPl070Kx3Oi91OZg6Mve5u+C21qNuZf70EF8w1GTzrFLrLukvowmjO7qb+
9bGZiPf0SZXAj9/QH2WIgCdjX8w8MUnfXNQNLO+PgO8WsrA+F3eBgz5jzojU
8Ym4d5LrXsGH1fb8hB+YZMBv5mkLvt10CvnI3VrEPRODuLcrWA9HJ3g2+kFT
iDudK7ThvjoLnFdZGivstOF+F+KU46upk8wAp5XTh7Hulp6iritHwfexOtAn
kfQZgp+kbcBcMuVMJPFGncH4g+X9+Pv2pVT+ajnqjV1rcP+X7IIHWQe9UuuC
j+QTcrbIv7RL0UOxbgTvtu5inrjt0x3i2krPyHu6VhV2RUmL47kaoYfpqJUX
HOhEY+LqRvBTNE+PEb9J1PEM3z7Dh7iA7pKpIfpk2uQD8JsHHiSPyTyN37Qw
70Du6kNdpDp8UoPHSfH/jHt14P5Dx1LfyR4u/l23/Rf4TNtEYX/klT2JA39s
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
fb0R
      "]]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 3.3550518*^7}, {0, 3.3539263*^7}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.444974959209*^9, 3.444975723097*^9, 3.444976903158*^9, 3.4772904542746*^9,
    3.63482074512964*^9, 3.634885722439694*^9, 3.6348857597357683`*^9, {
   3.634885904273281*^9, 
   3.6348859133466473`*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzUvUtobVuWJXby6v+73/eLiPxEZppquOWuKz+4Y4c7brn/IpN0icyyrSrK
5eOGuZChksskIgNfU3AbqcQgsJUddQShKpceXDXkhpBvQxhkUEMGNWTUUENw
Ck5DsH32XmuuNdacY66974uIl8+C9660zz57r8+cY/7n+s/+9J//+T/6r//0
n//Fn/3pj3/yz/70n/75X/zZf/Pj/+Sf/LPZpbnfGI2e/eZo9Bv/8Y9H7e/N
aCT/yz+/3f4Prwy+8F92/8w3zXTSPD48NA8Pj830qVnsLs8108fZpclT99ez
eK15mna3Pk6mo99L9z2Gr87+6h7/34fH/+P4+f3ZXrO5udn+N3tO+/+5Znf/
tHkIg4nPXmtmNzZb3X07zfU0fHh7dhC/Ow7/7uw314/NaCGN57Z5P7u+c3iZ
r01vmneza7vHt8V9+ztjGMNqMx7vNmd307ws09vmYKcb5+yz9t+tZv/05otf
Yjm+7K4t4Xe7n0l3z+x7j9PR77vfm2vH1DzcPzZP8S993++ScYTvLuN34/SK
Xf498tXn8drTdNpMJpNmMn0aLf4SQ/kHSAjLzc3xu25xd/aOm7t2NaZ3zWG3
4LvthodFXW+eEh10lxP97BxdxYmE/d3c2m9paF6ouHlsTt5tdbfuHl3NJeK+
ad5vhV09unpYisN8+LjfXXp7cBWn067YXbO3FV58+RjedXMSxrz38WHNpaUX
lpa+n7S87j5ipT6FfzdbmXHLuIF9N7d2m9PrjoG/y+GvpT29bnY2w+XZEOe7
p2w078/u0gPO9wIlvD26rj0xkffd6btuppewIWHvd5ubJ7m21Nyd7TfjAGbh
v63xDMzOOxYIBLzobfRqbfRL7uhn5D+aJ7C58F2PPGDA2XvcukAKJ1f36Y5m
tp0DF/87XPt/r/t49E+ABnfbAR5ex0EvznCrBbym+6yDl813ze1TI1A/uQoP
fn92Hwe0MvvfBCEnzhXx5rGDle7714cKcGYTj+Cye3IbJxBg7LBbo/czOGqE
YxGvAuJ9f4Fywx3zWjnmxzi+8U5zfHnXSar7j2GZdo+v4zJ/Z8g+3zxeH0fi
2Wrev3/3rNnd3Z2B+87b9tKecN6MvMdxnW/6npzmMLk5SfO+emxkDjcn7yOZ
HrWPX0wzfmj2OyJ421xOGplGzwavfvtp9Ijm73QaK2nTJs3x7mzbZ8Lh+ONt
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
3Y6uLidRhLgrPP9LjEwIpk8mfPbLjSy6z3YSmi4210WoZrNL7D6/nyYK/vUu
FQwostP/KozxcN6t4vj96YwtJl1hyTJ8TVgo0dy3YLVED52evtWcPwLrwncl
Zvf0eNtcXoek9y8+9R0y1ZPbnEsw028f7u+b+4euwGaVfF2m8jSZpJBJdrTl
KX/CazbgVgGsLwe+RlYHkSB5xaaPzd3tbXN7d98+45eZDXvNbwb6+N/iR7en
MRVkZi/8R5HaptNca5UX4u6Pu4+Xuvom/OmeHrxnoz/6hHs6iwZv6oRCIJ8h
98SZHMTp354FHtk9PGvuHibhCSEP+mhnpzm9m4j9NNN+34mBKS9qxcTu8XW4
ZXbP0+PHLp74EQYz5J7WGNhpuXMazLUuDXsmdnZP7wbdEyf1d4kYHprL06Nm
b++omVnHf4QbavCtg4zujj8UYohytpQgt7KYoz/41PuiHon3tQs5+cT7AgGP
fhJvb6cir/pf0iMmze3NdXNzczObYvv/ueb6+raJdYBxMRebh9ub5vrmpr0j
/Hd93dw+TP94yMctFN3PnnpTvOXm9j5FZf9w4H2VCXX//79+lZ8vpM8vrv7f
Zvtv/4/239F/GL+L1/5zcu0/Jde+INf+A3LtS3LtDbn239nhth+N/9WH5uuf
/aL9PSkg+LW5uGlwDX//9+NX2j/lMUvkMb9Hrv0WuTZPnrdQuQ+v/XDgfSJX
/+7k/242/8d/0/4bry2k9/7pvzhu/ux/+NfdZ+wZG+r+dhnL5y/TJWvfGa+J
7k4+SjuByxBUhLXisYrgDAGy5XxGpsOWeJF8l933O+Tac3LtR+4ysu8GMGla
Ov1/2v/9huVGj0TbhRz/q9NuT2bXJEEevoLvk8Se9uP2cksRMt0V8rYg/F+G
e+N32p9MCafFdgCV4XckFsx2rx14+5h0W4k+bAPF+sVRzT571g5pdisMKt6a
SRcntxjXSj776fYvmv/p7/7P7u/NtrLTI6f5dC0+EpkmLuns1vYLi/LVtGxx
BM8qDFE8LswvpWTpJdzsamfDqGAt2n/DY1bpquOtcYQyItzDOOhRWNr17mvd
nGef49fbTdz66286FJElVBta4z5/41cjjQQCl0WCxZJFYCRG1naOvGnVfXsN
rxbSbiITafjc+vk3cfFW9PYAByT2Te4SoJR0X0kei8V323/j/QzBw7V1xvdm
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
lre5y+oRkaSZc62wckuw0jncqOEbNak/gN7fDThRnhzDmzFbZ3stma1CXV5M
IFZMUsoP15UnKpbj2vj9+IaaZq87F2I/++2yfX+Z8b1aDMbTLTelZcp89POl
NWLlTkPVTQn1YVso39Tqr35mY2HqO1QdS1URgjLWokRqZmUsWEvhOMOH9pVl
bP/KJesh5433FrV9Wi4mN5V1kwVVOeu3s6EQ8Ny9nfkol9iIBJxGOQMtnyIq
wg0zKRLWLRePkDU14nKlkMryFd1TnxXn4u9W5C7hNbOl7Lx17+h5fHbPedt+
h+O6kIh5qn4tePnIly4hO0VU84FBZ19v0/UveKYVQ3jWrB5+X4tMjFtGsFQv
IxYe6hA0OJV03Ksly3b87Tza+VyILRm4SpOb3bd+OGC68Auy5/A7C46zjIt1
tecVQKuwNAsxfLsk46GlxOVJTJqhIJInk2Y6J2MIy7NlJVkcSghLkZIRoR7b
XYPJyfqRP8/jVJEiK/mun5b3znOyHJbCogEZSUvs1m/ccyx5fwGAf58VBUhT
uiCYmFM0zUaeCTFNFg+RQ9eRFowBsF68XadtEMjvWXYdXMWmArrDx0zMBXHI
wqaMDH5IZtnTTsnfr14rGr/COhMKEKloxEsAnS6hyj8QxjnzzW1YwoDJ75P8
6UBm2ateyVlLjqn1hhdnWJlKlfWfOHU/i6uulAgIab5CQAQq947nziMtDBYm
2sK1teKN+nwJvREY6dEJFj0dp/0GWjzhWgueSvXBSOOmLgXKwxvWBL2nzbqP
9mXuGrweTZLSUTJXfTPddgY6uce8Tscv66H6WiuWs/qSDMfkrxrWZ+Dx43gN
uwcyqgyKWbJUpo8PzcPkqftLUKB5mjaPDw/N42Q6+r1032Pz8PDYTJsmxdqk
/Ruur5+UYtytZXub4rgBGtX0VWh+zUIr08CcAjRXEMiZIyomiURUkL81QL9d
uF/byWi8mk4dvRF/xCTHC1b6XVg984viLYiOolfpcCYLastnmEaLzK6fsc3T
DcuSAdv6N1OBzfatuKqTQ4FV8rJ0fvguaylW5pzw1gskDoZ6gJqhrWfP/lnJ
4GCCkeyTOAKktZ5UIctXMZ7kF73mocAxLdTZJTgGIqhIogNyYdrIj+N64fE/
PSqbf4zXKGzJDPxum/2dcbAMZ6Mej3ebs7tpk37uz5qtGfBtbu401/Hy7dlB
B4abm+Pw785+c/2YT2tsn/l+dn3n8DJfm94072bXdo9vi/tm7+7e/Kz7/6p9
//S2OdjZ7N4zHrf/bjX7pzfSR6x7vVIcWJWXgQzeEKGnoU+tp5ZtIfNBjai3
MHsznUy0Vjy+p1iy2OWcZmwlu39IR++RY8xzhPDSU8upbHPucminKftYlopw
TPFdD3nv1ckO4eMNtymAnorlm9JS5ff0W8a1knxEHd2CrM89Ic9Ft4k+s1ZA
k22BAKXNGOXN3AilCKjqmmXxw+NrBVShmMWUHOLpf7WOf9502muYdCAUgr1N
DYpmc0H3P2Osz9zgL9WqyffRdwoQwWbB6DuCt9z+8HG/g8C3B1dx4dabp4TY
ux1i35/tdffsHF1FRA1IvLm13zy05nkTlf7H5uTdVnfr7tGVSN/27vdbAX+P
rh6WyIvFtdo0d83eVnjx5WN4183Ju+6+vY8P0i6n/TOv7AfQFI0/c2jf1zCq
F4wcDRq1P3JfizLSL2Q50i0RCxoaRthK3Qszy+9Cd9pezWDPsh+46q6Ij33d
R6DSBCa6Xy9q5WwxfU5buXOz65jdooBL70i1vQ3T8pbiRL3dVtNkrOWkh0kk
x0q5frWK1YPATFn5rrOFPtUHvzMeim49Eq8KIeZVfeEofVW/dGGW2UjsoO6w
oDK+2Z4z94PJuB5WPMbyc0RmsEga/C6YTh5rCEZet6boOi6k30yC06qfJE6V
crl9cn2Y4FWsrqfppJm0ivFMa+7we/Ndc/vUCH1OroJS/v7sPkU4m2aCmN5N
tgT0x2Sk4ytlGHcRvXdPbhOjt3LisFPE38/wvhGncHtbOZlADOI4hOpklqZn
uWtI1voiRfqUDVGmhOrcfJOdeXGFefBM3dGACY8ordVqcxjfYeNEXGvGbj0d
ACMPg1wl9c7JYijnaJzx/LO+f16jcCse7UkeKE7hmWENX7q7pF/lYN9v1ddE
+lF4+FStSF+magQ8aqgrTJcIYoqP2EJaDEdtWwAWaR1JDAFWk6VWUErWW6az
+mkUSxe5KYwCUDyFmz1Buc6RqWnaCKsINeUpNgIjVBvUcGwRyI9q1MWJF9Ji
46Wh0j7yU3/3xBIrgkGUmOn1UXdt691p89Q0svCTq3Dr5tujmRhoJKZRyISD
w+b9OMuCFfKWjPuT5uhtcMCc3j3h5cO34RGH1xMUB7JFa4p+mQ4YtvFFLTeU
/o1o5Ti4HWjVWcnor5GgdElU5Tk0Pl660eZav2JUa7bLunVkifixVzVsoaR2
GqPryfXt7GxEMEZVK5/WCB2eYkGii2JeLUIssHLj4q/VOuMULtweydgfDABN
Un40D1uVrZ7ONReHxhhZa5weWYOArXnMZWKhq2yKIaMOAhlU4uLDgB4OvlLN
4dfblkLRo0NDstWGdXpFxtLeaLl4eP5Y6Um2gRIunneK/Th1kuVNcvzeyhw8
/Oyn/kYoS4Sw4fdeYTDX3J8Hb8/bw+tR8uE8fmzGnSQ4bCWB2NYzU6A52d2M
rvwOvpP7gEsA8e/sNFfTRkZxuf82fP1qMpJsbTzAJa6DyeNnKk6Nv0REVHpO
6O+YvdQKLXrx3jhjwO+Lfi3vwFZifflZJPFAjExFtj2tJYYsVm2iPYkVkseB
j2e57VaesC6ePUlSJcuiz9iLxepzmlRQ0y+GGZQtydqxfl30zax10uKVJKWu
iXkZWZriEQf4bNw31t6Bp8oxF926oRet3Sgdw3dJf1K1rW/R5BFhXbsmLzCg
JJ1K7SNdrICuGzR/pqa6ZKTpd/n5R5BxxvMbPuT4G6YRwH0DkP/q4K1y4LTe
+6tmZzNBdkL+6U2zN87I/+74uo78k8vmbXfv2+ZqkpD/+nAnRBZmsgaRX21r
dBguGYmG3gx/fUuV0yPgkrTE8WysXMK0PdY/E9BvssKWj4oQlWWQIYiOGX10
jk7TUHoqPk7D0NAD/obe58s0q06q6TMvV0/Fgw/Ia0VqDOYiIV+XgWHrQJQG
bl59sB+p/aSTt5jSzOSDdu4BpCUlO9FZNgw0XDHVQESOiBUmq62ocs/JxEUg
uLyhCBj5yCT0PE/bB2fGFXNyYhYSoBPOFsMH9HiFwtk9rIrAakaHo0P4x7L7
/Rjw7fHzjX4cvzt7HzV4xPHrgONbe809+HLQl39505zujcXXX/flPN3F75V4
fhTwfO/sPlFJG3V4CkATRrjUJeosmY2u+U/IbnoNoFiYJ+5017HpQ3QFCK+H
V70oGAJ/J8hkhrICQwGGwtaSiufSBqIXQ1ofKN2RKf712TO8RVvzVFHbL9/b
HHOgBp3NXC9DyaIBQiufJTzQe4ELlMv/ipNvGNhpfVi2exik9y+a00PZObFB
J2RKU0qrANaDHCBWtZdPdgkfyfISncxJ203qFJa9OPkowh0/rxa2I7NBNjdq
eoRFSns8hZplIJ7Xab28Qm5Ha9Kkju7EEkPQrXaCPUWH1NjKJFTBwwC4l2vj
vfO0cdOb46CbjzuHjfRjRbg/vHoIqFyGeGk41/rqx835w5P4BVs/0HH0Ax1c
xcSdGeif7sxGdXQjuTmStxOnxgiP6Xwiilluc6pvyfmOukWG/I7gKQozK8gX
xXq2h36nVab8PC9yK3ThqYYtw6VMtbNFQqK92qNEFwpRoB3oFstr+avfTq8X
36OGh6g7MVGzEvFMrkkCNHZAhinp87rY/pVRxuwtZMIX8C0lBDjqxtBFEMxX
cnmFX2axDDTokZjV37UGKnaJnRYgcwVbrLnLYvpJ6SrEnAC3YPRrb6lYRXUP
4MaNH0kjUU9Tqpw+oxPlDeZ8Xe2xPOS0cjbNT6n3q8D9fM6nHx+02ZfyxsfL
kL0z3v+YdMNOS99McJ9sAUT8k1stR0rAf2rO3webYP/jA6bwHIyDHPj4mMfw
sQ0dHMw+zMVbmNbDAht+m+M3JgfNWXWzu+LcxzorP2cmG3mSUFpU1RmedWrM
mHNVDY6isebPQjFya1upZtbvXPS79pQOCtBChnp/fCmWczWUWl8ojUpAmjRu
tFr8MfHSHSIDWGnZc3KN+V0yamelNdDs82Ib5bRznKLD+ew138JXzgQA1o4Y
Mi61hpox01Pmh8wiVNSpUH/6L45H88BeRcNKoO4Uq7FONtYM0CjZI/EOEYIp
Vht3AXq8CUCgKJZKp24nZlg4ae7uJ81DhNoZUCZQBkA8f0iA+DG6U9rAqPBM
e+vxu53m4ONDrmOK1w4vH5L/n7wt0b2A/dbexwzVj+dBLoRsnVSbOr3uPO9n
DyUmxx+KEnIciw3GcceClsLb1Tqd8rmyghTnej2CUrKg4NAwvvpbYjv6lpSK
WPbzxa+Phja7rWMiNwYZ36HXkuAYyZNkfMsEHw/o6XxJSM1kraeEXVqDJA5D
Kn71DDE4i75XVg5tV6DfJvllqoXDe1+kKWHUB9UP5iYSW4s9l/Xe8Q1fkwyr
C9K9mg8d0ccAR78KXvezhqGVaUmoMQ3F2rhk0sRWEvTYSjoZd7XCS53y0H4G
dQS1IgwU47a2dW9LakvnWgyWIY/kFMHHK3G/nHV+7qe7s5Ar8+6kLf7/LI45
PipFTMu6p8fkVjm76x7SnEXRcXI7FbrqXCq7s68e3ybYxGjpBS/hZeTmnxDP
Eh9yjoUOmVxc8e5lfW6EWpHpED+BpsNSufygdUHBZCdRgcGu32+Gl0bJSoJj
piBtgO4KB/c3a/B9z87JVqURG27dKG6VlcAUkqGSTwNO9LSNcual9tnUoIb1
32Aybeh9QaH/zdo7098kQdtsIH5XJBdhCVlkprywITBxjRmvXjTMTp9joy48
1uZXfm/ZgR4rXNmywb1ol4ICj3KJVZQFsgoEgguPYtAqSLYQS8KzejO3HZtX
+Vnur06b3Rk4b+1fJjvn5nQ/gXXoUXDYRk6/JF9Jqv3kptnf2YJ2BHMzNf8+
MV9S31s/yVbnmU+pZeIniaNmQK67Z6gSDq06efjqJLMNPcVTbwFrWyL8USr5
/WrMUF+DiAPGREJegEi6NAgXjrhpas4UK1jLbDJUiizhLmniLJ7HWkD2GcCA
PCM5DRUz0+R7kv6h2hnI2E2GFbJ3hJKRd5pcJROOwp718rj+LOte7lflmb7j
p6xY55RMX8cJkXjnomhFnAn894URGH3LUfsbxsCmz6jDc4BKzzc9XTQRmI+H
gBLuSkDSdUPYebPDEDCiA7qJBWreVldGG4FeunJlp8pTM4lduUSCSleuh4fH
1PMQ75PZTCdtp66H5nGavSFt2uN4c6s5fywRGoYmaIxZbAZEyjOyTNVCpvtY
GDTopN/crV5FWSgJwf75umMOojsN92S/WmqJPzRNzT9nhAnguuGpW7G03ZW6
05aCbfy5Ipfgcfym+ZPteKhnzKzMpJU1IGLSqyC+05q+ngRNhIt/mGFZe8qE
gnKO6AViPfU1C25zM0AsT4ZNgIPMtPPLioZ2kLPn/2nI1AvAzE5ssYh6CDYh
sAkr/tmEuiNyUfyXX4PdaOSrclSmsxHsRBtGOd7q9uRTCWyiCYbIi49nEOsg
FJWtsRf0H8QRTadPTf4JCR87J3epTZnxMy8WozQ5ED1zZG60Lwvi0YSky040
vUsNnMNhpkzLlsOXevRMzXqpvoLLz5wKn6n7gSeimsELRpg+IE1TnC0t7h1y
1gA7PYHYyeJO9tBVviL9RopjZ9yMi6GZd8HI993NOhvYZlrz5mUwwdc1bPh2
zbqYb4dprilmA/4AzALE7XC2OiDbc3O7nrCEK4PmqA5Q6TlloDzBHYoaGKDV
nPcYfuspANNt2mFgpscA2+DtdEr1P4xk0JWo7+w0p3eT5unpqfPn3p+9azbH
R60vVxQehmt8+jRLx9/mH3lTjWBm6yX0nJgK7nE3ttyB/WbAwsIy4gCX+9oT
osRbBBYCW4H1yLJM7jNIttKQDSWLNTE2sNdsSRmsZZZjhS4XlzW6bIta/aLg
L9wXXV/AsnBZpq7OoWI5V8/V98SH2+rK8myW1sB25QWsAsyDFS7UHmlltN8u
Ue5lvf1eKvpC+5yICXxtLcbqR/+4DJZzkdQhMMxDIauCASXdmSCKDraoTEWC
zwvdS5KtNgtnYxtAupw08ZVNbJ0fXyOIZT3FNmCNi/kVGapO7HFS9xJj4/Ne
kXcwU1LwBWlEVhA2wyc73icDgVqJLwK8fkDN6ZKwVMxd7TolPskP1EoWg2w/
hjuHEzOhmsxDOaTtGWqt5A2K51LaP/mxi8yZDJGzvSawJIBc6FXswI0hnoF+
RGNKVs1+7Ut40c4SWR6VUsrIz89zZK+wbjrcsfD8zxhcuf43z8cAMSAG6mIw
qhnSTZeDoBD+npeg1SpYtzfXzc3NzWym7f/nmuvr2ya45JoE3KJhWYzg3ZVk
KCC8/boW3ptcd28gZSDUQ8/eoxNlMEYCrWr9QIMRwkMze/y0K3MqOJZ6YhK9
xYZFfV0eL1p2u+y6QSeMKgy0VPdQ0cm753ksVGlN7qLkL6HbM0OeiEQAH7+C
DeghJ78oqd89xjavlhAP9/n9ZEpDFnchKli6xgxVjHIUHNd9QF0ullvqOIDB
hsYAMVgntgDqXsoP6AdK61IWDh8x+Oo3wq/DQwS7n3T/vCnOrf+E5MRCaSiH
5EZmZM9I/cNI/OTaF8b2lwnWWtzNUnRPMwRbHVQkfA7Nf7Gn5XrROuQ/W2Ro
RbmSJqF91CJ1a22X5ba1PKplIGq9NkQn06a15uY4kmV1m06nj1/VbhSRQFEO
+J0FmBt6WQ9Ck++qM3bFBbXjWUBcIts5qfSVzh/mVIyw67nYm9iTxXwYOjjl
uxJrwMuOyeoJ+ZXIxTi6Ws9kOWjJo2GiFyYc1DQjtS82xFI2ahNYxnCnWiHG
yqscGglRm9not2vMEmjE55hKNd1EKXhUPlfA0NYqhB4BS8abZuHPkICTy97X
14uApcjpissvxSa0JtV+9lncOa23tT/IRuqZLJ9Ag2I5g/J8OBiCfvRQs8vX
s2runPKIIj1jXfFnT2jPK7ekPoMjRUe6DXg6CfPn3xjKjX+Pcn+XnIqBFTng
QGBA7LQkxXQ72E/tqyrutn1icsIzNxgqLzVIjq5Le4g60ylLX8U8hCagQHWN
cQeFhCwJjI9HF6YCzlVyca13SztyEW/L2SwV90Pve6A/p13IYjErA2T0NI+f
xAEjrHoWu+LNStq301yknoe6QehJumDj4xilKN7F17W36sp+5A81W91Vof0X
fpfmSLXwsNrY9vcvuq+VHknRNwHDdB28olgn7CLKLoKhACQG/1jPoLDA9ng5
LZxRZVPeAKrmszbGnLXncFFGjJJhFWpHS/U1AhFl1oEAFBVoDOXVLI/9EK0A
jVZlU8nTsXd9zxZ/ihxdVK+xqo22mb8uXLNakcv00HMcYLlI4qF+HRcJP8v5
4rm1ThHd492TtO/Fc2qjP92gdkWNXKJqpOw245M+93kpAJeKWelRr6l9A10/
zUidc++ojdqrLOqISmBwIkn++Hu0S2tD13Cd2d3tf3A8h1kiPMYDGEvypiuv
q0onP8XCdw5TBvWPSuNM6p8zA7Fv6m34iq+EtgKUQtljJDDVjSkJrGyTrLUs
NcTZKCHBvP3dqeEZtm2lDgu9c5pBtFkWQYPlExm5m5v+YII06KN+F/OedvEZ
BLXaRbJJDa+EZzw3K41zzvgrXXK+KQmaO5iI1GYe6R/72KrItppij4/0IXzw
IRks/8mvLuQiV8u4moebTeMNeTaB/ej9+7pL2RPrGp8TRIZNf9URGMakml5q
eVUWt21bDIeUWfji0/q6lls1NP9JjmMVRGgDxmIu+22WFtjSVaIKZZqWiSI8
LyiCeRHQwwzDYW03REVEqd4T0NNoq+I/cJrFokcXSNoqKmccRsgS5fkH9MQk
kyxJcCUNc0blGgVl8uxATCdtrWjKhcZafCaLWBMYkxGIsh8PGEop32rSgd03
6MAQjhmMsxIZP7RhFAKWZ1crXcdrgQjf4LViyJjymcppfvYLQ8+IhmuwFO01
zOPApWCGob8Uzgkq61Q4VoSmH+LnHQRxZWBULOjlO1usiNH10+PUMp+ztwP3
C/HxyWz9WeF9JHF5nsevAg9ehxVGasW5e7mKl1m7BnN8jC9dY8zTZEMe2V7P
bjvEMh2g+roaIvGDn0IKwfOfRTcuqPZoEBxwfDq/RVamcnhjh1mSsidPD3dX
N4BF61gMWwqGekDM1+R4xS0RQ4t8PYbUHDBNtvKmpfjImq5Ua8ND0HGk81Vy
Y4RvqkIhK0s5ZxjTYswa59eL7ymDZJlQQYJjzNPKmFp3lUb9Rufc6gMy9GpC
ZnvFDF8shg3PQrHVOpF+mlotLkTYKsr5E8yhDtX+lzYkN4CvFl708Z+fiDef
oDS+3z9duf816DLSytmQtlDATVUlV0cN4/JBO46NbgmZqK0kqtDyJbYekpTu
aSLbTn+Vwru3aFS3IiXA9e0z1YixxZIzyL5gpCAhvr4yUeaGZCUMzE4b8Fg7
MhZBcHtGhMX6nAJyT20c3FecaygjNeIU/WHaSQQByyKVjeQzyXcYA7yKi+gZ
1GoKzLsFyMVOd4En+2rPUtE5BVSgOORyp7v1y8qWljA6TROzd2Q5WTh49tU3
ilNU+EcKg9snlmLRPTbSrwNynWN+Z0t+9KWj4zAdHrYzOS9/lnpwxHqWwQlp
Srx+mtejroD06Xwx41njPpsz/O4XE7hf0WjULlNIcSvVZpatPrQ5SxnOUQm0
3O9HHKRsqV/HsTGlCB+HlpKfLMvEwWfpGlJyyyDSUQD4J+mNFRHCSmM9ixYi
eEP68mlBpGxEPUrt9MSQha//uGJ2Q62XvJGhgM7tdrw9edufw6RsigATiZEU
/Lq0MkVgU84NWEgDw/ipREyQGLC4M256XwPzApsW0i1Inp+Wvsz7oQJw+f2e
OGhpQYlyyi+yqWVO9UTmnZwSNybK0SIN8rUFUXmIVjRrWpED/YgPOmcnPi76
ZIMQBg2o2gERn7saCV5whsVSPaLflgJml0v94hSDz/qYDVUW8WklUjVnUKft
hDRL3RtQgSdRM9hU8jEAXv4hBmlwAZF8FyOcajQulaakwuqcOnuQ62qRcsr8
AIX3sz/GzdxwwBP6cCvtEhNXfw0PakqMnMKuX28la14VzHrz9YcFTYvxWcFS
ReLAldNnY1j/qEGV8Lof6ds7Wdj+/t/+z5l+MNnFEcFUCUBhh8TPloks5chv
1+MedUYUiEqH1+XilbiDBfaat0kvWKYhyX4GldsEX1h4QJLX0cQjJEXI1FEt
35ivORVOhpIQIoRLnHJh3SZTWF8jhsNE+qwFJcYZrei0nwLZHbnZXxKAqyrt
izIqnuLSMUUQvs7ckHNqlaS4wOJyTqQF3GddWeRrYClrnQhbzMm12a2hlnm5
OMKRLE1P9kiIFfKWwvIVmAJblRcDQLaWPROU25WoKpwYVQECrCM8elCRSKUz
V/Z2xqzQ+YjBzPEgs0Zytz4el258m4PXV0NX9DIxuHRSMP4dJGvtvtQQ23PP
Mm3CK5eBZ6xb3MQfiwerJr+bgdpFjkwpug3rsGpEgYMTGKBliClPVpa5H0la
SysjypFqEFms8Fewmp4sJqwsnjWV7OGr5jYl0nGluwrNkvOcGv4yTngO5AuK
DuuIBGvuB7qc84VywyGVxBFVn2+SQ+2nP/NLCXCRauDGFsxX60uykb7LNpsg
JwG1apx8VutiZDfMz49SyMfwI5hwnxlt8B/9y3+TtErZJFIYbTAhQppUkggV
twzSMgvsREWnHtIt3D2ueWiPR+ZG0JvONlOuDU4NWSiQRR7Tg5ps6+0b183W
M16F/AO/o2eZXgbKjRaFSnmwFVCA0SWtBXKtSMiQOfwj9ULFtTrYBNHnghqV
7c+21Yrv3MBIwrPFNMuqEBAWn1T0XNLTi3gN1Q/Rpa3fxxGG+YzDIhOYnyAZ
nlQeiiK/Y7cPC5XUbcx8Z0CKuhZOU3gt/cqCHQPFpSLtCHX1TWh3LcMKg7X7
oPOklSWhWzvIa5xw3YvIn7iG0D2lWAHQHrTrkHmct/Ph3PKRzD0Lqufedhgp
rmx+x0z1Nd5+NyETZ8KCmG8regzq8fIvtk5BSilgdA77XFeyDLggqMkcLUA2
UwOQRaOBFHs0V/jpempbrE9EZ8LxQ3XVm1PbN4WcX5G3wyTF/Baak0QVjFTh
W4OdNO7OfteExgITtdkxMwb1w+2/zT0bGWHDfX6veRbDrNcM4v7E4dJMPS0j
JXxeIGSpp1XYM4zM7zSN2Ubo4SXSz6uGrTn20GCNuQBF4V4HZT/P2rVYrUO0
1kAzFpC1Tof0Mc6NWPHR/j5nEoOU34RMIMWMfRHTu4WzxVHRrgIcMIQNBGtu
Oo1jCCQ4at29SyN0ln6l26DdKAi7JC0UVZjN9hBUu94bAJuStGmF4bxWzfyw
Wll+4MCogYcL7jbsL8OyPeast77eKcqJJNUyPhilySMxB5JHYD/oVWECwtdM
fzVNBXWgiDwLV6knI2Oo/ctCBqWULpsdy16Kc/oiK5lVydlTbVhWRbCUA0Zw
+sih6Ipl6qj0XkC1TEbDHGnDdn5QhgpLtzEJFEMz+TJZt6hXwssbb42LBdRd
JrRcL7n5Ff1cNkFq10X9Q48Y6hBfkvlo24Qah67dHrIIy5N6iz5pS8XBKioF
1fQ/iS/diF/VVID9+WuJoIxC7Jzx+ca3WWn8uFQMFyn2AmKtnmqynSoFOXo7
qFsaHYlR/kFEKy1CHGoStHJcepqRlTe5ljJqcrustRsLMfBsoPgUE6NC/W1b
0iDK6tkaPqu/nZPepfN9O64/2Q66S+tjLKbBiMmeEoPjJhuOTScJE5EpuW4+
OxrTHYXpC3MwV+LKy22M9NldfP5Jpkf1T4AHwQMcjn7zkZ6iF5sRpXIJ0bcD
BMMSWQtYWqTNJYAFFPv5TejsieRY1aW3DwROrTVTBW1VtIPqNXiuq26rozVA
zaV9eMqW9kWxaOpA337H4lAoRxciKgtq2D2N1vt6SWDgK6VRL6f10exeyEme
vTPjTdZxW02j4iwqm92CTuTXCdjmcnbzawJoCPLwhqRLCiOQsCq5E4wIdGev
XIJ5SuU6Mi/QPRpEEEVHHBmx/AAjOEvPisbS7dphXP56jqGtAIuOspp9iRNo
mlXinlkauiQTNWwWRiGwSahGaoKQ6DR96yPW2miXaK2aWOA5gQi4L94LVms1
CGSRnb9uN/ZJGfms0XOt1QzjWN04qICUVbZTjKFqzkMG2jhKrfz6tQexejjn
p7BHI8kjalm089sNFKIvEJawtFLUTNwnzkTUViSKCqiJZxNJUWkByW+BoqX9
oRksjO+svMV70L+owsiVpizLepgcvOqiHnc8p5d+3aUHiQRR33H/3kx9zObw
u0bl0F7ar6tHGuecEqSF9nvyXrtTTksmo95JfxK28JKuRgADV9RpTlmL0+HW
E6NZE2KpBvE0ECRMRx5JmK5W4tIDehIexRFqnYhl0OGjAZ50qZbqYN3jufJP
ymPXPsHPn8vkVJYRHr/SnsT0dfRuIjuXiWqlq0HLBHbyk6CzfI85bz1+xhAC
ivehJV6sBfbXRYHxXDEeIT5BwaimYS8b0ZNg4X3jwmmdOq8nisafkFe6+0Uh
L4koLpZMWrOF9tG8mQU71El7hIj+MsgjpKM7Ikwic3oN6vB2EawLgJa16dvM
CSbvwX+f20J6TdJfksdofykrj7JD4coT89GKF8dBB4KrfSUodu94oxPIVR6V
bgOVT95/lgeZLJP3GtZmW5JMB+SNmjBleFeDS7XFvhpiNSdbsrFUZCwgA+bt
XSoWUYEGJQHBSia9WWWd5pzurJ6xqZKt1XhZDPCPRIjSIztxQpUhusx1lDVC
V09KlbAPEiweGqFVQqOtLILimh142znRwcMbkjaazofCnfF8CRhh1rasA9F+
48a6q4IdWJEFpZpxf2c8Vjr9nEAQzLA/VsvTJ+1Q+DNqZxLhMEk+pebYkvmf
p1lgYAkJkYBOpq4hGfz93MXaXoRwgW00Ku8B1kKe8TMuh3i7PvUMSqfAJVvO
LGqtODy9GmcvKfZaokIkUg9rxFIM1aaZaWOdTuW+b1FtO7Rqf07NlLzdjFoH
5FXyXsbMjEC1IL29Vp5IHDdmNvx2a9ZN9jcOTxxe7b/xc6YxYS0yQDgLRtcW
0oIgszBKl6aSP3l76wzy2/EejIAoI25w/oUfDOA+y1oyGy5LgX7LhSIo+2Xq
ajArS5y0K4mamGgVvuWR4lOiEhkNS2KhyidX7gdbn3W2PsXogGDRdcfgto+i
/KZ0JX/E148w6ht/KNwHWZqjM7In6O+B5+uApFFUIM0QpL2v8LpJ9UON51oT
Gc1DfYvMCuZcFhXPbDJK/BRuJ1LnN5zEBk41qrGT5hKSddStKQSIW7VFx+cJ
5mH+tPbMX2RlcOTVzDnmoj6/Gh6FUxW3r6g/snU2A7U/I1zinzIiaBCO961W
Ft62olzWVrmmDRSoYvKa1uRs214XI0DEJIZakcSgELbWv8bZnW9TKI2tuMCZ
T/iHbVVP4l1dgErTMLJl6V7QHH9IJm/euG6ehrZ0OhUl9z94AcscV5/6wVhP
QGFo6IxGmVL2ha2V8l0DY1oPR7lnTrqGiaixQHBOYTkBWTrkUBxLXZkxT4yv
S7qz8pknXzhTlzElVZpVtX5nJ/8BMd7U0/cncwhnoacGvuP529BJTEBFIWlZ
442nNOQQTu20Uhww1h1V6Ejur/kb4LaIlNIWZfr40DzEc6zbn8njY/Pw8NA8
Pk5Hvx8HNe2uPTbTpokpMSs0Xq7eSNP9a62YhpeAch/+KHeMqVcb8J7D1ltb
d/CI8xoVWiQH664bnjJkCbdUP0vh7rZ/GILRTAr9MNISeSVGhtgMMP2r5q/1
fFwWILhKhOrPcFGUc5h1aolOvCIE6hAjnvL9DUY3vNMJLPFlgwqJyXOSyVBy
PHo5Fas40w+7gpaUH8U0XgV7BOP239YcG+t0kdWI8Hu1/GaROW1MQPrQoHcX
hH8gs/XCuvQ0D1hn5m72U2LKJqOQuY27pFLaIpuGVj94WlKt5lZTBK5bZrRR
GGrTPN02+zvjUVcI2Rrz493m7G7apJ/7s2ZrhtmbmzvN9b+7a/bGm/He2f+3
dpvT6wdgy7nuee9n9+8cXuZr05vm3eza7vFtcd/svd2TnnX/X7Xvnt42Bzub
ncwYj9t/t5r905vnkVhQlBDSLXb7gifUMfVLMasm7SRJFIVoRFXMOzR1lAXd
RGBoAaEzjLPw76+w9VejxIv4nVHPQSximcuwRY1WXm4/Aa8cySt3dKu4MmbL
TZShvuCbqSb3TbH9+rGaJNofJ3O8wCArjUttwfdIMOleVpLrehl4LiuNhN91
sRlup4nPrRQE7WhtqQ8MGq19QjDg0BAnkNPYLjt4um61P/9G8h+kCCeyntRY
IcDqFl1MYclg2dPBLMwB510qGRfGZGRdOpkn3rd+nJyQOZIYs6KXL+12Ocz2
++tFJZ12uRINNZaFykAfPu53uPz24Cq1vHtKImS3uX4MomBzvNMcX941rQFx
//Gw+87u8XXyxzXNY3PybitcP7oSzG0lyfutIBGOrh6WyFsl2NQ0M2G1Fd56
+Rh4+ubkXXff3scHKanSUb/2Z5zqtlv07ZqC4QldQuy4ghoSdZj+M8LVfpiF
+6okkV1rmDZZncdKY71RV9sj1n0PfYuHzZZyFK772qjZiJYq97MD80rVCI9G
/sCglqUtw+awGhlIj62BPvzNHG7wwvJglIxHKvzm94iyZyM4AeeBp+VYK5WX
GwO/e8QRMzaeRWvWUQn85tSlwwm9lXn683pwGFYlZRZM3LMMDF3q+NOf/SKZ
A1p847OYk6/moUfHn3b/4gaKRi9uNwbTikXCa18Wu4W+IjEOpAo2e5ELN/uL
Erkn14cJQ0UUPU0nzSTo4+na7cnu7L63zdVUrrVLM0G0DmBbQPVj8lThe+Td
dxGXd09uk8hvJcBhp/S/nyF5sw54rfk6MnFoLcJ6F2h7Wy00Ok3By8cEt5/U
w7HdKjy8OEk0GdLkMvg/RosFj4Flgcf6AaXg6MusB7eox8/rYPnaPIVRUlHw
MzQCnIzL0m+t4LHM80TxZy0fe5wkWY8s4Ledxixly1st+tS64fC8dgk4A5i3
X/6yUSwhTqbWCVqkJ76uYjC9IK/H7HPiVWLLDCNi6a0l+XFN2NLXHBrw9Lu1
BotIwyzr1PMZo0qsM36h1iI1TJK4Q2Fr9LOQZChoYkWTnnBocGRRzJYWvNOb
o+7awQxzJdha4PPBYfN+nHF5hTwrY/CkOXobHC+nd094+fBteMTh9UTywKGC
2E3qVSXzzE8oKSO6xBCZz6g/PPrGwuRWM94wo9T4qIqsC0KznPuieIb28gs3
/sl2MCpihr18h0YfVtVSaATYRm293+2gDyxjFn0tPAeQFxB0odAB4wal/CCR
afKKdrbSBjdakpS9/WCc05GB9Tl+bjRwcQxjHI+Y/kz5hVv9pgIbZtsJ7mvG
poYYeALekNehFSVJ1GW5V09HTH5uL74CC+c9f7I4pzShO6/GhsiZIgqHjVkc
aVBIlOF0r5bPxh+W8+HxWMfQ8nspCUf5sbo/N1f9NKVyJQcgt2jBLXLL3s7U
6OZkN0BthNukR3LEFq/HTquhy+su99+Gr19NRgyunYYFcpys0jjTAmF02q/x
7F+cT3Nau715wuu+0uBgdDBhFox9eXVrmReVwo2N+L9Jj4WvDQku1hzFeN9G
5DGHp/Rze7w6ODKsIYbjokbSoEHqUhhfOK15hmayYxmrAy7mlazmrOZNEj2E
ZVjBYn5q8ySLDmxIAwuR+/3/fk15T21+9nNg1mzJTus1ucR4STto2n+3c5mh
qAG1OE34vKwZR+UHq6R1Mi8mKImrA7lXiTi7La5pUytuQ80iRlAZlosxfvfx
MPq8Z1r2zSTB+fSmjaAmOH93fF2H88ll87a7921zNUlwfn240926c3hdwLnM
8wcO9PTBTE2BtMoK81xDjP3nhVPNnjfFI/yRKjBtCvsHKULy+730gh9Sr0YZ
3RKHpURB+8Y1dbviM730ft1sjvChh0reDkQ+tIik59BPtnwyEiZqiKHgF1b1
l7N8Wh798O/arSw7qZm6BksNFmn7hYOTS97XEMQTdcxxrwMt2NNEH3GBdO8p
2alRYtR6cvj+G6PayPjgOSNdcR7fFy6/7G6VHkWc2YvsAL3yAtfO3vWc6hAL
XBhKS0XR9OGuubm5as5PDpt3b7eeSV7Lu9MmZqGkPKvCnX1505zujcXdXXeh
PN3F75UIfhQQfO/sPpFy622PCZVBUnXebunPw7QbCaHXsIwVaA7J6WVVlP45
udxRAGlKjGEYiomm66C3JpEaWulwyjb3EwypeBx6yvrQoi6W364TCY0yx8tR
8O/20bpgCO8lOg/DZb+mfXj8q+9aTxMT1lGlQgbFQmKidqHZ1esJYP3FfqoC
T7/a7mW4oI/ZdyP2tq2XrHutaNtgvW55slAo3/E1MRoyr+Wg6OTiL2sfgGaV
dyrXRa1ng1s+04varZ9kVxTokUD2273TJiZ55KgkQPbh1UP4tIxU0qikdXOP
m/OHJ5lz65I5ji6Zg6v40hlwn+5sNuOjG3ki6uPaf+tYu2y5WIRGOppU2Nog
2BBvBEM5OVXeYQUplJOPdcIXPko3tUV+Tdlb/REe3RQMKp1oQO91hVtRt/Lt
eOc0SjuT+Cjszq+LOWJy3Uifko0ZpjkHVGeCcTXAlgPnFn7MTQDDXohLxD7W
ud4qp8koiw4y6qxSq7MyLX69QDtM/kHyIk5ef4HqTVrk0dhTW/uqCVULSiZA
150FPB2LbSAiefzeiJ1iK1wDRU+4yiptj/K1dHgjjDvqxeDZeJ9umt2YFn50
et7c3E8Ss3Qq72bC3ZS7h9B7crtEnp6R96k5fx8U7P2PD5gScjAOgPzxsRH1
4/Hj3uzSQYv/SZmrHY4mclOzp1YMkIjZAad+q8t8Ig6W0jv5W8ZEVfCt83CR
4NSt1Fvla26uI0xHbzHXGB7DdBfdsSxqCCyqGdbPbzyMOU2za2/ct/VH+5dg
VCa9ZPDZFmwlRd3WO+L87Vc0sTqSUuwCSweOxlbbZf96WbrcIPgDjroskFcN
WFbIU08LMvCymms1Bb5sYtKCt7bPSRL8fPtt0Yl5alJPY5aanGLGsE7hYLxJ
GIipGXo7cWSqJMh8dpFP8qgCSH/aTWwNFz6bQfCkubufNA+XB4LPUsh0uT9D
8Xdn0Vnx1Dw9PbW/p9KeGRIfv9tpDj4+jPS1w8uHJO3IGxJJPMZrW3sfs1R4
PA8+9bdHM1GS4L+ZXnc+8rMHgf8190RhUo9QqTbtt3ZF2UdNDbEGqPZZVKfx
9Tg0bMDthdqlkkEHbDT7+6LhefFsRqqKK0oimscZZSByeYppshILwQ4Q8bAo
2geDoQRjItY6iPm/4Xc/uXFosVR/g7RlwtuwL/Rv2F9WKcJaOpkwOAJZhm0J
60rQTX4A9CJDrBUhQz1KRXGFOaMWOW7CRjFcp8Zdr0QlW6AnvX/JlR7ISB4D
4DC0deafAlg6QQnmvKy8VmcAat5npAz4gc4beOMX3bew2HNvC7wmB1cJ8oTu
mwep1sn3tTU0NzEP/E2krvisFMosa28ek+fk7K4VE0/NWXSYn9xOhU06r8nu
7KvHt/H1L1zFHZ1auo6izC8tNWXiJejulRCAEHLRW/mlK9RZpIJUVUl2qHJB
i8rgeewwn4/E2OCFxswcAOU0ecKvNw0GkpNqaBjV92Nyk5zB7EblfuxUFHNw
lXbf78NmUoNJF5Zsx0LjwpJOCRCLsoALCF6P/rNT1Mh7pYv2v2mpDts08jPg
FwpNM/p0BrkMsZtoxf04R9iqxmJIySAevogrgMLwNdkEeLvfuLq3BWrETln2
+6vTZncGeFv7l4mSuvS84NMYSVX87smdgFcq+8PvijLRTG6a/Z2tAmgPPt6n
7yZVuHVvbB22Km+iQszdY/0DSpNng5KHwJYu8vQEjtIy2KMBAWvXCkssNV7K
qTuiMMheiIOx5qSJduXgOgG09lRSOnX29Jc4rpmVRZmlsdjvEMcrgIETKk2o
uAYCS19LuNfN4HCKr90l6Qnh8cR8uxMWZpDJWS9C+J35d/3KGnfEEjjCBWjJ
sisvD00k5K0ROFcT7ekSgc7v9bNUOuSXqTJx/MqQEgIkbq8OZFoVIZ9JCSKc
Gr21Oja77/2ZAV6fATU3VhqNAW8lMhOglCIow+pMqZyExlSJkZ8eb5vL6w5a
R1+Q+2QnppPYxGqaobaZXjXjza3m/JHDL3Y75znSHXFI6R2iLYQaxLXiqHFD
/RFDI/LaKNXhYPSw5XvStXWFIhbba0rcwA7KzC9oU1ZkqbPhWraHhzVmKlyG
XO17LQuPyCgDwMQudDGPqsKezGgHevGatuGLwQp94S4RJwgUKT4WGQf5kloK
qIBDFi4bVvHudcxV/1LREQahdGYeWV7jdWCrgWJkSE+Y7aTY/zaVE0z56NF3
CtQrN5R6PpxDPHtCuU42Ph6AoFnbvDN7Tcg0KJIE9F6h2xT5MjFWROo/iPOY
TnP7QEmg2Dm580GWZ2Zb8HFOuWL7XvbUYWlBhW7gHGhSUwvtufMYAtExCcU1
4fHZdZZ6gMVWrEhYKlAw0v0smEoBuzO0kGmOL4Tgs64CGyadFvCaYu8lwyY4
HF2L3v7XZiRlKVdvjolWDYkOMD2JmQdeHkz7eAnCxTb3I8eVris2mBNQq2hj
aFdpT6AaXAbu10oMO/aUCC3lsCk00Gon09p0L5yoe03nGOLFkDY3uHuEKFhf
LQMRrBdy6d9RJFa1B5h7SreWQcUYpJ0ftPD1alQTIlr/w/i2rhZ8Z6c5vZtI
wK+5P3vXbI6P2mTpbvBdB21PfRIdqWWHC32Ae7WAXvrfoa/WEa1JkVFv98sF
uBY75ASoeC8eTwEUIQ02BW41bRaFLguU22XQkKVfyc2te9e0e0wmIf70C+uv
JEKC0igGPKG/su9tLeuJwUqGe3KzFiWYXytcwVb82u2ebK+xOcwKYaGemMPT
Q7S9f2FVeHm0jESRalgfnnpHKLs6igtpDcEo3Cnr5YYQqsss0vUF7A5CfhHh
6K8QyBNQtoYBhKH9HaT3AhOfUNhqRmHRmiVxR6VVks10eGzcXE6aOP7G0V4t
rUGiusGtMTY2cApsVg2ZiRNVeUp1DiFikdHhmL5U+sQ8MaodiPCqpK2jSSim
CVK5pDaK0rRddpwhgMDSp5AZIs7Q3ODw6FcFHqGY9txrwp8oL5mLFM0DhTKx
88BCpxjplWRi/zXAC2rZJBIaurMFtRCPqRzoscW36l4hbN8FyfrQSqMcS2na
5sXY2peoY64Bij4MzeWR9e2rxPhqwOylM1kFu6klEsyIlxrviu+ydHpFRyLz
JNM0TofFCD4roazV6G5vrpubm5vZIrX/n2uur2+b2NW/gLIeWa+t44hs0kAT
g8dJ51lxacXK4E/y/GPTEu+xOmUONf5tcXC+pNkDJFFckaE5RBFHN9RFq62J
7NF3krBKSsLSSuLuYZTsJ+O/MF/z1Em0e8uZ+IZtq9bKmSYsVMbG9VLtcZke
8gHGvliYDbA5Qt596i3LmhhqrGIfCEUbeJ/kf/YBqONTFP0WLDmaLgSbJvSv
C7gK/YJ1PegPBfnrIHZnvdkPW1vd/4RRNKytF2dQfwd0j0fgBZzTbiV5KLT/
Napa+8Rx2/kuyx6t9eA69lVDEsvC8bmJi0ZLHgsjrr6+Hvm7Rnn6iGLF66PS
XZ28y0zm+eYBzxBnEVn5V6fSYF9sKH0UBNPuL89RiQtUCqFSoqi9KDreoV2q
VpQd3yq91nBhMcoSF9rv6MkKPtzsCk+js4KG0y3uJztH06fv/gpgeDbrINj+
pIrB4AJfUTzABJAIguRxCP7hUh1x+xh7vRr6MC+LH5vcd+EeycWkja/kONay
04OiXvBP0FC2NABNzlvUUlx7IZUUQZuPNdDtT0oxE/IL7c2tEqzWc89fWUoF
yHISrb1nUMvBKk6X5fsl5ORKkxWyFvIZ74x9Ku4F7WuyTFlbhFrBlIpS+xEc
PAPh75yzKeciMeFqoIom3k6RA4U4Kc8yYGkKF8k/ZAUjaDvUHTC0eUGyjIz5
uJCmgwmqNQZW/B9u3ajQSimeWDCxmgr50gN9r/ZR4yGmfOoWA8C5wgsKr1lv
oE/rpNFzsvawY+AUXbMNWrN4WHIHP78ruV7m9aJ+Hp+EfKmjZIxq7PitVFSL
z1g67JstRMGtls9SC/ncmGHeefNFqVMzi0CzLr5Jp4now7LaEueQf3eSN6pH
7KlOjQtmWjmlUKuLp/6i54b7KKMUc9QYR4JviNOolSLxyZLho53XxJms03t1
3THYybWjTK1uk/st4PGEOoQmGN5+9hwW2LiK/HZYnVofO9miYNyAFSEly8Xq
ydETIFZScYjnEMF31c5Qt4oZl6r+iYw9R2rX7TmhdCo2aMtZBDB5iq5nnXHY
SA5OYInaToXD0LPmWeYSTMzLPULzqtYThxwHgyPSk80GzkqxA55YZXFRhbdU
0dGZV+w926Lxu4YAriOeNSuT/mn+ikAaqumz38P4f5sxcEFe2qHp6Qb4GRMa
ikh6Oj35B6tYhVneCt5aU8Ei7b1bd57gQK14UqEphkyBrl7WOde3b3niHdz3
XN1WujjMiZo1qLFJnv7JhiTC1fsdhkfMy1NN7ejpWOunFny6uhZ/Kip8JjHs
hMjXpczdhvkyavVkdc37b+/z04EV/tR8LkgV685QiSCtp6nZpAj0wMPtUi7K
6BZPriFh6KGSVjumQw53Fmai3Gj7ABOSRP3UcUan/BFRwuSZvijIlfgTi89V
PtCoLOQ9LZeduSB1C/aXSEgFv+ogSZn7mF4lqMkkuIN/rJ+WQKbDCjpx00pc
v3ZHN2+/6Dnhnud4OTA1JHwoSFlBRvOdWsUX3sfKFNh3mYX8EkFwJYFgbVh+
hc96Ykw5rQMlO/EW6Fw2pAbMWxsXdWwvC+mo/beq6jBNpydDaIjHXpBMbyIL
+m6LdmXTueVrY+foeAZnbNG/rGA4bljNQpWVgaNACgLQHK9iKBJuyTz5oQAO
62zKzeNbGpHvMJd3kYrE3KbL5rWKxNCtArc54SdtKMWPsUZIfowS0huwZb1G
/DorXqaDJwQywKuW5KBf7ZssNIc4v8qGyRD8xVi/49E3gQPtvslKRw6qD2rI
PmjuzmXWKfvTOvH2mOT9dVaofXZZ0FHmKPKqVKWWDXHabckVSwtseNXqp7Ak
n3vCtyCNgWchy2cjdkhD9UyI52YpauYk7KJ4toiOkB5HwuV+DjnLbePIbDdc
F+lU9VUJcuiImc4DVsX3wRj+yiy7ljm4EBo1ZVHwmlJ9RPci26ESo/PaWsnJ
7OrS21FmT9A6RxTMUoMPw1mP6+gtiIystfpB6LFcFdkmQbzZvyYNTNEfIyRJ
90cQHcu5h0N8d4GOWnHZum7+8m/ONNbYr7xgm5gez66B3UJ3higxYWfeuDxa
kSxaIzNQYfWh0g2emblQNiu6jntSWlkd4xaOFe6CBaYpmyiiRp+xFBVE14D8
wDN85folVZJwrXu0Xu6oOmUta5lARwHd4xLza2H65aIjsZmJWTvoQMfg43dk
srKUmR8/GJQoH9Vz4rk9as7x3hWUO5Yyf+M00VF9wGrTPUS/gZCficmIK+P/
a+3deStbsjQx6jL5zPfj1runMd2SJ1tG1w/of5FVEgRC49ATPQJdFCGgQVQB
HCeN5jh0WA4dAp2ChgVcGnQSBCFQAmhQEg0aFGgc4wBngGMQCJ29I1bEF2t9
K/bOmiFwL5Pn7Ec81vrWe0UR/S8q8O3DPZ95+1EvWA6Qk3LVeRmk1WPrxQUR
57dQNA5Xn5hGuW6NU+bXZkf1zrJWG2gG6usxXKu8hkvY7NHLxGWSArJ3czcD
jY+V0lv3jE6PTai0wlCJpnYJzIrvfPHb+OC1uWuRkvpeXycay5RaIsrVYzA0
i8m9MqQ0LCUY2/aOj75uwTVrWOm3NmPOag5gvgsac9AvcCj+MVFjfFMroFXp
wlu3lGZdjaj7bQRBjRSKKmnY8201ojo1RtDP4WlGfqa6GTVfRZrddyKj0c6B
S1pqFxMSQqm6tbdSQZfej6C+Us/fG/F+4yk2vHd0obrfOtKHPmhTOVUTIBDu
UIy0G3SKuC3J4X+AQvlaYXndxktt1xKGgVE5AqmQZv6JimDv2Z4HE3w7EoS0
EbSyOuJ0Tr1q31jMk+3RXRs0lzbotTqJFRZe4hko6DELiWgyPOxt5bjf9mlc
SGtNvWfP8VG2ehfgeN4TlNGr5J91x9IYBxIPmCwcd9YSU1LepUVFDrhqxW90
Cjljf/+IcovF+owR1qPdDM9vuVRnObIqY9YcnZ0/Df/+RG7xcbicLS22OxQ1
4jO8Cnb7mloBADSItTQbxvkpI7CGNU9CVrzu5+mvodZlRivnbRDoSDDjNBpf
qSBOHkdAS77SifSM7Zg39K0ZYRSFv9/718pT2KKWUQ62FfW13wtR11Mo4mtx
v1+J5+RCcz1Lxz7VhDw1zkKw3xaPC5ZiIr4h0AeL4J8Jwxt161ep9OuGFPmu
fimIvgMOENrhazkRgAeXmp094PGbpzj8NnymoEZ7FvORI1FQgVMaM14/1GLD
o61WNgVLtCOM12IeSE2j/MmCIGMbTdZFHpkYGtoYs3nA2mSD0YeuaXOcUJb0
X2W595UHxFPAVuBtpYuSFJdbQrJ8gMu0oZBCdo6dCcju97uJ8FyKsSn8Ugrj
SRmElIFGMK1uYhIc7dT+1jLphvx6SNm/Y00Xml/V8mF6eSUWYv5tS4HR99C/
HZQ23+n7cfmZIoz3o7BxUmm0stl97DAB83boEL7SVS188Bx4O/BM+2/JbXgZ
hueALWVeUE/UfcyYhlklTLh8sgAmS6PFqOI9P3eAhahHNdyK6GHTm3AjeExw
8AgMlsnEwIMJd12d8LusYr7QO9RqPm23gjOsZ01YhnVVHJ1lqsmSJSbjNgNx
6QCjdiLsZb9vSW5RKof0vWcyyqjbryofjAYhmQRkW7NcF6bsS4trveReiitO
Bq0wtHCtOGzXk48XPybm5HX1xM4TTKfwm265GiUKWJ0K0f32Z5FX0m+4bmke
45lIXXDvfwm2YlkXm8Po52gBvqfJBIJ8hZt9NnzqpxVV/Bxycj2TCti0wrO6
9sRVuULYgRvD7ABhdiSuzjgXFUpYSA2L5U3Bv7EoGH24pfbmXZP5UfmCg6fx
Fa8TI3qNHAqpv9Yyz2wnw4qxjXq8U74t89uIBUun2ysFUY2QIR2Kn11mE27k
dd1Q/of9uNL/9C+XTGn3qwKZHOcYxYqI0r2ts8P8pMqBxhEc41W61ZD4bsVj
cDGYlab3CyHuRWocKNfFHer+zw++bJFsmgrDQUYOL0eCGzy+3XZqODmngXvl
6avV20FDkSc6JYgs08svHzCJKJtkvIY0X+iViUrnZmZjNB1r3oKkEOaH/75a
q7HtxJgA6/7Dg6U0eeqKBpaDzVHN2Gfs+CwvuWyM0td+/fg6IdZRTfSdTtGW
H3ieD6isR9i4KA1f+XEq2tVtaVYt3zkp6v5j29mUZMgtZxAboS85fXqX5myY
B1JphevZqedM2JdStVrGrJ/BNRvseyC42thpfRttQbKSRjxESarwDw1J5xAE
1rRE1DRUJGXim/wxYhVroJB1iXqodfCwmId6dL6mPLskJNQBn/VKRcZFqbTD
YWW/1WcE9w7+7VPJmklzsnGG0nxdK6P22pV8LSaW+P6vVpMGW9XDMJVVnTMO
kPmZNr114q2gwv/8738SBdPvNsR8UAxmWRHZWjUjDrHuaeq6SBCd4yxTdcyR
AmxKfrfEWmfGZ7G0O3ChIs1UcPkyB3ehw3vl0hniAjyUHPISKboRX3Lcl9d0
EnibNoFw8WTIxdWzakzj6nUbhgx8+bRWrTlnQIaWbUmN8gujEdiaoGyW0Z0i
Kf6cCveIrsXb5OU6iZonpKyNHpM8/EedU9RuFOcXvzm5twOmmmstrKl9Uvlp
1YvlmgZG60aTcDkNDq2q662kapkYqjH/a0aJFQXKlnWQWvMg94wPQTR5n28s
DJcbs3AXM7T0nkp6+Lgt94ukuWzzk76G4/leRytFbihgMFsYqZBAr673F0kp
Scw1lfGME2ckOiMABp10ytfam1VhoaMypW2vcREXpIjl1tF/H8yCen93tU+p
cqACsMrFOLy3zAUQp+JbOpr50jQxcR6TZsumcC3hZaJqJtiu7DFeMhp5hYSX
NQUW98g6HTU8j7l5RZ3WrhOWPMAYTq4dq3z6srZN3spAYY/GhU0idvHoKGTB
mGsgUmt4q5XcArRqzez76r1XPdG9QRZjMUOdR5ioMNK6r8ujusJaDY/NdWLh
eCZ43iLwxTI6xWI5QpvypuU7zKoDEPHKTwv6dip/pxCutYyZRpkL303PH9f4
e5Sy5C94adhKsDyt2lr+TH4sH9XP/jcO8OmMGKfuZYguMCau4jqZJuI1vxmS
q1kd1tNXYoAiHllqaa9pNXZX/2SOLak41tKBEQLJBiWDNRCOJA8L9069mRWk
CTZBtFnLJTwHkMVaByBvyMjp5is95yIKUz7eVLwmtB5zNixwM3vZyf/5zlgr
Uw8q2NrAeHO+u6R+ncMmbmiq669HaMclRkwXqt8pp9RgtPEXZP5j0oSZheD7
HjbzULXKoZiOBfUZMcVijZfVTPEkGnnFUJnDqEL8opl2skSbAvERr6tH4Grp
RA2rBrSPQWBcizv4MbFvb/D8IfYS92w9eLZWHdXXklfqgWnlN+AGILxcn7zT
/dS5xmWbhIpEcsQyr8g93rroNSdhHprizXIRr7KrYYVdu8TMA537IyVqf3Ya
P5qFjjgG58UxERGf9N7MnOkseudx77oR/2YYibAutJh461p8VKi1Ix0psEn1
OfrwYqFLNCadzp1UC/Q1BYvIDln4xTC2raATrfFDqn51ORCkn5Vej6ChBLwG
jhPkw4Ml8kA/m35TULI91DsSlRltx2Cy2pr6Dp6zxNLJmOrIzlgrjcCz65LJ
U6kXRDGgSVNDvTPlUf1Z/aAvKqVF7jmOyfrIVE1quA5O+weR0PJklC81Jg1n
KEhcl7i5cAH84gn3+CAkMuY+Z6iPGBUfb22jRiQ196L0CBuvr+27EhjbkUOV
Si8tuA2SP8vwmf/wfRtiieBd0j4/vQ/FMfOjZkV3ZngIKRP2NgDiKgWbZEOU
QqCBJm9iQxj1f+Nhw8ydIZ/ZUmkmit9RolEHfLqct8ebzwj3dP7D7rLF7yUn
v0cc4+rw6bQ6qmlQ7SphSCO5fnrR8D7JssaJZ0dfOYbJr4P0Dhx2cl9XGBk0
cgv4LHEY1tOpO88YmyxuE1e+BRxBGateJ3KnZ5I/1L3SAA7eweI4rgdcCR/I
BpJWh6MtWthaP9JwNXx87sdqjTHdFtmA+Aoq9tZmpyM6WaQHsVGyEm3OVO3S
19RJyKQCQXCkRzjf6DkXkV7P1JObAzMcmxPrl25xByAOFQ9tbrmHC04WDGZF
LazDY/ezlds1bGRMZ9xV6wC++Wt36ye1Rut5rIzIFr9ZSoZ0j/JeUxice8px
eXyn8wtN6xvqtZjYUGeGrFKavCrBUByBr136Chdhi2YD/CIZ8KQruLv2saI6
xA+4rpeqCCdhKBuoHFfT1Jzc2CxUq8NUSbH17sBIvLSesuFSkvs667NaRLZy
V6VcjWXEwH0MPRJmyhbMp5MwiWcm53UIz/MwnUzCdDZf+rt83TRMJtMwDyE3
TRBd1EqX4Wz7OINfGoYWcGESQ9sWjm6rV4xGU1otQyyvOGkRrsfPCQ/9FSfJ
6PX1kmCznyvFqRTFRM7xm/povEWXl+Cr5mj1Ciag/bjucMrG+7RYMhQlpG16
jXT71kXAXIqh9PT7JfC4Ig6dqV2CgfBew8KeexzHxfzYdQuBbCq8J5eyVWWQ
sAaPBH7y258awsZYohP8ajht+AbhvUx2pyjI4tP7s/0ei7a3t5eiGvgmbG0f
hUcZ9tNl2O6SWrb2w908fvRweRITXbZ24u/943A3DTLI8PwQviw+3j+9yQMP
8/twuPjs4OvDEl53vN8/YjHw7v+bYWfnIFw+zjP7hvlDONnf6l+zs9P93g7H
F/cxIMGbt+riXRab9dOcfjT3MXZXW2j+Vtc3e5Kz6+zeG6JlhqtWToQ0qvCZ
PY2PxTSYrP9NWnWiHuRKIfQ3Lz75pG7BJMlXZAZjyy5a+WyWGFYriAeU82oT
WkqS7Iey7McenMy2XdKvWiTr9ycao4IzZWygm0tbVfy52lhbpzIcmcQ6A6Bs
7Wj4XfQgtBpptfyRYzrSeSSl7f0h727KBlz62eLXNJwfRuDaPvgSDg8OwkH/
X8Tbo+tJP9LnjK8HPb4+XR713++f3SYAjMC5tX0cJp2lHtcmPn67v/Tg7FbM
ju7qL9vxrWe3E1n0yfVx/9HuyW1Wf8MC4o+244tvpvFd9+eHMjiposCCbN0X
pFHCNRRziwv1tiKfVkjQzxX3D1dmzhm74S8q4smO57Xsi5Efi9MtP9k7d2pO
QEHTLRNRrLSFJXXAhjBF5IMaPfpeBJQx/CQBL7yeQI3fxo8JtIGDN4yfUZ/o
amNgw+zstVT0jKahtcfTkhBXUW+VaYAPdGzbpbfkOr+1Eiv0r5XNz5IG8JLO
Et2qdpYc6v0g+RgPDa1iifSx+JlFAD047w1n8ZAvwCwcfrkIoiM+z2dh1v2x
0CZ7oNw6DA/PQdZ4dht11S+XTxm/4qMzeMbnVMg5zRri7O5UQedyeEwweXD+
kEGkA+TTXkH90unOmY2gHZluQdKqxhposqBPDk1bxszDjQRH+CR8G9JrA0VF
v8NYVk5oWsvULj84lwGXWcuz2zuOr25ZL2ImdHzPq/t230PP8W5AdZK0FVax
IEcw1gmZpp4JWHq9Ch8SVHJMSl9XdLupOGU8rJck/HuoWaKxV2ovNS5ww9zK
6bYtNU/63iHa4DV1HxJv2Azfy5ophHyThtV93cF7f1r5whqw+WXcAPLLF9or
mk7L+SEhMK6aUH5HWyzi5mzz2I4nzAEkcM9gLX1WxSQliyvBfQHQWfjaWfq7
pwsoDeJXmd+dRR368CI8hyBXz24jLG/tni3uC2IIVch+chq+7BREF/MQER1f
frYb3QsXj8/48elufMTp3QxBnVvn2cE36uSztoU1oEFr04c4dtPg3rlR9pyP
DeEI/D5RyA+JCXtjLB5PpudLdZVRLdLGRCQ4Ydo8BFde+sUh7aIT1OtbJ0vZ
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
euz/f1ffM3RMGd6z9F/9/zU/a48=\
\>"]],

Cell[TextData[{
 "  The standard methods return uniformly distributed random numbers -- that \
is, they are equally likely to lie anywhere within the specified interval. \
Often one wants numbers selected from some other distribution (commonly, the \
normal or Gaussian distribution, ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") \[Proportional] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"exp", "(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}], "/", "2"}], 
     SuperscriptBox["\[Sigma]", "2"]}], ")"}], TraditionalForm]]],
 " with mean \[Mu] and standard deviation \[Sigma]). There are various ways \
of achieving this, depending on the form of the distribution one is trying to \
sample.  For a normal distribution, one can use the power of the central \
limit theorem, which tells us that the average of a large number of \
independent random numbers with well-defined mean and variance has a normal \
distribution. This suggests the following scheme:"
}], "Text",
 CellChangeTimes->{{3.634886373563094*^9, 3.634886414648837*^9}, {
  3.634979376833061*^9, 3.6349794683430443`*^9}, {3.6349796954711657`*^9, 
  3.634979720443633*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"norm", "[", 
   RowBox[{"\[Mu]_", ",", "\[Sigma]_", ",", "n_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Mu]", "-", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"3", "n"}], "]"}], " ", "\[Sigma]"}]}], ",", 
        RowBox[{"\[Mu]", "+", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"3", "n"}], "]"}], " ", "\[Sigma]"}]}]}], "}"}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}], "/", 
   "n"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pp", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"norm", "[", 
      RowBox[{"1", ",", "1", ",", "10"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Mean", "[", "pp", "]"}], "\[IndentingNewLine]", 
 RowBox[{"StandardDeviation", "[", "pp", "]"}]}], "BoxedProgram",
 CellChangeTimes->{{3.634820975269177*^9, 3.634820994801298*^9}, {
  3.634969416860157*^9, 3.634969423175178*^9}}],

Cell[BoxData["1.0028466049811617`"], "Output",
 CellChangeTimes->{
  3.444974971539*^9, 3.444975736034*^9, 3.444976915907*^9, 
   3.4772904665666*^9, {3.634820990053787*^9, 3.634820998967093*^9}, 
   3.634886444545507*^9, 3.634969433703272*^9}],

Cell[BoxData["1.0028261514812198`"], "Output",
 CellChangeTimes->{
  3.444974971539*^9, 3.444975736034*^9, 3.444976915907*^9, 
   3.4772904665666*^9, {3.634820990053787*^9, 3.634820998967093*^9}, 
   3.634886444545507*^9, 3.634969433906756*^9}],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "The aim is to produce random numbers centred on \[Mu] and with standard \
deviation \[Sigma]. If we sample twice from a uniform distribution between \
\[Mu]-",
 StyleBox["s",
  FontSlant->"Italic"],
 " and \[Mu]+",
 StyleBox["s",
  FontSlant->"Italic"],
 ", with results ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]]],
 ", then the probability of getting a result ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", "x"}], "=", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["x", "1"], "+", 
      SubscriptBox["x", "2"]}], ")"}]}], TraditionalForm]]],
 " between ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["x",
  FontSlant->"Italic"],
 "+\[Delta]",
 StyleBox["x",
  FontSlant->"Italic"],
 " (which must lie between \[Mu]-s and \[Mu]+s) is the area of a stripe in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "1"], "-", 
    SubscriptBox["x", "2"]}], TraditionalForm]]],
 " space:"
}], "Text",
 CellChangeTimes->{{3.634847885735442*^9, 3.634847890331333*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 GraphicsBox[{LineBox[{{0, 0}, {0, 1}, {1, 1}, {1, 0}, {0, 0}}], 
   LineBox[{{0.25, 1}, {1, 0.25}}], LineBox[{{0.26, 1}, {1, 0.26}}], {}, 
   {Arrowheads[{{1, 1, 
       GraphicsBox[
        PolygonBox[{{0, 0}, {-0.05, 0.0125}, {-0.05, 0}, {-0.05, -0.0125}, {0,
           0}}]]}}], ArrowBox[{{1.2, 0.255}, {1.01, 0.255}}]}, 
   InsetBox["\[Delta]x", {1.2499999999999996`, 0.2574467997977137}], 
   {RGBColor[0, 0, 1], 
    {Arrowheads[{{1, 1, 
        GraphicsBox[
         PolygonBox[{{0, 0}, {-0.05, 0.0125}, {-0.05, 0}, {-0.05, -0.0125}, {
           0, 0}}]]}}], ArrowBox[{{0.5, 0.5}, {1.1, 0.5}}]}, 
    {Arrowheads[{{1, 1, 
        GraphicsBox[
         PolygonBox[{{0, 0}, {-0.05, 0.0125}, {-0.05, 0}, {-0.05, -0.0125}, {
           0, 0}}]]}}], ArrowBox[{{0.5, 0.5}, {0.5, 1.1}}]}, InsetBox[
     SubscriptBox["x", "2"], {0.44721508982814095`, 1.102446799797713}], 
    InsetBox[
     RowBox[{"(", 
      RowBox[{"\[Mu]", ",", "\[Mu]"}], ")"}], {0.45566849958849115`, 0.4499999999999994},
      Automatic, {0.18101916117082595`, 0.05382959554970405}, {{1., 0.}, {0., 
     1.}}]}, InsetBox[
    GraphicsBox[{},
     ContentSelectable->True,
     ImageSize->{480, 360},
     PlotRange->{{0, 480/360}, {0, 1}}], Scaled[{0.5, 0.5}], Center, 
    Scaled[{0.5, 0.5}]], InsetBox[
    StyleBox[
     TagBox[
      SubscriptBox["x", "1"],
      "RawBoxes"],
     TextAlignment->Center,
     FontFamily->"Times",
     Background->GrayLevel[1.]], {1.0489015657028948`, 0.4249811077753023}, {
    Left, Baseline}, {0.04055917484086799, 0.05464028203074144}, {{1., 0.}, {
    0., 1.}},
    Alignment->{Left, Top}], 
   {RGBColor[0, 0, 1], InsetBox[
     RowBox[{"(", 
      RowBox[{"\[Mu]", ",", 
       RowBox[{
        RowBox[{"2", "x"}], "-", "\[Mu]"}]}], ")"}], {0.6256090757766121, 0.760462729190172},
      Automatic, {0.2675454008313443, 0.09421589096373034}, {{1., 0.}, {0., 
     1.}}]}},
  AspectRatio->1,
  ImageMargins->0.,
  ImagePadding->{{0., 58.967006}, {0.666667, 2.210904}},
  ImageSize->{Automatic, 323.9105650000002},
  PlotRange->{{-0.02604166666666667, 
   1.2760416666666667`}, {-0.022000000000000006`, 1.122}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.634974747665813*^9, 3.634974750382826*^9}, {
   3.634974879627901*^9, 3.6349750217702417`*^9}, {3.634975307053898*^9, 
   3.634975307462236*^9}, {3.6349762936887283`*^9, 3.634976295701808*^9}, {
   3.634976515842721*^9, 3.634976542281704*^9}, {3.634976575716956*^9, 
   3.634976670481697*^9}, 3.6977840684294367`*^9, 3.6977841847385597`*^9, 
   3.6977842227990847`*^9, {3.697784255464048*^9, 3.6977842574886293`*^9}}],

Cell[TextData[{
 "  In other words, we can make x with a range of values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["x", "1"], ",", 
     SubscriptBox["x", "2"]}], ")"}], TraditionalForm]]],
 " from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "-", "\[Mu]", "-", "s"}], ",", " ", 
     RowBox[{"\[Mu]", "+", "s"}]}], ")"}], TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Mu]", "+", "s"}], ",", " ", 
     RowBox[{
      RowBox[{"2", "x"}], "-", "\[Mu]", "-", "s"}]}], ")"}], 
   TraditionalForm]]],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Mu]", "\[LessEqual]", " ", "x", "\[LessEqual]", " ", 
    RowBox[{"\[Mu]", "+", "s"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Mu]", "-", "s"}], ",", 
     RowBox[{
      RowBox[{"2", "x"}], "-", "\[Mu]", "+", "s"}]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "x"}], "-", "\[Mu]", "+", "s"}], ",", 
     RowBox[{"\[Mu]", "-", "s"}]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Mu]", "-", "s"}], "\[LessEqual]", " ", "x", "\[LessEqual]", 
    " ", "\[Mu]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". The probability ",
 StyleBox["p(x)",
  FontSlant->"Italic"],
 " for ",
 StyleBox["x",
  FontSlant->"Italic"],
 " between ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["x+",
  FontSlant->"Italic"],
 "\[Delta]",
 StyleBox["x",
  FontSlant->"Italic"],
 " is proportional to the length of the diagonal strip equal to  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", 
    SqrtBox["2"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"s", "-"}], "|", 
      RowBox[{"x", "-", "\[Mu]"}], "|"}], ")"}]}], TraditionalForm]]],
 ", defined only for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Mu]", "-", "s"}], "\[LessEqual]", " ", "x", "\[LessEqual]", 
    " ", 
    RowBox[{"\[Mu]", "+", "s"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Thus ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "(", "x", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " increases linearly from ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "(", 
     RowBox[{"\[Mu]", "-", "s"}], ")"}], "=", "0"}], TraditionalForm]]],
 "  to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"p", "(", "\[Mu]", ")"}],
     FontSlant->"Plain"], 
    StyleBox["=",
     FontSlant->"Plain"], 
    RowBox[{"2", 
     SqrtBox["2"], "s"}]}], TraditionalForm]],
  FontSlant->"Italic"],
 ", and decreasing linearly from ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     RowBox[{"p", "(", "\[Mu]", ")"}],
     FontSlant->"Plain"], 
    StyleBox["=",
     FontSlant->"Plain"], 
    RowBox[{"2", 
     SqrtBox["2"], "s"}]}], TraditionalForm]],
  FontSlant->"Italic"],
 " to  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "(", 
     RowBox[{"\[Mu]", "+", "s"}], ")"}], "=", "0"}], TraditionalForm]]],
 ",  in simple words it is a triangular probability distribution centred on \
\[Mu] and with width ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "s"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". If we move to higher dimensions there are similar results.\n  For the \
two-dimensional case, the centred variance ",
 StyleBox["V",
  FontFamily->"Courier"],
 " can easily be calculated "
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQ7dT+1/G/yGvHjGJ7LxAt4JHpB6ILWH4GgujKMt4w
EP1xQkwsiJ6VJZEKonO4+KtA9LdrInUgWkMheSaIbtjCEaMp+trxU+K8XBDd
9uFLIYje96WtG0T/YCjvB9F3yjOng2httvPnQfSp+1wXQHQDc8c1EH3IbNsd
sH5Zx08Q8759B9EFK1yKtIH0kpidlSB6n8mmWhA9mUFmOog2TFCZA6KjO7fN
BdFFPc8Wg+g55UWbQHTOqexDIDrOZwqYZqiPOQ6i7VJLL4FoVzlvPh0g/arq
rAiI/leTJQmiWeZXgOkL9wvkQPRLnucmIPrepIMWIHqJZqAViBaadN4ORJ8t
+QOmtyVVNoLo3rxeMA0A/7ylIA==
  "],
 FontColor->RGBColor[0, 0, 1]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", "x_", "]"}], ":=", 
   RowBox[{"2", 
    RowBox[{"Sqrt", "[", "2", "]"}], 
    RowBox[{"(", 
     RowBox[{"s", "-", 
      RowBox[{"Abs", "[", 
       RowBox[{"x", "-", "\[Mu]"}], "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"normval", "=", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"p", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"\[Mu]", "-", "s"}], ",", 
       RowBox[{"\[Mu]", "+", "s"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"u", "=", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"x", " ", 
     RowBox[{
      RowBox[{"p", "[", "x", "]"}], "/", "normval"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"\[Mu]", "-", "s"}], ",", 
      RowBox[{"\[Mu]", "+", "s"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"V", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "u"}], ")"}], "2"], " ", 
       RowBox[{
        RowBox[{"p", "[", "x", "]"}], "/", "normval"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"\[Mu]", "-", "s"}], ",", 
        RowBox[{"\[Mu]", "+", "s"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"s", ">", "0"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{
  3.634887423165299*^9, {3.634887919523676*^9, 3.6348880355834618`*^9}, {
   3.6348880753574467`*^9, 3.63488823412731*^9}, {3.634979846372941*^9, 
   3.6349798478518553`*^9}, {3.697775535622607*^9, 3.6977755778173437`*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData["\[Mu]"], "Output",
 CellChangeTimes->{
  3.444974972043*^9, 3.444975736957*^9, 3.444976916898*^9, 3.4772904675226*^9,
    3.634888114781321*^9, 3.634888173829854*^9, {3.634888224608659*^9, 
   3.634888241413809*^9}, {3.697775592459241*^9, 3.697775605692136*^9}}],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["s", "2"], "6"]], "Output",
 CellChangeTimes->{
  3.444974972043*^9, 3.444975736957*^9, 3.444976916898*^9, 3.4772904675226*^9,
    3.634888114781321*^9, 3.634888173829854*^9, {3.634888224608659*^9, 
   3.634888241413809*^9}, {3.697775592459241*^9, 3.6977756082667017`*^9}}]
}, Open  ]],

Cell[TextData[{
 "In order to get the same standard deviation of \[Sigma] as the normal \
distribution, we need to set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", " ", "=", " ", 
    RowBox[{
     SqrtBox["6"], "\[Sigma]"}]}], TraditionalForm]]],
 " (",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", " ", "=", " ", 
    RowBox[{
     SqrtBox[
      RowBox[{"3", "n"}]], "\[Sigma]"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "2"}], TraditionalForm]]],
 ").\n  So our functions samples ",
 StyleBox["n",
  FontSlant->"Italic"],
 " times from a uniform distribution between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Mu]", "-", 
    RowBox[{
     SqrtBox[
      RowBox[{"3", "n"}]], "\[Sigma]"}]}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Mu]", "+", 
     RowBox[{
      SqrtBox[
       RowBox[{"3", "n"}]], "\[Sigma]"}]}], ","}], TraditionalForm]]],
 " and divide by ",
 StyleBox["n",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.634820661960009*^9, 3.634820663991001*^9}, {
  3.6348882811705313`*^9, 3.6348883950317087`*^9}, {3.634972987789627*^9, 
  3.63497299644003*^9}, {3.6349730386601877`*^9, 3.634973138244453*^9}, {
  3.634973197218206*^9, 3.634973236449853*^9}, {3.6349732707242517`*^9, 
  3.6349732708573*^9}, {3.634979327471147*^9, 3.63497933660898*^9}, {
  3.634979725867708*^9, 3.63497977813376*^9}, {3.634979907001109*^9, 
  3.634979918157045*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"norm", "[", 
   RowBox[{"\[Mu]_", ",", "\[Sigma]_", ",", "n_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "n"], 
    RowBox[{"RandomReal", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Mu]", "-", 
        RowBox[{
         SqrtBox[
          RowBox[{"3", " ", "n"}]], " ", "\[Sigma]"}]}], ",", 
       RowBox[{"\[Mu]", "+", 
        RowBox[{
         SqrtBox[
          RowBox[{"3", " ", "n"}]], " ", "\[Sigma]"}]}]}], "}"}], "]"}]}], 
   "n"]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
use the function to set up a table of 1000 samples from the resulting \
distribution\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"pp", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"norm", "[", 
      RowBox[{"1", ",", "1", ",", "10"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "1000"}], "}"}]}], "]"}]}], ";"}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
and calculate the mean and standard deviation, which we see agree well with \
our target values.\
\>", "Text",
 CellChangeTimes->{3.634819572889792*^9},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[{
 RowBox[{"Mean", "[", "pp", "]"}], "\[IndentingNewLine]", 
 RowBox[{"StandardDeviation", "[", "pp", "]"}]}], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]],

Cell[CellGroupData[{

Cell[" ", "Subsubsection"],

Cell[TextData[StyleBox["",
 FontFamily->"Courier New",
 FontColor->RGBColor[0.6, 0.4, 0.2]]], "Text",
 CellChangeTimes->{{3.4772905372525997`*^9, 3.4772905761556*^9}, {
   3.4772906239816*^9, 3.4772906329266*^9}, 3.6348207040831757`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{"Histogram", "[", 
   RowBox[{"pp", ",", "50"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4772905143146*^9, 3.4772905293286*^9}, {
   3.4772905798836*^9, 3.4772905842785997`*^9}, 3.4772906190106*^9, {
   3.634888446568819*^9, 3.634888453724124*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.434], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.434], Thickness[Small]}], RectangleBox[{-2.6, 0}, {-2.4, 2},
      RoundingRadius->0], RectangleBox[{-2.4, 0}, {-2.2, 3},
      RoundingRadius->0], RectangleBox[{-2.2, 0}, {-2., 5},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.8, 10},
      RoundingRadius->0], RectangleBox[{-1.8, 0}, {-1.6, 25},
      RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 35},
      RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 54},
      RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 99},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 168},
      RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 196},
      RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 259},
      RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 371},
      RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 445},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 520},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 575},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 726},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 746},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 792},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 762},
      RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 759},
      RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 710},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 589},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 501},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.2, 446},
      RoundingRadius->0], RectangleBox[{2.2, 0}, {2.4, 374},
      RoundingRadius->0], RectangleBox[{2.4, 0}, {2.6, 273},
      RoundingRadius->0], RectangleBox[{2.6, 0}, {2.8, 195},
      RoundingRadius->0], RectangleBox[{2.8, 0}, {3., 131},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.2, 89},
      RoundingRadius->0], RectangleBox[{3.2, 0}, {3.4, 58},
      RoundingRadius->0], RectangleBox[{3.4, 0}, {3.6, 35},
      RoundingRadius->0], RectangleBox[{3.6, 0}, {3.8, 13},
      RoundingRadius->0], RectangleBox[{3.8, 0}, {4., 20},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.2, 10},
      RoundingRadius->0], RectangleBox[{4.2, 0}, {4.4, 2},
      RoundingRadius->0], RectangleBox[{4.6, 0}, {4.8, 1},
      RoundingRadius->0], RectangleBox[{4.8, 0}, {5., 1},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-2.7520000000000002`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->0.,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  PlotRange->{{-2.6, 5.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.4449749741549997`*^9, 3.444975738676*^9, 3.444976918659*^9, 
   3.4772904741306*^9, 3.634821032100704*^9, {3.634888448967128*^9, 
   3.634888455284782*^9}}]
}, Open  ]],

Cell[TextData[{
 "This approach takes several evaluations of the uniformly distributed random \
number generator for each sample from the normal distribution. A more \
efficient method is the ",
 StyleBox["Box-Muller algorithm",
  FontColor->RGBColor[1, 0, 0]],
 ". The trick here bears some relationship to the method which is used to \
evaluate the integral of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"exp", "(", 
    RowBox[{"-", 
     SuperscriptBox["x", "2"]}], ")"}], TraditionalForm]]],
 ", that is, to move into two independent dimensions. If the distribution \
functions for ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " each have the form \n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "(", "x", ")"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{
       SqrtBox[
        RowBox[{"2", "\[Pi]"}]], "\[Sigma]"}]], 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         SuperscriptBox["x", "2"]}], "/", "2"}], 
       SuperscriptBox["\[Sigma]", "2"]}], ")"}]}]}], TraditionalForm]]],
 " \nthen the probability of finding ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " in the box of size ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    StyleBox[
     RowBox[{"dx", ",", "dy"}],
     FontSlant->"Italic"], ")"}], TraditionalForm]]],
 " at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", " ", "y"}], ")"}], TraditionalForm]]],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"p", "(", 
      RowBox[{"x", ",", "y"}], ")"}], "dx", " ", "dy"}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"2", " ", "\[Pi]", " ", 
       SuperscriptBox["\[Sigma]", "2"]}]], 
     RowBox[{"exp", "(", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["y", "2"]}], 
        RowBox[{"2", " ", 
         SuperscriptBox["\[Sigma]", "2"]}]]}], ")"}], " ", 
     StyleBox[
      RowBox[{"d", 
       StyleBox["x",
        FontSlant->"Italic"]}]], " ", 
     StyleBox[
      RowBox[{"d", 
       StyleBox["y",
        FontSlant->"Italic"]}]]}]}], TraditionalForm]]],
 ",\nso that the probability of finding ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 " in the annulus between ",
 StyleBox["r",
  FontSlant->"Italic"],
 " and ",
 StyleBox["r",
  FontSlant->"Italic"],
 "+d",
 StyleBox["r",
  FontSlant->"Italic"],
 " (see figure)"
}], "Text",
 CellChangeTimes->{{3.634819613285791*^9, 3.6348196578304377`*^9}, {
  3.634819697126329*^9, 3.634819819357287*^9}, {3.634819868527165*^9, 
  3.634819902207336*^9}, {3.634819940112446*^9, 3.634819942135997*^9}, {
  3.634819976377738*^9, 3.6348200006667233`*^9}, {3.6348200937540913`*^9, 
  3.634820129025724*^9}, {3.634820174401493*^9, 3.634820186501442*^9}, {
  3.6348202781727257`*^9, 3.634820324192067*^9}, {3.6348885876136503`*^9, 
  3.634888589603063*^9}, {3.634979531536261*^9, 3.634979533105022*^9}, {
  3.634979785950728*^9, 3.6349797866813707`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "2"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "2"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Circle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "1.5`"}], "]"}], ",", 
      RowBox[{"Circle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "1.7`"}], "]"}], ",", 
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.5`", ",", "0.5`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.5`", ",", "0.5`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["1.5`", 
            SqrtBox["2"]], ",", 
           FractionBox["1.5`", 
            SqrtBox["2"]]}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Arrowheads", "[", "Medium", "]"}], ",", 
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           FractionBox["1.5`", 
            SqrtBox["2"]], ",", 
           FractionBox["1.5`", 
            SqrtBox["2"]]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["1.7`", 
            SqrtBox["2"]], ",", 
           FractionBox["1.7`", 
            SqrtBox["2"]]}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           FractionBox["1.7`", 
            SqrtBox["2"]], ",", 
           FractionBox["1.7`", 
            SqrtBox["2"]]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["1.5`", 
            SqrtBox["2"]], ",", 
           FractionBox["1.5`", 
            SqrtBox["2"]]}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<r\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "0.55`"}], "}"}]}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<dr\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1.3`", ",", "1.3`"}], "}"}]}], "]"}], ",", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1.6`", ",", "1.6`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1.8`", ",", "1.6`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1.8`", ",", "1.8`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1.6`", ",", "1.8`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1.6`", ",", "1.6`"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<dx\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1.7`", ",", "1.45`"}], "}"}]}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<dy\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1.4`", ",", "1.7`"}], "}"}]}], "]"}], ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"FontSlant", "\[Rule]", "\"\<Italic\>\""}], "}"}]}], ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"FontSlant", "\[Rule]", "\"\<Italic\>\""}], "}"}]}], ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"FontSlant", "\[Rule]", "\"\<Italic\>\""}], "}"}]}], ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"FontSlant", "\[Rule]", "\"\<Italic\>\""}], "}"}]}]}], "}"}], 
    "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.44497502334*^9, 3.4449750441879997`*^9}, {
  3.444975136498*^9, 3.444975141426*^9}, {3.4449751767*^9, 
  3.4449751885220003`*^9}, {3.444975238546*^9, 3.444975324856*^9}}],

Cell[BoxData[
 GraphicsBox[{LineBox[{{-2, 0}, {2, 0}}], LineBox[{{0, -2}, {0, 2}}], 
   CircleBox[{0, 0}, 1.5], CircleBox[{0, 0}, 1.7], 
   ArrowBox[{{0.5, 0.5}, {0, 0}}], 
   ArrowBox[{{0.5, 0.5}, {1.0606601717798212`, 1.0606601717798212`}}], 
   {Arrowheads[Medium], 
    ArrowBox[{{1.0606601717798212`, 1.0606601717798212`}, {
     1.2020815280171306`, 1.2020815280171306`}}], 
    ArrowBox[{{1.2020815280171306`, 1.2020815280171306`}, {
     1.0606601717798212`, 1.0606601717798212`}}], 
    InsetBox["\<\"r\"\>", {0.4, 0.55}], InsetBox["\<\"dr\"\>", {1.3, 1.3}], 
    LineBox[{{1.6, 1.6}, {1.8, 1.6}, {1.8, 1.8}, {1.6, 1.8}, {1.6, 1.6}}], 
    InsetBox["\<\"dx\"\>", {1.7, 1.45}], InsetBox["\<\"dy\"\>", {1.4, 1.7}], 
    StyleBox[{},
     BaseStyle -> {FontSlant -> "Italic"}]}},
  AspectRatio->Automatic]], "Output",
 CellChangeTimes->{
  3.444974974446*^9, 3.444975071158*^9, 3.444975142672*^9, 
   3.444975189891*^9, {3.444975251625*^9, 3.444975325726*^9}, 
   3.4449757387939997`*^9, 3.4449769188120003`*^9, 3.4772904744156*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{
     "is", " ", "given", " ", "by", " ", "changing", " ", "to", " ", "polar", 
      " ", "coordinates"}],
     FontFamily->"Times New Roman"], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      StyleBox[
       RowBox[{"2", " ", "\[Pi]", " ", 
        StyleBox["r",
         FontSlant->"Italic"], " ", 
        StyleBox["p",
         FontSlant->"Italic"], 
        RowBox[{"(", 
         StyleBox["r",
          FontSlant->"Italic"], ")"}], " ", 
        RowBox[{"d", 
         StyleBox["r",
          FontSlant->"Italic"]}]}],
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman",
       FontSlant->"Italic"], 
      StyleBox["=",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      RowBox[{
       FractionBox[
        StyleBox[
         RowBox[{"2", " ", "\[Pi]"}],
         FontFamily->"Times New Roman"], 
        StyleBox[
         RowBox[{"2", " ", "\[Pi]", " ", 
          SuperscriptBox["\[Sigma]", "2"]}],
         FontFamily->"Times New Roman"]], 
       StyleBox[" ",
        FontFamily->"Times New Roman"], 
       StyleBox["exp",
        FontFamily->"Times New Roman"], 
       StyleBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox[
             StyleBox["r",
              FontFamily->"Times New Roman",
              FontSlant->"Italic"], "2"]}], "/", "2"}], 
          SuperscriptBox["\[Sigma]", "2"]}], ")"}],
        FontFamily->"Times New Roman"], 
       StyleBox[" ",
        FontFamily->"Times New Roman"], 
       StyleBox["r",
        FontFamily->"Times New Roman",
        FontSlant->"Italic"], 
       StyleBox[" ",
        FontFamily->"Times New Roman"], 
       StyleBox[
        StyleBox[
         RowBox[{"d", 
          StyleBox["r",
           FontSlant->"Italic"]}]],
        FontFamily->"Times New Roman"]}]}], 
     StyleBox[",",
      FontFamily->"Times New Roman"], 
     StyleBox["\[IndentingNewLine]",
      FontFamily->"Times New Roman"], 
     StyleBox[
      RowBox[{
      "and", " ", "the", " ", "probability", " ", "of", " ", "finding", " ", 
       RowBox[{"(", 
        RowBox[{
         StyleBox["x",
          FontSlant->"Italic"], ",", 
         StyleBox["y",
          FontSlant->"Italic"]}], ")"}], " ", "between", " ", "infinity", " ",
        "and", " ", "a", " ", "distance", " ", 
       StyleBox["R",
        FontSlant->"Italic"], " ", "from", " ", "the", " ", "origin", " ", 
       "is"}],
      FontFamily->"Times New Roman"]}], "\[IndentingNewLine]", 
    StyleBox[
     RowBox[{
      RowBox[{
       SubsuperscriptBox["\[Integral]", "R", "\[Infinity]"], 
       RowBox[{
        StyleBox[
         FractionBox[
          StyleBox["r",
           FontFamily->"Times New Roman",
           FontSlant->"Italic"], 
          SuperscriptBox["\[Sigma]", "2"]],
         FontSlant->"Italic"], "  ", "exp", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox[
             StyleBox["r",
              FontFamily->"Times New Roman",
              FontSlant->"Italic"], "2"]}], "/", "2"}], " ", 
          SuperscriptBox["\[Sigma]", "2"]}], ")"}], 
        RowBox[{"\[DifferentialD]", 
         StyleBox["r",
          FontSlant->"Italic"]}]}]}], " ", "=", "  ", 
      RowBox[{
       RowBox[{"exp", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox[
             StyleBox["R",
              FontFamily->"Times New Roman",
              FontSlant->"Italic"], "2"]}], "/", "2"}], 
          SuperscriptBox["\[Sigma]", "2"]}], ")"}]}], " ", "=", " ", 
       RowBox[{"p", 
        RowBox[{
         RowBox[{"(", 
          StyleBox["R",
           FontSlant->"Italic"], ")"}], ".", "\[IndentingNewLine]", "Now"}], 
        " ", "choose", " ", "two", " ", "uniformly", " ", "distributed", " ", 
        "random", " ", "numbers", " ", "in", " ", "the", " ", "interval", " ", 
        RowBox[{"(", 
         RowBox[{"0", ",", "1"}]}]}]}]}],
     FontFamily->"Times New Roman"]}], 
   StyleBox["]",
    FontFamily->"Times New Roman"]}], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  RowBox[{
   RowBox[{
    StyleBox["t",
     FontFamily->"Times New Roman",
     FontSlant->"Italic"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["and",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["u",
     FontFamily->"Times New Roman",
     FontSlant->"Italic"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["and",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["define",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["s",
     FontFamily->"Times New Roman",
     FontSlant->"Italic"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["such",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["that",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["s",
     FontSlant->"Italic"]}], 
   StyleBox["=",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   RowBox[{
    RowBox[{
     SuperscriptBox["t", "2"], 
     StyleBox[
      RowBox[{"+", 
       SuperscriptBox[
        StyleBox["u",
         FontFamily->"Times New Roman",
         FontSlant->"Italic"], "2"]}],
      FontFamily->"Times New Roman"]}], 
    StyleBox["\[LessEqual]",
     FontFamily->"Times New Roman"], 
    StyleBox["1",
     FontFamily->"Times New Roman"]}]}], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox["\[IndentingNewLine]",
   FontFamily->"Times New Roman"], 
  StyleBox[
   RowBox[{"in", " ", "other", " ", "words"}],
   FontFamily->"Times New Roman"], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox[" ",
   FontFamily->"Times New Roman"], 
  RowBox[{
   StyleBox["reject",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["the",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["random",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["numbers",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["t",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["and",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["u",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["if",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["they",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["do",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["not",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["satisfy",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["this",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox[
    RowBox[{"condition", ".", "  ", "We"}],
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["can",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["always",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["find",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["a",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["value",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["of",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["R",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["such",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["that",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["the",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["area",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["under",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["the",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["curve",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["p",
    FontFamily->"Times New Roman"], 
   StyleBox[
    RowBox[{"(", "r", ")"}],
    FontFamily->"Times New Roman"], 
   StyleBox["from",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["R",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["to",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["infinity",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["is",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox["s",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   RowBox[{
    StyleBox["(",
     FontFamily->"Times New Roman"], 
    RowBox[{
     StyleBox[
      RowBox[{"since", "  ", "0"}],
      FontFamily->"Times New Roman"], 
     StyleBox["<",
      FontFamily->"Times New Roman"], 
     StyleBox["s",
      FontFamily->"Times New Roman"], 
     StyleBox["\[LessEqual]",
      FontFamily->"Times New Roman"], "1"}], 
    StyleBox[")",
     FontFamily->"Times New Roman"]}]}], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox[" ",
   FontFamily->"Times New Roman"], 
  StyleBox[
   RowBox[{"that", " ", "is"}],
   FontFamily->"Times New Roman"], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox[" ",
   FontFamily->"Times New Roman"], 
  StyleBox["\[IndentingNewLine]",
   FontFamily->"Times New Roman"], 
  StyleBox[
   RowBox[{
    StyleBox["R",
     FontSlant->"Italic"], "=", 
    RowBox[{"\[Sigma]", 
     SqrtBox[
      RowBox[{
       RowBox[{"-", "2"}], "  ", "ln", 
       RowBox[{"(", "s", ")"}]}]]}]}],
   FontFamily->"Times New Roman"], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox["\[IndentingNewLine]",
   FontFamily->"Times New Roman"], 
  StyleBox[
   RowBox[{
   "a", " ", "random", " ", "point", " ", "on", " ", "the", " ", "circle", 
    " ", "of", " ", "radius", " ", 
    StyleBox["R",
     FontSlant->"Italic"], " ", "will", " ", "give", " ", "two", " ", 
    "independent", " ", "random", " ", "numbers", " ", "from", " ", "a", " ", 
    "normal", " ", "distribution", " ", "of", " ", "standard", " ", 
    "deviation", " ", 
    RowBox[{"\[Sigma]", ".", " ", "Because"}], " ", "of", " ", "the", " ", 
    "way", " ", 
    StyleBox["s",
     FontSlant->"Italic"], " ", "was", " ", "chosen", " ", "we", " ", 
    "already", " ", "have", " ", "two", " ", "random", " ", "numbers", " ", 
    "which", " ", "we", " ", "can", " ", "scale"}],
   FontFamily->"Times New Roman"], 
  StyleBox[",",
   FontFamily->"Times New Roman"], 
  StyleBox[" ",
   FontFamily->"Times New Roman"], 
  StyleBox[
   RowBox[{"to", " ", "give"}],
   FontFamily->"Times New Roman"]}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["  ",
   FontFamily->"Times New Roman"], 
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{
      StyleBox["t",
       FontSlant->"Italic"], "'"}], "=", 
     RowBox[{
      RowBox[{
       StyleBox["t",
        FontSlant->"Italic"], " ", "\[Sigma]", 
       SqrtBox[
        RowBox[{"-", 
         FractionBox[
          RowBox[{"2", " ", "ln", 
           RowBox[{"(", 
            StyleBox["s",
             FontSlant->"Italic"], ")"}]}], 
          StyleBox["s",
           FontSlant->"Italic"]]}]], "  ", "and", "  ", 
       RowBox[{
        StyleBox["u",
         FontSlant->"Italic"], "'"}]}], "=", 
      RowBox[{
       StyleBox["u",
        FontSlant->"Italic"], 
       StyleBox[" ",
        FontSlant->"Italic"], 
       StyleBox["\[Sigma]",
        FontSlant->"Italic"], 
       RowBox[{
        SqrtBox[
         RowBox[{"-", 
          FractionBox[
           RowBox[{"2", " ", "ln", 
            RowBox[{"(", 
             StyleBox["s",
              FontSlant->"Italic"], ")"}]}], 
           StyleBox["s",
            FontSlant->"Italic"]]}]], ".", "\[IndentingNewLine]", "  ", 
        "To"}], " ", "test", " ", "this", " ", "out"}]}]}],
    FontFamily->"Times New Roman"], 
   StyleBox[",",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   RowBox[{
    StyleBox["we",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["use",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["the",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    StyleBox["following",
     FontFamily->"Times New Roman"], 
    StyleBox[" ",
     FontFamily->"Times New Roman"], 
    RowBox[{
     StyleBox["code",
      FontFamily->"Times New Roman"], 
     StyleBox[":",
      FontFamily->"Times New Roman"], 
     StyleBox[" ",
      FontFamily->"Times New Roman"], 
     StyleBox["\[IndentingNewLine]",
      FontFamily->"Times New Roman"], 
     StyleBox[" ",
      FontFamily->"Times New Roman"], 
     RowBox[{
      StyleBox["each",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["call",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["to",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Courier New"], 
      StyleBox["sn",
       FontFamily->"Courier New"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["generates",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["two",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["samples",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["from",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["a",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["random",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["distribution",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["of",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["unit",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["standard",
       FontFamily->"Times New Roman"], 
      StyleBox[" ",
       FontFamily->"Times New Roman"], 
      StyleBox["deviation",
       FontFamily->"Times New Roman"]}]}]}], 
   StyleBox[",",
    FontFamily->"Times New Roman"], 
   StyleBox[" ",
    FontFamily->"Times New Roman"], 
   StyleBox[
    RowBox[{
    "which", " ", "of", " ", "course", " ", "we", " ", "can", " ", "scale", 
     " ", "trivially", " ", "to", " ", "get", " ", "any", " ", "desired", " ", 
     RowBox[{"spread", "."}]}],
    FontFamily->"Times New Roman"]}]}]}], "Text",
 CellChangeTimes->{
  3.634291413647686*^9, {3.6348203495628967`*^9, 3.634820456811781*^9}, {
   3.63488863680131*^9, 3.634888655505054*^9}, {3.634888776699109*^9, 
   3.6348888110369377`*^9}, {3.634888965171596*^9, 3.634889122605586*^9}, {
   3.634889168340485*^9, 3.63488919459136*^9}, {3.634889246890791*^9, 
   3.634889345052134*^9}, {3.63497956995319*^9, 3.634979571712102*^9}, {
   3.634979791672648*^9, 3.6349797923901*^9}, {3.666340306009803*^9, 
   3.666340320816518*^9}, {3.697774839243947*^9, 3.697774844654346*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sn", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t", ",", "u", ",", 
      RowBox[{"s", "=", "2"}]}], "}"}], ",", "  ", "\[IndentingNewLine]", 
    "                           ", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"s", ">", "1"}], ",", "\[IndentingNewLine]", 
       "                                      ", 
       RowBox[{
        RowBox[{"t", "=", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "                                      ", 
        RowBox[{"u", "=", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "                                      ", 
        RowBox[{"s", "=", 
         RowBox[{
          SuperscriptBox["u", "2"], "+", 
          SuperscriptBox["t", "2"]}]}]}]}], "\[IndentingNewLine]", 
      "                                     ", "]"}], ";", 
     "\[IndentingNewLine]", "                          ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"t", " ", 
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          RowBox[{
           RowBox[{"Log", "[", "s", "]"}], "/", "s"}]}], "]"}]}], ",", 
       RowBox[{"u", " ", 
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"-", "2"}], " ", 
          RowBox[{
           RowBox[{"Log", "[", "s", "]"}], "/", "s"}]}], "]"}]}]}], "}"}]}]}],
    "]"}]}]], "BoxedProgram",
 CellChangeTimes->{{3.634969490327351*^9, 3.634969511271612*^9}}],

Cell["\<\
A test shows that the result is reasonable, giving a distribution that looks \
normal with the required variance.\
\>", "Text",
 CellChangeTimes->{{3.634979592202014*^9, 3.634979593355495*^9}, {
  3.634979797545532*^9, 3.6349797983775806`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nn", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"sn", "[", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "50000"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Variance", "[", "nn", "]"}], "\n", 
 RowBox[{"Histogram", "[", 
  RowBox[{"nn", ",", "50"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6348893853426847`*^9, 3.634889385833021*^9}}],

Cell[BoxData["1.0066992880108276`"], "Output",
 CellChangeTimes->{3.444974979757*^9, 3.444975742901*^9, 3.444976922906*^9, 
  3.4772904790676003`*^9, 3.63482106197575*^9, 3.6348894566131077`*^9}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.39899999999999997`], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.39899999999999997`], Thickness[Small]}], 
     RectangleBox[{-4.4, 0}, {-4.2, 1},
      RoundingRadius->0], RectangleBox[{-4.2, 0}, {-4., 2},
      RoundingRadius->0], RectangleBox[{-4., 0}, {-3.8, 6},
      RoundingRadius->0], RectangleBox[{-3.8, 0}, {-3.6, 11},
      RoundingRadius->0], RectangleBox[{-3.6, 0}, {-3.4, 22},
      RoundingRadius->0], RectangleBox[{-3.4, 0}, {-3.2, 43},
      RoundingRadius->0], RectangleBox[{-3.2, 0}, {-3., 69},
      RoundingRadius->0], RectangleBox[{-3., 0}, {-2.8, 135},
      RoundingRadius->0], RectangleBox[{-2.8, 0}, {-2.6, 209},
      RoundingRadius->0], RectangleBox[{-2.6, 0}, {-2.4, 343},
      RoundingRadius->0], RectangleBox[{-2.4, 0}, {-2.2, 569},
      RoundingRadius->0], RectangleBox[{-2.2, 0}, {-2., 846},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.8, 1333},
      RoundingRadius->0], RectangleBox[{-1.8, 0}, {-1.6, 1866},
      RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 2591},
      RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 3440},
      RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 4346},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 5315},
      RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 6325},
      RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 7057},
      RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 7562},
      RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 7838},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 7989},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 7616},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 6999},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 6134},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 5291},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 4410},
      RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 3389},
      RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 2596},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 1919},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 1406},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.2, 891},
      RoundingRadius->0], RectangleBox[{2.2, 0}, {2.4, 592},
      RoundingRadius->0], RectangleBox[{2.4, 0}, {2.6, 372},
      RoundingRadius->0], RectangleBox[{2.6, 0}, {2.8, 229},
      RoundingRadius->0], RectangleBox[{2.8, 0}, {3., 105},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.2, 69},
      RoundingRadius->0], RectangleBox[{3.2, 0}, {3.4, 32},
      RoundingRadius->0], RectangleBox[{3.4, 0}, {3.6, 20},
      RoundingRadius->0], RectangleBox[{3.6, 0}, {3.8, 9},
      RoundingRadius->0], RectangleBox[{3.8, 0}, {4., 2},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.2, 1},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-4.572, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->0.,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  PlotRange->{{-4.4, 4.2}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.444974979757*^9, 3.444975742901*^9, 3.444976922906*^9, 
  3.4772904790676003`*^9, 3.63482106197575*^9, 3.634889457393417*^9}]
}, Open  ]],

Cell[TextData[{
 "   Another approach to the generation of random variables, which applies \
when we cannot devise a simple transformation of variables as in the \
Box-Muller method, is the rejection method. Suppose the required distribution \
is ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "). We generate random numbers according to some distribution ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") which need not be normalised (but should be normalisable, that is, have a \
finite integral over the domain of interest) with ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ")\[GreaterEqual]",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") for all ",
 StyleBox["x",
  FontSlant->"Italic"],
 " -- ideally ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") should be a distribution that has the same general shape as ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "), but in extremis we can just use a uniform distribution. This function ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") is called the comparison function. The one thing we need to be able to do \
with ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") is to generate samples from it (hence common choices are the uniform and \
the normal distribution) Then the procedure is as follows: we suppose that ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") is represented by the red curve, and ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") is the blue one."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nn", "=", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox["x", "2"], "4"]}]], 
     RowBox[{"\[DifferentialD]", "x"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mm", "=", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "2"]}], ")"}], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox["x", "2"], "2"]}]]}], 
     RowBox[{"\[DifferentialD]", "x"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox["x", "2"]}], ")"}], " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           FractionBox[
            SuperscriptBox["x", "2"], "2"]}]]}], "mm"], ",", 
       FractionBox[
        RowBox[{"1.4`", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           FractionBox[
            SuperscriptBox["x", "2"], "4"]}]]}], "nn"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
          RowBox[{"RGBColor", "[", 
           RowBox[{"1", ",", "0", ",", "0"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
          RowBox[{"RGBColor", "[", 
           RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Filling", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", "2", "}"}]}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"p2", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0.1`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0.24`"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<p(x)\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0.08`"}], "}"}]}], "]"}], ",", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2.5`"}], ",", "0.27`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.26`"}], ",", "0.27`"}], "}"}]}], "}"}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<q(x)\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2.7`"}], ",", "0.27`"}], "}"}]}], "]"}]}], "}"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{"p1", ",", "p2"}], "]"}]}], "Input",
 CellOpen->False,
 InitializationCell->True,
 CellChangeTimes->{{3.4449753809700003`*^9, 3.444975420119*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
OdLS859tws/5fo4vVz7r8X6wSD9Hnfh9xwgnFtycFbctN+AbrPPztzxGb/l/
f0dlS0cfHh/fTyG5RO6Fye2npJ8iYrp9+8Lt6aR/oW3tBZ/s8mbIBBE/00ff
kULd1ofNSS2kn8Fk8uoG/30s0s/QWywa0cJkkX4GxR35K0uU2KSfIWvi+9n5
29mkn2Hg8NL8tq1s0s9gf3bzNdc/LNLPEMmD1neRLPDyFuVF+H2FWqniW5oT
LaS/4cThNrd+zRbST/DaTGnSOyMDnHMTvweofkXleWwzl5kWUv9vX9XyX3E4
i9T/D9jZrlWdYZH6v5pI97EkPB6+/r/VZr3xQTxevv7/YhHFap8im9T/13rU
+xTVskCL46X44RobvlRAsoMZi9TnK4qPVdWfSif1edukavnr9DRSD9898DpK
Ob0Ztr/NC7q4rB1Jn7sTSfdvIfXx4FXnbqkZsEh9vEtY1z0EsUh9HE2Y3wNZ
NqmPc22JFbu2sUl9PGmL1sCMAZvUxz9wpm+rU9ikPq7y3OD0ujQWTFFLPwrd
+wLSKSO35eaySL389W/He4rmLaQ+nc5RfV9MzYRnadP9jDVtaHBVRPDc3hZS
T+56ZOPW4cMi9eSUgJNswVEWqSdH/ZL7NqnFJvVk/5sXD5vh+Obryem/frem
r2aTenLl6ubGtV/w/M8Kdl7AcZ2YRPDarFmk3st8a6GvzU0H7tDNJUOBdchT
XfXL4VYWqd92bE/bcW8Nm9Rvtz/ot1PD3+Prt0d3uSkN4fHw9dTmtCaHCLxe
fD31Y7pv5zO8nnw9ddH5pXVrl7FJfTQQ4oIWstJIffTck3vHXYLSSD1yKOzb
6NOoZlh4NWDe9JF29EFpmZWwVwupTxI9XUE0TRapTyYstzVTLGSR+uSCnC96
BkvYpD45OU67rGjMJvVJS6X02R+ATeqT51bXfmBIsEl9stmlVUQ2iwVFCss0
DYS/wPf5zkdql7BIvXLnzu9K94+0kPrgKa0nvM4HmbBjRSZv8Fkbks4YyIz5
2kLqecYijvsKPViknmcDJhtWcliknrfIzNLKVoNN6nmGf9yNfPF68/W89uzk
LuF1bFLPU1zfL72qgwXeiR+2GXBa4Na4m+gBOxaptylLpov92PIUJk+H/A2Q
rEfdzDGVnE8sUj/7bTJ3r44Km9TPrM894OXh88rXz9yvt2Tf3sIm9Szd3PAt
OXpsUs+akl0g89CETepZu7dUUazk2aQ+9WBOjeNy+XRSb3rTo0M3xu/z9aYJ
04yVYvpsUi/qeDq7+zT+Hl8vMrEaterG4+HrPQ32IXRXvB58vebMk8u8nXj/
+HpNbsCBlEi8v3x9xqRXGLIj0kh9htGn1690OY3UQ8JPx1Jbg5vB49PY/m0e
7ei8lEtvhFsLqY9Il4p3/N7AIvURCbYYzQrjA74+8qxZ0mjtIjapj3z/o/3w
BsYXfH1E0tR3TRjGH3x9pOERcUFckk3qI6ZV3z7PYPwSG1ppxy5vhX0Ws6hL
5VmkXjJh1z31yqaF1CfCiu0OFr3OBOkvt1xv9rehuepnImpbWkg94clSW8HI
qyxST3gv1/FDoZ9F6gm+QsspszexST1hmU/jizC8nnw9gTtqsCl5PZvUE3Y+
j5kr1Y3xVemq0fQXLZBc/1N70oFF8v0t80ctBI4/hd9xS4ZZ++pR4JWtUbvr
WSR/byHDO3F7FZvk77doz99gh/eTz9/rXg1Sztdhk3y6UWjrn5e6bJJP9/Pa
lP0LxwufTxcomBV8ZAWb5MdlxO0FOiGd5Lu32tSOVeN8w+e71cOs/ojjfMTn
q8cvrVqotZlN8tXM3QKt8nj+fL75gY+G3CHc5vPFban1Z10M2SRfHDS220QZ
98/nhw8qfhFgvkkj+eASqfadRTj++Hyv7KWJ2ku4Pz6fO31x+NUonj+fr1Vu
sritjOfH52Mvb7kc8wq3+fwrIzK0Ngm/z+dXjZpZjvdxf3y+dM5FWFvilEby
pTWRecoUmzSSn7R5FO/MC2iGl3eeO50PaEcd3ZOnrJxbSL5SP7r7VPQ6FslX
Jn1n2lzOZZF8pa2ex7zl0mySr1RoCvBXxfHN5ytpRxxPjeD45vOVEk3Jcsrz
2CRfuVq+KnkQ9xewK+7O09RWGBG8Gly4gkXyl29vTCvTTrWQfOFuYzujzVWZ
4Knb/6ZS4huSGPno0/OpheT3XCX75950ZZH8nuUlH/HHvSyS33tV/FZuvzqb
5Pdm9NbS/uE/Pr8n6ujrb7+BTfJ71O3b/3r3sEDa/BCjNbAFPFWFLXZeYZH8
m4p9t6z85afwt6i1/5ZjPfrDjU0Ox3iFz6fNSuCtSVzJJvm01iZ/NUO8X3w+
rcbHVXwPxkN8fmvV8/qYNTi++fyWsN87tip+n89vZW89Lm6pwCb5Ki2zFNlD
B9JJ/umX85L+ABx/fP6Jp6+zwA/HN58/unvArDtam03yR97PL01p4/nz+R8B
JdOVRv/y5//4mw7WQLMQjm8+f2Nqt9b1Au6fz9f4JJdJ9FemkfzMKy17vSs4
vvn8y3/GXr0euD8+vyLjaJfThOfD508+PY/LssbxzOdHOAc+hHngNp8PeUq1
Gy3H7/P5jqboyRu3cX98/uLa2RXeOT5pJF+RrDfYEoSf8/mIJisHxxD8fz7f
cJ2qNjXrHx76H59wXiXp4Dnc5vMFDyuHRk/gNp8PiNVUHJTCbf59/tXW9ckh
uM2/z2dG9WxttE2D/wMA3QmL
    "], {{{}, {}, {}, {}, {}, {}, 
      {RGBColor[1, 0, 0], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwl1nPAnXUYBuDZbKzZtr3GZremmmr2ami2as1etbCMsdm2bdtW16/+uL77
fp736Dvve873pWvZpW7nSBEiRIhI+sj/50w/MrFFH0xtChBuN8s+M1v1IdSh
IO4aYbZ9FrbpQ6lLIaIQlWhEJwYxiUVs4hCXOe6ble36MOpRmKV25bioz6UT
8UK3y8YOfTj1KcI/duW5pH9NZ+KHbpednfoIGrDD/D5P9QUUZZm5Apf1b+jC
YXMLIrPKnCAc03OwSx/JWb0DccNjmnfKhjzTF1KM5eaKXNG/5YrencR0NR+R
LYlCRG/4OLna/r7sTxri2E+TCcNjyJzs1p/KoYzSz8mOJHHbeOHx5HiZTjZ0
fJf+AW+Zn5tf66NJbV5kvq33Ibk5hYwpJ8sMsrjjK/RKxDdfNb/QRzBPvyp7
hOcmmuMTZDf7o7IVUVljfiAHkDa8DvM8mYs9+mjO653Cc4TXat4tG/FCX0wJ
Vporc03/ju4kCt0uN3v1MTSiJIn53j4P+/SxNKYUSUjKD47lZb8+jiaUZpXd
e1wPj0EPkvGjXT4O6F/QlDKstqvCjfCY9CQ58+3yc1D/kmbsMTfmpb6Esqwx
V+VmeA6u6T1JyqfmY7J1eI9Za34oB4ZzzNvmn2QBDunP5DDG6xdkZxKEc+H8
fCU/tN8rm5DI7pX5jT4mXHPmpeY7et/w2OaUMpacIjPKdx1fq1cLj2u+ZX6p
jySleb75enjd4fWbk8nocqL8zLHj8uOwI5L9F3Kd/SM5iPS8Y/5ZFuSw/hUX
9S7hs8BH5n2yKa/D9wDlWGeuzu3wntCLE+ZPiMF6cwp+0QtxRJ9Ac8qz3q4G
d8Lz05uU/GpXmKP6RFpQgVSk5jfHinBMn0RLKrLBriZ3w3PShzT8bleU4/pk
WlGJjXa1uBeek76k5Q+7YpzQp9Ca/eZmvNGXUZlN5trcD6+JG+E9D59tPjef
lG3CZ5wN5nT8qRfnpD6VS3rX8DkN58l8IFwz/PcHw/kaK5erd8NjhnNll0rG
llPD58axzbJOOFd2D8yv9FGkMv9uvqn3Ipn57XBu5KRw7mU/x0/pbUlsjiUj
yy9lWrnR8cf6YFKYM8i4cnq4v2N/yRKc0p/L4UzTL8tu4ZoP14P5YLiOiMgK
8z3Zj9RUMW+RdXkY3n9u6b3D70t/82nZLvzebDJn4G+9JKf16bThkLl5uNZZ
aa7KVr0ej8L7zwAyssCuFGf0GbSlGtvs6vM4/H4MJBML7UpzVp9JO6qTmSxk
JRvZyUFOcpGbPCxy3zKc02fRnhrkZbF9Wc7rs+lATfKxxP5dLuhz6Egttts1
4El4LxjEGXN74rDZ/EQOISPxnLcZMpPM71jDSP//b3JTviNXy4u8pU+XSzgZ
rglz3/B9xh8cJJJda9mNkfzADp7xPg2oTz3qUofa1KImNahONapShfeoTCUq
UoFWdGUE37Odp5SnJV0Yznds4wnl6BP+LofrnwNE9HpbyPBP2TDmsZXH4TuW
3uGa5zf2h3/I3L657MRQvmULjygb/k9gMSeI6ba9wncrv7KPN3wU/razgKNE
c7uO8h9OE8c8RH7DZh5ShlVcIKHjU+VVkuqL5HFi6J/J6yTXl4fvBHlWxpPj
ZBp5WSaWv8gUcq98zYekM98I3wdyhUwtz8n4cpJMK6/IJPJvmVIekVFlB3mN
ZPpSeYrY+mB5iUT613ITDyjNSs6TwLEpciHHiG7+VC7jDHHNY+XP7OEVzZjI
Xxwmitu0l4OYy0buU4qejOEndvOSpkzgTw4R2f3byYHMYQP3KEkPRjOfXbyg
CW0ZwGzWc5cSdGcUP7KT5zSmDf2ZxTruUJxGfEI/ZrKW2xSjKEUoTCEKUoD8
5CMvechNLnKSg+xkIytZ+ICP+ZwZrOEWmfkX/yCGJg==
         "]]]}, {}, {}, {}}, {{}, {}, {}, 
      {RGBColor[1, 0, 0], Thickness[0.01], Opacity[1.], 
       LineBox[CompressedData["
1:eJwl1mWgVFUYBdBHdygtLY10d4d0i4RKKd0oId3dHQYGFhYlIN3d3d0pna6j
PxZ7f9/h3Zl374ySvkXnup0iRUREZIocERFytj8ysUUfRG3y4zhijn1mtuqD
qUMBojDXPgvb9CHUpSBRiUZ0YhCTWMQmDnGJxzw/m5Xt+lDqUYhlduW4qH9B
R+KHbpeNHfow6lOYv+zKc0n/kk4kCN0uOzv14TRgh/k9nuh/UoTl5gpc1r+i
M4fNzYnCKnPCcKa/wy59BGf19sQL1zTvlA15qi+iKCvMFbmif80VvRuJ6WI+
IlsQlUhu+Fi52v6+7Eda4trPkG+Ea8gc7NafyCGM1M/JDiTxd+OH68kJMr1s
6HyX/j5vmp+ZX+mjSGNebL6t9ya5OaWMJafKDLKY85V6JRKYr5qf68OZr1+V
3cNrE935JNnV/qhsSTTWmP+R/UkX3od5vszJHn0U5/WO4TXCezXvlo14ri+h
OH+bK3NN/4ZuJArdLhd79dE0ogSJ+dY+N/v0MTSmJElIynfO8rBfH0sTSrHK
7l2uh2vQnWR8b5eXA/o4mlKa1XZVuBGuSQ+Ss8AuHwf18XzAHnNjXuhLKcMa
c1Vuhtfgmt6DpHxqPiZbhXvMWvMDOSA8Y1KYf5D5OaQ/lUOZoF+Q4QufMDwL
z2ei/NB+r2xCIruX5tf66PCZMy8z39H7hGubU8nYcprMKMs6X6tXC9c13zK/
0EeQyrzAfD287/D+zclkDDlZfubsuPw47IhsP06us38oB/I2b5l/lAU4rE/k
ot45fBf4yLxPNuVV+O8A5Vhnrs7tcE/oyQnzJ8RkvTklP+kFOaJPohnlWW9X
gzvh9elFKn62K8RRfTLNqUBq0vCLs8Ic06fQgopssKvJ3fCa9CYtC+2KcFyf
SksqsdGuFvfCa9KHdPxqV5QT+jRasd/8Aa/15VRmk7k298N74ka45+G7zefm
k7J1+I6zwZye3/RinNSnc0nvEr6n4TmZD4TPDP/9D8PzGiNXqHfDNcOzskst
48jp4XvjbLOsE56V3T/ml/pIUpsXmm/qPUlmThGejZwSnr3s6/yU3obE5tgy
ihwv08mNzh/pg0hpziDjyZnh5539LotzSn8mhzFDvyy7hs98+DyYD4bPEZFY
ab4n+5KGKuYtsi4Pwv3nlt4r/L70M5+WbcPvzSZzBv7QS3Ban0lrDpmbhc86
f5urslWvx8Nw/+lPRv60K8kZfRZtqMY2u/o8Cr8fA8jEIrtSnNVn05bqZCYL
WclGdt4hBznJRW4W+9nSnNPn0I4a5GGJfRnO63NpT03ystS+LBf0eXSgFtvt
GvA43AsGcsbcjrhsNj+Wg8lIfM9tVqT//z2Sz9m/mfwE9Q==
        "]]}, 
      {RGBColor[0, 0, 1], Thickness[0.01], Opacity[1.], 
       LineBox[CompressedData["
1:eJwNzlWUVgUUgNF/Zujukhoe6G6UTmkYpHtokJTubpBGQWmQ7u7uTlG6uxsG
2A97fefce+5aNzS8Y1iHoEAgEEH64EDgKbv4kz60oA4ZyEgmMpOFrGQjOznI
SS5yk4e85CM/BShIIZ6xmxn0pSV1+ZHn7GEm/WhFPT5xnEWMpAs/8YK9/EV/
WlOfz5zgH0bxG4V5yT7+ZgBtCAkJBC7oKibSgC+cZDGj6UoRXrGfWQykLZF8
f1FXM4mGRHCKJYwhtpvruoVuRLVf1nVMJZ79lm6nKK85wGwSendXBxHTfFU3
kdT8UNsR2XxJU+oaTaz3Na1O1rh6U1PrNk2ujzVUG+lXTvODfakm0nuaRsdq
HL2hqXSrJtNH2p1o5v90PUnMD3Qa8c23dQfFeMNB5jCYWN5f0838ShT7v7qW
KTTmG2dYxjh6EN3d/7qB6RTnLYeYyxDa04SA27O6nPH0pATvOMw8htKBpgS5
P6cr+J1elOQ9R5jPMDoSTik+cJQFDKcTzShNGcpSjp8pTwUqUonKVKEq1ahO
GDX4hZrU4iPHWMgIOtOcYP97Xlcygd7E8OyKbuQPEtjv6E5SmJ9oOq2t3wHK
FIPi
        "]]}}}], {LineBox[{{-1, 0.1}, {-1, 0.24}}], 
    InsetBox["\<\"p(x)\"\>", {-1, 0.08}], 
    LineBox[{{-2.5, 0.27}, {-1.26, 0.27}}], 
    InsetBox["\<\"q(x)\"\>", {-2.7, 0.27}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, "AxesInFront" -> True},
  PlotRange->{{-3, 3}, {0., 0.39493268743984794`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.444974958204*^9, 3.4449749819969997`*^9}, 
   3.444975070726*^9, {3.444975524067*^9, 3.44497554255*^9}, 
   3.444975629324*^9, {3.444975721873*^9, 3.444975744888*^9}, {
   3.444976901921*^9, 3.444976924929*^9}, 3.4772904530916*^9, 
   3.4772904863915997`*^9, 3.634885319293432*^9, 3.634889452459373*^9, 
   3.634889599366493*^9, 3.634889950572864*^9, 3.634895651688841*^9, 
   3.634969430479677*^9, 3.6977755898167953`*^9}]
}, Open  ]],

Cell[TextData[{
 "a) Select a point from the distribution",
 StyleBox[" q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "). This gives a value of",
 StyleBox[" x",
  FontSlant->"Italic"],
 ".\nb) Select a value ",
 StyleBox["y",
  FontSlant->"Italic"],
 " from a uniform distribution between 0 and ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ").\nc) If y lies below ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "), accept the value of ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", otherwise reject it.\nd) Repeat until the required number of ",
 StyleBox["x",
  FontSlant->"Italic"],
 " values have been accumulated.\n  Let's try this out: we will use the same \
example as in the sketch above:"
}], "Text"],

Cell[TextData[{
 "    ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"p", "[", "x_", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SuperscriptBox["x", "2"]}], ")"}], " ", 
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["x", "2"]}], "/", "2"}], "]"}], "/", 
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SuperscriptBox["x", "2"]}], ")"}], " ", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["x", "2"]}], "/", "2"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
      "]"}]}]}]}]],
  InitializationCell->True]
}], "Text",
 Evaluatable->True],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      SuperscriptBox["x", "2"], "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox["x", "2"]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox[
    RowBox[{"2", " ", "\[Pi]"}]]}]]], "Output",
 CellChangeTimes->{3.4449749822200003`*^9, 3.4449757450810003`*^9, 
  3.4449769251280003`*^9, 3.4772904907426*^9, 3.6348211343150053`*^9, 
  3.634889599577299*^9, 3.634889984664987*^9, 3.634969754381239*^9}],

Cell[TextData[{
 "    and the comparison function ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") is"
}], "Text",
 CellChangeTimes->{{3.634969756771377*^9, 3.634969761821555*^9}}],

Cell[TextData[{
 "    ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"q", "[", "x_", "]"}], "=", 
   RowBox[{"1.4", "  ", 
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["x", "2"]}], "/", "4"}], "]"}], "/", 
     RowBox[{"Integrate", "[", " ", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox["x", "2"]}], "/", "4"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
      "]"}]}]}]}]]]
}], "Text",
 Evaluatable->True],

Cell[BoxData[
 RowBox[{"0.3949327084834294`", " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     SuperscriptBox["x", "2"], "4"]}]]}]], "Output",
 CellChangeTimes->{3.444974982358*^9, 3.444975745186*^9, 
  3.4449769252469997`*^9, 3.4772904919835997`*^9, 3.6348211313556232`*^9, 
  3.634889603962493*^9, 3.634889971711069*^9, 3.634969765167029*^9}],

Cell[TextData[{
 "which is a normal distribution, but widened and also scaled by 1.4 to \
ensure that it always lies above ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ").  As a check, we will generate samples from the normal distribution \
corresponding to our ",
 StyleBox["q",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "):"
}], "Text",
 CellChangeTimes->{{3.6348896192370996`*^9, 3.634889624299117*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ndist", "=", 
  RowBox[{"NormalDistribution", "[", 
   RowBox[{"0", ",", 
    SqrtBox["2"]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"nd", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomVariate", "[", "ndist", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Histogram", "[", 
  RowBox[{"nd", ",", "50"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.444975612573*^9, {3.4772906749426003`*^9, 3.4772906802525997`*^9}, {
   3.63488970103507*^9, 3.634889701579734*^9}, {3.634969670253899*^9, 
   3.634969672418709*^9}}],

Cell[BoxData[
 RowBox[{"NormalDistribution", "[", 
  RowBox[{"0", ",", 
   SqrtBox["2"]}], "]"}]], "Output",
 CellChangeTimes->{
  3.444974982887*^9, 3.444975629578*^9, 3.444975745225*^9, 3.444976925289*^9, 
   3.4772904940126*^9, 3.63482109933076*^9, 3.6348896396884117`*^9, 
   3.6348897023598833`*^9, {3.6348899506991*^9, 3.634889990036112*^9}, 
   3.6349696860426817`*^9}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.252], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.252], Thickness[Small]}], RectangleBox[{-7., 0}, {-6.8, 1},
      RoundingRadius->0], RectangleBox[{-5.4, 0}, {-5.2, 1},
      RoundingRadius->0], RectangleBox[{-5.2, 0}, {-5., 3},
      RoundingRadius->0], RectangleBox[{-5., 0}, {-4.8, 2},
      RoundingRadius->0], RectangleBox[{-4.8, 0}, {-4.6, 4},
      RoundingRadius->0], RectangleBox[{-4.6, 0}, {-4.4, 7},
      RoundingRadius->0], RectangleBox[{-4.4, 0}, {-4.2, 5},
      RoundingRadius->0], RectangleBox[{-4.2, 0}, {-4., 13},
      RoundingRadius->0], RectangleBox[{-4., 0}, {-3.8, 12},
      RoundingRadius->0], RectangleBox[{-3.8, 0}, {-3.6, 19},
      RoundingRadius->0], RectangleBox[{-3.6, 0}, {-3.4, 30},
      RoundingRadius->0], RectangleBox[{-3.4, 0}, {-3.2, 34},
      RoundingRadius->0], RectangleBox[{-3.2, 0}, {-3., 52},
      RoundingRadius->0], RectangleBox[{-3., 0}, {-2.8, 73},
      RoundingRadius->0], RectangleBox[{-2.8, 0}, {-2.6, 93},
      RoundingRadius->0], RectangleBox[{-2.6, 0}, {-2.4, 114},
      RoundingRadius->0], RectangleBox[{-2.4, 0}, {-2.2, 141},
      RoundingRadius->0], RectangleBox[{-2.2, 0}, {-2., 169},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.8, 236},
      RoundingRadius->0], RectangleBox[{-1.8, 0}, {-1.6, 272},
      RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 342},
      RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 357},
      RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 416},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 475},
      RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 509},
      RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 522},
      RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 582},
      RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 573},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 598},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 518},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 546},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 499},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 431},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 399},
      RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 372},
      RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 303},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 259},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 250},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.2, 180},
      RoundingRadius->0], RectangleBox[{2.2, 0}, {2.4, 161},
      RoundingRadius->0], RectangleBox[{2.4, 0}, {2.6, 117},
      RoundingRadius->0], RectangleBox[{2.6, 0}, {2.8, 77},
      RoundingRadius->0], RectangleBox[{2.8, 0}, {3., 85},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.2, 42},
      RoundingRadius->0], RectangleBox[{3.2, 0}, {3.4, 37},
      RoundingRadius->0], RectangleBox[{3.4, 0}, {3.6, 22},
      RoundingRadius->0], RectangleBox[{3.6, 0}, {3.8, 18},
      RoundingRadius->0], RectangleBox[{3.8, 0}, {4., 13},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.2, 7},
      RoundingRadius->0], RectangleBox[{4.2, 0}, {4.4, 8},
      RoundingRadius->0], RectangleBox[{5.6, 0}, {5.8, 1},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-7.256, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->0.,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  PlotRange->{{-7., 5.8}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.444974982887*^9, 3.444975629578*^9, 3.444975745225*^9, 3.444976925289*^9, 
   3.4772904940126*^9, 3.63482109933076*^9, 3.6348896396884117`*^9, 
   3.6348897023598833`*^9, {3.6348899506991*^9, 3.634889990036112*^9}, 
   3.634969687116632*^9}]
}, Open  ]],

Cell["Now implement the rejection method.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"np", "=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"xt", "=", 
        RowBox[{"RandomVariate", "[", "ndist", "]"}]}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"RandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"q", "[", "xt", "]"}]}], "}"}], "]"}], "<", 
          RowBox[{"p", "[", "xt", "]"}]}], ",", "xt", ",", "\"\<null\>\""}], 
        "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "10000"}], "}"}]}], "]"}], "//.", 
    "\[InvisibleSpace]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a___", ",", "\"\<null\>\"", ",", "b___"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}]}]}], ";"}], "\n", 
 RowBox[{"Length", "[", "np", "]"}], "\n", 
 RowBox[{"Histogram", "[", 
  RowBox[{"np", ",", "50"}], "]"}]}], "Input",
 CellChangeTimes->{{3.634889722419408*^9, 3.634889723056972*^9}, {
  3.6349697251393967`*^9, 3.634969726280686*^9}}],

Cell[BoxData["7100"], "Output",
 CellChangeTimes->{
  3.444974988824*^9, 3.444975750259*^9, 3.4449769306619997`*^9, 
   3.4772905017426*^9, {3.6348211146689377`*^9, 3.63482114066503*^9}, {
   3.634889717814212*^9, 3.634889724497767*^9}, 3.634889959407772*^9, 
   3.634890000014895*^9, 3.6349697717342987`*^9}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.371], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.371], Thickness[Small]}], RectangleBox[{-5., 0}, {-4.8, 1},
      RoundingRadius->0], RectangleBox[{-4.4, 0}, {-4.2, 1},
      RoundingRadius->0], RectangleBox[{-4.2, 0}, {-4., 1},
      RoundingRadius->0], RectangleBox[{-4., 0}, {-3.8, 1},
      RoundingRadius->0], RectangleBox[{-3.8, 0}, {-3.6, 4},
      RoundingRadius->0], RectangleBox[{-3.6, 0}, {-3.4, 3},
      RoundingRadius->0], RectangleBox[{-3.4, 0}, {-3.2, 13},
      RoundingRadius->0], RectangleBox[{-3.2, 0}, {-3., 28},
      RoundingRadius->0], RectangleBox[{-3., 0}, {-2.8, 44},
      RoundingRadius->0], RectangleBox[{-2.8, 0}, {-2.6, 78},
      RoundingRadius->0], RectangleBox[{-2.6, 0}, {-2.4, 79},
      RoundingRadius->0], RectangleBox[{-2.4, 0}, {-2.2, 123},
      RoundingRadius->0], RectangleBox[{-2.2, 0}, {-2., 161},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.8, 192},
      RoundingRadius->0], RectangleBox[{-1.8, 0}, {-1.6, 248},
      RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 292},
      RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 316},
      RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 370},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 328},
      RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 331},
      RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 316},
      RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 276},
      RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 312},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 286},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 298},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 292},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 331},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 341},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 373},
      RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 345},
      RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 285},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 256},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 240},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.2, 184},
      RoundingRadius->0], RectangleBox[{2.2, 0}, {2.4, 123},
      RoundingRadius->0], RectangleBox[{2.4, 0}, {2.6, 91},
      RoundingRadius->0], RectangleBox[{2.6, 0}, {2.8, 44},
      RoundingRadius->0], RectangleBox[{2.8, 0}, {3., 45},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.2, 23},
      RoundingRadius->0], RectangleBox[{3.2, 0}, {3.4, 13},
      RoundingRadius->0], RectangleBox[{3.4, 0}, {3.6, 5},
      RoundingRadius->0], RectangleBox[{3.6, 0}, {3.8, 4},
      RoundingRadius->0], RectangleBox[{3.8, 0}, {4., 1},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.2, 1},
      RoundingRadius->0], RectangleBox[{4.2, 0}, {4.4, 1},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-5.188, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->0.,
  ImageSize->Automatic,
  ImageSizeRaw->Automatic,
  PlotRange->{{-5., 4.4}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.444974988824*^9, 3.444975750259*^9, 3.4449769306619997`*^9, 
   3.4772905017426*^9, {3.6348211146689377`*^9, 3.63482114066503*^9}, {
   3.634889717814212*^9, 3.634889724497767*^9}, 3.634889959407772*^9, 
   3.634890000014895*^9, 3.634969771865526*^9}]
}, Open  ]],

Cell["\<\
We can see that we are getting roughly the right shape, and we can see that \
the rejection rate is about 30%.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Use ",
 StyleBox["Table",
  FontFamily->"Courier New"],
 " to form a list of values from the distribution we define above (",
 StyleBox["ndist)",
  FontFamily->"Courier New"]
}], "Text",
 CellChangeTimes->{{3.634889902625492*^9, 3.634889916591549*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"np", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"xt", "=", 
     RowBox[{"RandomVariate", "[", "ndist", "]"}]}], ";"}]}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.634969786884899*^9, 3.634969787924959*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "then, using that sample value (",
 StyleBox["xt",
  FontFamily->"Courier New"],
 "), take a random number between 0 and ",
 StyleBox["q[xt]",
  FontFamily->"Courier New"],
 ",and store ",
 StyleBox["xt",
  FontFamily->"Courier New"],
 " if that random number is less than ",
 StyleBox["p[xt]",
  FontFamily->"Courier New"],
 "; otherwise store ",
 StyleBox["\"null\"",
  FontFamily->"Courier New"],
 " "
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"             ", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"q", "[", "xt", "]"}]}], "}"}], "]"}], "<", 
      RowBox[{"p", "[", "xt", "]"}]}], ",", "xt", ",", "\"\<null\>\""}], 
    "]"}], ","}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.634969801731134*^9, 3.634969811405748*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell["and do all that 10000 times.", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"            ", 
  RowBox[{"{", 
   RowBox[{"i", ",", "1", ",", "10000"}], "}"}], "]"}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Finally, clean up the list by deleting all the rejected cases, tagged by ",
 StyleBox["\"null\"",
  FontFamily->"Courier New"]
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"           ", 
  RowBox[{
   RowBox[{"//.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a___", ",", "\"\<null\>\"", ",", "b___"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}]}], ";"}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
The number of cases remaining out of our 10000 tries gives us an idea of the \
efficiency of the method. We also plot a histogram of the results.\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[{
 RowBox[{"Length", "[", "np", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", "np", "]"}]}], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]],

Cell[" ", "Subsubsection"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monte Carlo integration", "Section"],

Cell[TextData[{
 "The basic idea behind Monte Carlo integration is to sample points at random \
within the integration domain, calculate the value of the integrand there, \
add up all the values, and multiply by a ",
 StyleBox["volume increment",
  FontColor->RGBColor[1, 0, 0]],
 " based on the ",
 StyleBox["average volume per sampling point used",
  FontColor->RGBColor[1, 0, 0]],
 ". But people have spent years devising schemes for evaluating integrals \
numerically, based on careful choices of sample points and weights which are \
selected to give perfect results for integrands which behave like high-order \
polynomials (",
 StyleBox["Gaussian quadratures",
  FontColor->RGBColor[1, 0, 0]],
 ") -- why would we want to throw all that away? The answer is that those \
excellent algorithms simply cannot cope with integrals in spaces of very high \
dimensionality. For example, consider the particle problems that we were \
looking at in Lecture 7. If we have ",
 StyleBox["N",
  FontSlant->"Italic"],
 " particles interacting through potentials, a quantity which is important in \
statistical physics (see this term's PHAS2228 course) is the partition \
function, ",
 StyleBox["Z",
  FontSlant->"Italic"],
 ". This is related to the total energy ",
 StyleBox["E",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "1"], TraditionalForm]]],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "2"], TraditionalForm]]],
 ",",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "3"], TraditionalForm]]],
 "...",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "N"], TraditionalForm]]],
 ") by\n     ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Z", "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"\[Integral]", 
         RowBox[{"\[Integral]", "\[Integral]"}]}], "..."}], 
       RowBox[{"\[Integral]", 
        RowBox[{
         RowBox[{"exp", "(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", 
             RowBox[{
              StyleBox["E",
               FontSlant->"Italic"], "(", 
              RowBox[{
               FormBox[
                SubscriptBox["r", "1"],
                TraditionalForm], ",", 
               FormBox[
                SubscriptBox["r", "2"],
                TraditionalForm], ",", 
               RowBox[{
                RowBox[{
                 FormBox[
                  SubscriptBox["r", "3"],
                  TraditionalForm], "..."}], 
                FormBox[
                 SubscriptBox["r", "N"],
                 TraditionalForm]}]}], ")"}]}], "/", 
            SubscriptBox["k", "B"]}], "T"}], ")"}], " ", 
         RowBox[{"\[DifferentialD]", 
          SubscriptBox["r", "1"]}], 
         RowBox[{"\[DifferentialD]", 
          SubscriptBox["r", "2"]}], 
         RowBox[{"\[DifferentialD]", 
          SubscriptBox["r", "3"]}]}]}]}], "..."}], ".", 
     RowBox[{"\[DifferentialD]", 
      SubscriptBox["r", "N"]}]}]}], TraditionalForm]]],
 ",\n  which, with ",
 StyleBox["N",
  FontSlant->"Italic"],
 " particles in a 3-dimensional space, is a 3",
 StyleBox["N",
  FontSlant->"Italic"],
 "-dimensional integral. If we had 20 particles, and just selected 3 points \
in each dimension, this would involve ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["3", "60"], TraditionalForm]]],
 " points, which even on a teraflop computer (one capable of carrying out ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["10", "12"], " "}], TraditionalForm]]],
 "floating-point operations per second) would take over a billion years.\n    \
The Monte Carlo approach is to say that the integral giving ",
 StyleBox["Z",
  FontSlant->"Italic"],
 " is just the average of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"exp", "(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       RowBox[{
        StyleBox["E",
         FontSlant->"Italic"], "(", 
        RowBox[{
         FormBox[
          SubscriptBox["r", "1"],
          TraditionalForm], ",", 
         FormBox[
          SubscriptBox["r", "2"],
          TraditionalForm], ",", 
         RowBox[{
          RowBox[{
           FormBox[
            SubscriptBox["r", "3"],
            TraditionalForm], "..."}], 
          FormBox[
           SubscriptBox["r", "N"],
           TraditionalForm]}]}], ")"}]}], "/", 
      SubscriptBox["k", "B"]}], "T"}], ")"}], TraditionalForm]]],
 " multiplied by the volume of the space to the power ",
 StyleBox["N",
  FontSlant->"Italic"],
 ", so that if we take enough samples of the function to get a good estimate \
of the average we can find ",
 StyleBox["Z",
  FontSlant->"Italic"],
 ". In one dimension, we would write\n    ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", "a", "b"], 
      RowBox[{
       RowBox[{"f", "(", "x", ")"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"b", "-", "a"}], ")"}], " ", 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"f", "(", "x", ")"}], "\[RightAngleBracket]"}]}]}], ","}], 
   TraditionalForm]]],
 "\n    where \[LeftAngleBracket]\[RightAngleBracket] denotes the average.\n  \
   We shall test the idea on a simple problem, using the Cauchy distribution:\
\n     ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubsuperscriptBox["\[Integral]", "0", "1"], 
     RowBox[{
      FractionBox["1", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "2"]}]], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], " ", "=", " ", 
    RowBox[{
     FractionBox["\[Pi]", "4"], " ", "=", " ", 
     RowBox[{"0.78540", "."}]}]}], TraditionalForm]]],
 "\n     We shall generate a table showing how the value of the integral \
improves as we take more random samples. To do this, we shall run each sample \
size 10 times and calculate the standard deviation of the result. Note the ",
 StyleBox["factor",
  FontColor->RGBColor[1, 0, 0]],
 " of 1/",
 StyleBox["n",
  FontSlant->"Italic"],
 " in the function ",
 StyleBox["mce",
  FontFamily->"Courier New"],
 ": this represents the averaging process: in this case the range (",
 StyleBox["b ",
  FontSlant->"Italic"],
 "- ",
 StyleBox["a",
  FontSlant->"Italic"],
 ")=1."
}], "Text",
 CellChangeTimes->{{3.634890137309239*^9, 3.634890147106988*^9}, {
  3.63489022365583*^9, 3.634890224476811*^9}, {3.634890346513644*^9, 
  3.634890365055298*^9}, {3.666340450398245*^9, 3.6663404520024652`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mce", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SuperscriptBox[
          RowBox[{"RandomReal", "[", "]"}], "2"]}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], "/", 
   "n"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stat", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t", ",", "mm", ",", "sd"}], "}"}], ",", "\[IndentingNewLine]", 
    "                                    ", 
    RowBox[{
     RowBox[{"t", ":=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"mce", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "                                    ", 
     RowBox[{"mm", "=", 
      RowBox[{"Mean", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
     "                                    ", 
     RowBox[{"sd", "=", 
      RowBox[{"StandardDeviation", "[", "t", "]"}]}], ";", 
     "\[IndentingNewLine]", "                                   ", 
     RowBox[{"{", 
      RowBox[{"mm", ",", "sd", ",", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"mm", "-", 
          RowBox[{"\[Pi]", "/", "4"}]}], "]"}], "/", "sd"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "                                  ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        SuperscriptBox["10", "i"], ",", 
        RowBox[{"stat", "[", 
         SuperscriptBox["10", "i"], "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<n\>\"", ",", "\"\<Mean\>\"", ",", "\"\<St Dev\>\"", ",", 
        "\"\<Error/St Dev\>\""}], "}"}]}], "}"}]}]}], "]"}]}], "BoxedProgram",
 CellChangeTimes->{{3.634969839270816*^9, 3.634969840014202*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"n\"\>",
       HoldForm], 
      TagBox["\<\"Mean\"\>",
       HoldForm], 
      TagBox["\<\"St Dev\"\>",
       HoldForm], 
      TagBox["\<\"Error/St Dev\"\>",
       HoldForm]},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "10", 
      "0.7725335960257679`", "0.050725066129679725`", "0.2536136145942493`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "100", 
      "0.7802007480708921`", "0.02263697329738322`", "0.2295985094065982`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "1000", 
      "0.7857262296847235`", "0.006635995233847148`", "0.049437390431190296`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "10000", 
      "0.785110888364077`", "0.0015082689268466694`", "0.19046671867186876`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{}, {
      "n", "Mean", "St Dev", "Error/St Dev"}}]]]], "Output",
 CellChangeTimes->{3.444974989652*^9, 3.4449757510360003`*^9, 
  3.4449769314890003`*^9, 3.4772905028276*^9, 3.6348211855848846`*^9, 
  3.634969851018643*^9}],

Cell[TextData[{
 "The standard deviation decreases as we increase the number of sample \
points, roughly as 1/",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    StyleBox["n",
     FontFamily->"Courier New",
     FontSlant->"Plain"]], TraditionalForm]]],
 ".  There are statistical fluctuations, but the ratio of the error to the \
standard deviation does not alter much."
}], "Text"],

Cell[CellGroupData[{

Cell["Explanation:", "Subsubsection",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Start by defining the function ",
 StyleBox["mce",
  FontFamily->"Courier New"],
 " to give the Monte Carlo estimate of the value of the integral using ",
 StyleBox["n",
  FontFamily->"Courier New"],
 " sampling points. Note that as we want to evaluate the integral between 0 \
and 1 the default form of ",
 StyleBox["RandomReal",
  FontFamily->"Courier New"],
 " will do. We form the summation by accumulating the values of the function \
at the sample points in a list, using ",
 StyleBox["Table",
  FontFamily->"Courier New"],
 ", and then ",
 StyleBox["Apply",
  FontFamily->"Courier New"],
 "ing ",
 StyleBox["Plus",
  FontFamily->"Courier New"],
 " to the list, so that ",
 StyleBox["List[a,b,c...] ",
  FontFamily->"Courier New"],
 "becomes ",
 StyleBox["Plus[a,b,c...]",
  FontFamily->"Courier New"],
 "."
}], "Text",
 CellChangeTimes->{{3.634969865443119*^9, 3.634969879522923*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mce", "[", "n_", "]"}], ":=", 
  FractionBox[
   RowBox[{"Plus", "@@", 
    RowBox[{"Table", "[", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"1", "+", 
        SuperscriptBox[
         RowBox[{"RandomReal", "[", "]"}], "2"]}]], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], "n"]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Now investigate the statistics: for ",
 StyleBox["n",
  FontFamily->"Courier New"],
 " sampling points, evaluate the integral 10 times, and calculate the mean \
and standard deviation of the results, as well as the discrepancy between the \
mean result and the exact result in units of the standard deviation."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"stat", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t", ",", "mm", ",", "sd"}], "}"}], ",", "\[IndentingNewLine]", 
    "                                    ", 
    RowBox[{
     RowBox[{"t", ":=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"mce", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "                                    ", 
     RowBox[{"mm", "=", 
      RowBox[{"Mean", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
     "                                    ", 
     RowBox[{"sd", "=", 
      RowBox[{"StandardDeviation", "[", "t", "]"}]}], ";", 
     "\[IndentingNewLine]", "                                   ", 
     RowBox[{"{", 
      RowBox[{"mm", ",", "sd", ",", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"mm", "-", 
          RowBox[{"\[Pi]", "/", "4"}]}], "]"}], "/", "sd"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "                                  ", 
   "]"}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Finally, display the results in a useful form for ",
 StyleBox["n",
  FontFamily->"Courier New"],
 " taking the values 10, 100, 1000 and 10000."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        SuperscriptBox["10", "i"], ",", 
        RowBox[{"stat", "[", 
         SuperscriptBox["10", "i"], "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<n\>\"", ",", "\"\<Mean\>\"", ",", "\"\<St Dev\>\"", ",", 
        "\"\<Error/St Dev\>\""}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]],

Cell[CellGroupData[{

Cell[" ", "Subsubsection"],

Cell[TextData[{
 "We can do slightly better if we import an idea that we used in the \
rejection method for generating random numbers. Suppose we know some function \
",
 StyleBox["g",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") which has a similar shape to the function we are trying to integrate, ",
 StyleBox["f",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 "), but which is normalised over the range ",
 StyleBox["a",
  FontSlant->"Italic"],
 " to ",
 StyleBox["b",
  FontSlant->"Italic"],
 ". Then we can rewrite the integral as\n   ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "a", "b"], 
    RowBox[{
     FractionBox[
      RowBox[{"f", "(", "x", ")"}], 
      RowBox[{"g", "(", "x", ")"}]], " ", 
     RowBox[{"g", "(", "x", ")"}], " ", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->16],
 StyleBox[",",
  FontSize->16],
 "\n   and change the variable from ",
 StyleBox["x",
  FontSlant->"Italic"],
 " to ",
 StyleBox["s",
  FontSlant->"Italic"],
 " where\n   ",
 StyleBox["  ",
  FontSize->18],
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     StyleBox[
      RowBox[{"d", 
       StyleBox["s",
        FontSlant->"Italic"]}]], 
     StyleBox[
      RowBox[{"d", 
       StyleBox["x",
        FontSlant->"Italic"]}]]], " ", "=", " ", 
    RowBox[{"g", "(", "x", ")"}]}], TraditionalForm]],
  FontSize->16],
 "\n     so\n   ",
 StyleBox["  ",
  FontSize->9],
 Cell[BoxData[
  FormBox[
   RowBox[{"s", " ", "=", " ", 
    RowBox[{
     SubsuperscriptBox["\[Integral]", "a", "x"], 
     RowBox[{
      RowBox[{"g", "(", "z", ")"}], 
      RowBox[{"\[DifferentialD]", "z"}]}]}]}], TraditionalForm]],
  FontSize->16],
 "\n     and, because of the normalisation of ",
 StyleBox["g",
  FontSlant->"Italic"],
 ", the integral becomes\n     ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     SubsuperscriptBox["\[Integral]", "0", "1"], 
     RowBox[{
      FractionBox[
       RowBox[{"f", "(", 
        RowBox[{"x", "(", "s", ")"}], ")"}], 
       RowBox[{"g", "(", 
        RowBox[{"x", "(", "s", ")"}], ")"}]], 
      RowBox[{"\[DifferentialD]", "s"}]}]}],
    FontSize->18], TraditionalForm]]],
 "\n     and we evaluate this using uniform deviates over the range 0 to 1.  \
Obviously, we need to choose ",
 StyleBox["g",
  FontSlant->"Italic"],
 " so that the transformation back from ",
 StyleBox["s",
  FontSlant->"Italic"],
 " to ",
 StyleBox["x",
  FontSlant->"Italic"],
 " is tractable. If we choose \n       ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], " ", "=", " ", 
    RowBox[{
     FractionBox["1", "3"], 
     RowBox[{"(", 
      RowBox[{"4", "-", 
       RowBox[{"2", "x"}]}], ")"}]}]}], TraditionalForm]],
  FontSize->16],
 "\n   this is a reasonable choice in terms of following ",
 StyleBox["f",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.634821198009639*^9, 3.634821201331819*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"1", "+", 
       SuperscriptBox["x", "2"]}]], ",", 
     RowBox[{
      FractionBox["1", "3"], " ", 
      RowBox[{"(", 
       RowBox[{"4", "-", 
        RowBox[{"2", " ", "x"}]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Red: f(x)\\nBlue: g(x)\>\""}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<f(x),g(x)\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellOpen->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], LineBox[CompressedData["
1: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
hRkXXgr35JZN/zqXaXj6C/LwUPg/TIYXWg==
     "]]}, 
   {RGBColor[0, 0, 1], LineBox[CompressedData["
1:eJwVxX041AcAB3BKpVrClboMI6aSkVGq5auXjUg5ztC8ZVKjJPREz1rRkbzE
vKWcvFZ04xRq45IHtTKFTkNxOPc7h7v73Z27jMK2Pz7Pxzj4jMfxRWpqam7/
+X+X46Lu5nEvh8HAapqXlwoa+zdEDlFtIZpfIv6FrsLXRfnMWuoBKAr9kyo8
VXB91fuwkEqH5sBnjR9pKniHTD/JoobA1ifctPSwCoNWV/enU2OQ4r5pWuqk
QvHaI0kpVAbs95Yyk3epEK9Za36NmoMck7yxRiMVfHxL2DJ5OWLLfqMVE0qs
XIj3czJk46jqxJUAthJmNKmoNbUOtznFFpYXlDj/eifylX9Ae59mRZyjEuvq
dHjq6k9xKX+NuGiFEo/4+zs6v2mBftURjQNdU2gJK9T3Fbdhww7N7H/ypqD6
cs/qqtN/Qi/r+HjSsSksmmFp65u1w5Elp2SbT2H7QtAjz+oOhOaaLI2TK9DB
sH39fEsnpMquiDMcBYwyJ2cqpV24o1vNGk1QYHJ6iPfW+g181K1rtrkpUD7R
2K51nYtd1cPJc7oKaBncIwWCHlzs0urr75cj7af60GLTv9HUOiLNKJfjgyNL
cPJSL7aeG+1vDZMjxqatTq+1Dzemr6V128oxVN2W2m38Dtb2gRT/WRk+hvUU
bL7wHhbSB9ozzTJY7F02H9o4gI3nKt9GpMrgVGp84sE6Hg42dEYE02Q4bxBo
MuI3hFNdtzqt9GXYKvZa2es2DP7j5276HSQoq2WabbPDcHatL3/jQ0LjaQF7
I3MEFZclKXskUoTbNvYvd+Uj2OYKtTxWCtbB4OKmD3zwX1NyLZZKoZrcoC3M
G4X/KmlRaIEE9Z5Oi3MOCGDzwsyz0FyCS86JRXVCAdTM7uVebRTDeNClryyR
QO6pjc+yaGLs2sHIodoIwbCeY97kTcLPsHNGnSvE6bwvNOjRk1C1p/Mj48fw
MLaEsmJhAvkaATEepiLIPoU/jM6aAIVXX7qoTQRF+DaHefMJLLkYT995dhwe
3vQoRt041CoD2HzdCdwXNNs1OY8j6hY7XbdlAgHSlJIprghPLJI1dSIm0cc/
MnvwmAg6LlFbE7TEcIkL4Ht+GMOAZRc3jiPG+rT2KN+EMdTchqkgQIJhx8tZ
unpj8Gdv1zGYl+D0sHWRmCXE5cSS+IH7Unh9cqC32AtRJTIo0DpEwr4hL9/1
FYHkwsQg3mES7uK7T8P/IhDiITGrppE4afhYmPqSwOccTo2bN4n8hF7bjmcE
UjJ+eJ4WTGLGZX33oSYCJ7fflK+II9Hw/ubyw2wCJow1zsvuknCYY15w/5XA
vP3Pq3orSHxvVVUSmUGgXzL65i6LROSxJy8y0wlketf6f/eARPGzQb3uawQW
tnhEJ3JIqF03rKUlEBjozri9mEuixbB40iOawO9J0z9y35J4516jG32WQM7u
wM1lfSQUCc07s88QcL3zVd0+HgmTseGr3HACDbGvXsaPk2CwjU3pIQTyLO0y
aGISzJFtrjHBBM7ymXRjkkQ9ZV9UThCBTYdODTUrSRDng5t7/AhoqPeUZ06T
mKuMGlMeJTBcvzssaJbE2oEErbW+BDhhZVbWcyQstbLt7LwJ3DBaqVpYIPGt
Y5mflxeBfwH9dYKi
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["\"x\"", TraditionalForm], 
    FormBox["\"f(x),g(x)\"", TraditionalForm]},
  AxesOrigin->{0, 0.6000000000000001},
  PlotLabel->FormBox["\"Red: f(x)\\nBlue: g(x)\"", TraditionalForm],
  PlotRange->{{0, 1}, {0.5000000102040817, 1.3333333197278912`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.444974989731*^9, 3.444975751139*^9, 3.444976931557*^9, 
  3.4772905032326*^9}]
}, Open  ]],

Cell["and is invertible:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sub", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"s", "\[Equal]", 
      RowBox[{
       SubsuperscriptBox["\[Integral]", "0", "x"], 
       RowBox[{
        FractionBox["1", "3"], 
        RowBox[{"(", 
         RowBox[{"4", "-", 
          RowBox[{"2", "x"}]}], ")"}], 
        RowBox[{"\[DifferentialD]", "x"}]}]}]}], ",", "x"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"2", "-", 
    SqrtBox[
     RowBox[{"4", "-", 
      RowBox[{"3", " ", "s"}]}]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.444974989862*^9, 3.444975751256*^9, 3.444976931665*^9, 
  3.4772905035285997`*^9}]
}, Open  ]],

Cell["so that the integrand becomes", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox[
    RowBox[{"f", "[", "x", "]"}], 
    RowBox[{"g", "[", "x", "]"}]], "/.", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
      FractionBox["1", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "2"]}]]}], ",", 
     RowBox[{
      RowBox[{"g", "[", "x", "]"}], "\[Rule]", 
      RowBox[{
       FractionBox["1", "3"], " ", 
       RowBox[{"(", 
        RowBox[{"4", "-", 
         RowBox[{"2", " ", "x"}]}], ")"}]}]}]}], "}"}]}], "/.", 
  "\[InvisibleSpace]", "sub"}]], "Input"],

Cell[BoxData[
 FractionBox["3", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"4", "-", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{"2", "-", 
        SqrtBox[
         RowBox[{"4", "-", 
          RowBox[{"3", " ", "s"}]}]]}], ")"}]}]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "-", 
        SqrtBox[
         RowBox[{"4", "-", 
          RowBox[{"3", " ", "s"}]}]]}], ")"}], "2"]}], ")"}]}]]], "Output",
 CellChangeTimes->{3.4449749898900003`*^9, 3.444975751292*^9, 
  3.444976931726*^9, 3.4772905036916*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mcet", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       FractionBox["3", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"2", "-", 
              SqrtBox[
               RowBox[{"4", "-", 
                RowBox[{"3", " ", "s"}]}]]}], ")"}]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"2", "-", 
              SqrtBox[
               RowBox[{"4", "-", 
                RowBox[{"3", " ", "s"}]}]]}], ")"}], "2"]}], ")"}]}]], "/.", 
       RowBox[{"s", "\[Rule]", 
        RowBox[{"RandomReal", "[", "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], "/", 
   "n"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stat", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t", ",", "mm", ",", "sd"}], "}"}], ",", "\[IndentingNewLine]", 
    "                                    ", 
    RowBox[{
     RowBox[{"t", ":=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"mcet", "[", "n", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "                                    ", 
     RowBox[{"mm", "=", 
      RowBox[{"Mean", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
     "                                    ", 
     RowBox[{"sd", "=", 
      RowBox[{"StandardDeviation", "[", "t", "]"}]}], ";", 
     "\[IndentingNewLine]", "                                   ", 
     RowBox[{"{", 
      RowBox[{"mm", ",", "sd", ",", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{"mm", "-", 
          RowBox[{"\[Pi]", "/", "4"}]}], "]"}], "/", "sd"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "                                  ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        SuperscriptBox["10", "i"], ",", 
        RowBox[{"stat", "[", 
         SuperscriptBox["10", "i"], "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<n\>\"", ",", "\"\<Mean\>\"", ",", "\"\<St Dev\>\"", ",", 
        "\"\<Error/St Dev\>\""}], "}"}]}], "}"}]}]}], "]"}]}], "BoxedProgram",
 CellChangeTimes->{{3.634969894960004*^9, 3.6349698965658092`*^9}}],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"n\"\>",
       HoldForm], 
      TagBox["\<\"Mean\"\>",
       HoldForm], 
      TagBox["\<\"St Dev\"\>",
       HoldForm], 
      TagBox["\<\"Error/St Dev\"\>",
       HoldForm]},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "10", 
      "0.7847877841372064`", "0.008214995258166012`", "0.07430062234486844`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "100", 
      "0.7856864705233291`", "0.002441149538545111`", "0.11810301717633416`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "1000", 
      "0.785644052450406`", "0.0006060498858756252`", "0.40572411395224695`"},
     {
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], "10000", 
      "0.7853453565122519`", "0.0002666378690022509`", "0.1980472068501688`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{}, {
      "n", "Mean", "St Dev", "Error/St Dev"}}]]]], "Output",
 CellChangeTimes->{3.444975020505*^9, 3.4449757799560003`*^9, 
  3.444976960915*^9, 3.4772905340046*^9, 3.634821220608386*^9, 
  3.63496990685533*^9}],

Cell[TextData[{
 "The crucial point is that the standard deviation is much lower for a given ",
 StyleBox["n",
  FontSlant->"Italic"],
 " than with the unbiased sampling."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation:", "Subsubsection",
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
This is very similar to the previous version: all we have done is to alter \
the function to reflect the change of variables:\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mcet", "[", "n_", "]"}], ":=", 
  RowBox[{
   FractionBox["1", "n"], 
   RowBox[{"Plus", "@@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       FractionBox["3", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"2", "-", 
              SqrtBox[
               RowBox[{"4", "-", 
                RowBox[{"3", " ", "s"}]}]]}], ")"}]}]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"2", "-", 
              SqrtBox[
               RowBox[{"4", "-", 
                RowBox[{"3", " ", "s"}]}]]}], ")"}], "2"]}], ")"}]}]], "/.", 
       "\[InvisibleSpace]", 
       RowBox[{"s", "\[Rule]", 
        RowBox[{"RandomReal", "[", "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}]}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
The only subtle point is the way we set up the table, where we have to ensure \
that the same random number appears in each position in the formula. Thus\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", "+", "s"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"b", "+", "s"}], ")"}]}]], "/.", "\[InvisibleSpace]", 
  RowBox[{"s", "\[Rule]", 
   RowBox[{"RandomReal", "[", "]"}]}]}]], "Input",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"0.027552800417759427`", "\[InvisibleSpace]", "+", "a"}], ")"}], 
   " ", 
   RowBox[{"(", 
    RowBox[{"0.027552800417759427`", "\[InvisibleSpace]", "+", "b"}], 
    ")"}]}]]], "Output",
 CellChangeTimes->{3.444975020599*^9, 3.4449757800290003`*^9, 
  3.444976961008*^9, 3.4772905342676*^9}]
}, Open  ]],

Cell["does what we want but", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "+", 
     RowBox[{"RandomReal", "[", "]"}]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"b", "+", 
     RowBox[{"RandomReal", "[", "]"}]}], ")"}]}]]], "Input",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"0.34796227855923045`", "\[InvisibleSpace]", "+", "a"}], ")"}], 
   " ", 
   RowBox[{"(", 
    RowBox[{"0.7406698663202864`", "\[InvisibleSpace]", "+", "b"}], 
    ")"}]}]]], "Output",
 CellChangeTimes->{3.4449750206540003`*^9, 3.4449757800629997`*^9, 
  3.444976961054*^9, 3.4772905344175997`*^9}]
}, Open  ]],

Cell["\<\
does not.

   The rest of the code is as before.\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]],

Cell[CellGroupData[{

Cell[" ", "Subsubsection"],

Cell[TextData[{
 " More generally, we can use the technique of ",
 StyleBox["importance sampling",
  FontColor->RGBColor[1, 0, 0]],
 "  with any probability distribution ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") and estimate\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "a", "b"], 
    RowBox[{
     FractionBox[
      RowBox[{"f", "(", "x", ")"}], 
      RowBox[{"p", "(", "x", ")"}]], " ", 
     RowBox[{"p", "(", "x", ")"}], " ", 
     RowBox[{"\[DifferentialD]", "x"}]}]}], TraditionalForm]],
  FontSize->16],
 " \nby taking ",
 StyleBox["N",
  FontSlant->"Italic"],
 " samples ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " from the distribution ",
 StyleBox["p",
  FontSlant->"Italic"],
 "(",
 StyleBox["x",
  FontSlant->"Italic"],
 ") and evaluating\n ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "N"], 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"i", "=", "1"}], "N"], 
     RowBox[{
      FractionBox[
       RowBox[{"f", "(", 
        SubscriptBox["x", "i"], ")"}], 
       RowBox[{"p", "(", 
        SubscriptBox["x", "i"], ")"}]], "."}]}]}], TraditionalForm]],
  FontSize->16]
}], "Text",
 CellChangeTimes->{{3.6348906954597883`*^9, 3.634890700684987*^9}, {
  3.634894465187737*^9, 3.6348944772641687`*^9}, {3.666340737886126*^9, 
  3.6663407383643913`*^9}, {3.666340782733465*^9, 3.6663407828737993`*^9}}],

Cell[TextData[{
 "  We must stress, however, that the Monte Carlo is not a serious contender \
for one-dimensional integrals. It is much better to use one of the standard \
schemes (see the description of the algorithms used in ",
 StyleBox["NIntegrate",
  FontFamily->"Courier New"],
 " for some of the names).  The important point, though, is that for a Monte \
Carlo scheme using ",
 StyleBox["n",
  FontSlant->"Italic"],
 " samples, the expected error varies as ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    FractionBox["1", "n"]], TraditionalForm]]],
 ". For a conventional scheme in ",
 StyleBox["d",
  FontSlant->"Italic"],
 " dimensions the same number of points, ",
 StyleBox["n",
  FontSlant->"Italic"],
 "/",
 StyleBox["d",
  FontSlant->"Italic"],
 ", will be used in each dimension, and the error typically varies as some \
power of ",
 StyleBox["d",
  FontSlant->"Italic"],
 "/",
 StyleBox["n",
  FontSlant->"Italic"],
 ", say ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["d", "n"], ")"}], "\[Alpha]"], "."}], TraditionalForm]]],
 " This means that as the dimensionality ",
 StyleBox["d",
  FontSlant->"Italic"],
 " increases there comes a point at which the Monte Carlo method wins."
}], "Text",
 CellChangeTimes->{3.6348945785976267`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monte Carlo Simulation", "Section"],

Cell[TextData[{
 "\n  As you have seen in this term's Thermal Physics course, the probability \
density of atomic-scale systems is controlled by the Boltzmann distribution.  \
Under conditions of a fixed large number of distinguishable particles in \
equilibrium at a temperature ",
 StyleBox["T,",
  FontSlant->"Italic"],
 " the probability of occupation of an energy level ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["E", "i"], TraditionalForm]]],
 " will be given by\n ",
 StyleBox["p",
  FontSize->16,
  FontSlant->"Italic"],
 StyleBox["(",
  FontSize->16],
 Cell[BoxData[
  FormBox[
   SubscriptBox["E", "i"], TraditionalForm]],
  FontSize->14],
 StyleBox[")",
  FontSize->14],
 StyleBox[" := ",
  FontSize->16],
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"exp", "(", 
     RowBox[{
      RowBox[{"-", 
       FormBox[
        SubscriptBox["E", "i"],
        TraditionalForm]}], "/", 
      RowBox[{"(", 
       RowBox[{
        FormBox[
         SubscriptBox["k", "B"],
         TraditionalForm], "  ", 
        StyleBox["T",
         FontSlant->"Italic"]}], ")"}]}], ")"}], 
    RowBox[{
     UnderscriptBox["\[Sum]", "i"], 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", 
        FormBox[
         SubscriptBox["E", "i"],
         TraditionalForm]}], "/", 
       RowBox[{"(", 
        RowBox[{
         FormBox[
          SubscriptBox["k", "B"],
          TraditionalForm], "  ", 
         StyleBox["T",
          FontSlant->"Italic"]}], ")"}]}], ")"}]}]], TraditionalForm]],
  FontSize->16],
 "."
}], "Text",
 CellChangeTimes->{{3.634894633107417*^9, 3.634894637689399*^9}}],

Cell[TextData[{
 " What is perhaps surprising is that the behaviour of systems can be \
modelled quite successfully with quite small numbers of particles.  \
Furthermore, the approach to equilibrium can be mimicked by the Monte Carlo \
method.  This method uses the computer's random number generator to simulate \
the exchanges of energy between particles which occur as the system \
approaches equilibrium, and was first used on the ",
 StyleBox["MANIAC",
  FontFamily->"Courier New"],
 " computer at Los Alamos in the early 1950s (Metropolis, Rosenbluth, \
Rosenbluth, Teller and Teller, ",
 StyleBox["Journal of Chemical Physics,",
  FontSlant->"Italic"],
 " ",
 StyleBox["21",
  FontWeight->"Bold"],
 ", 1087, 1953): it is often referred to as the ",
 StyleBox["Metropolis algorithm",
  FontColor->RGBColor[1, 0, 0]],
 ", after the first author. "
}], "Text",
 CellChangeTimes->{{3.634894972367437*^9, 3.634894984430759*^9}}],

Cell[TextData[{
 "\n   The basic idea is to start with a random distribution of particles \
over energy levels, randomly pick a particle, randomly alter its energy \
level, and then evaluate the total energy.   If the energy is decreased as a \
result of the change, the change is accepted and one proceeds to the next \
random change.  The subtle point, though, is that if the energy is increased \
by the change, the change is not always rejected: instead another random \
number is picked, between 0 and 1, and if the energy change \[CapitalDelta]",
 StyleBox["E",
  FontSlant->"Italic"],
 " is such that exp(-\[CapitalDelta]",
 StyleBox["E",
  FontSlant->"Italic"],
 "/",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "B"], TraditionalForm]]],
 StyleBox["T",
  FontSlant->"Italic"],
 ") is greater than this random number the new state is accepted even though \
it increases the energy.  The point of this is that it allows the system to \
\[OpenCurlyQuote]shake\[CloseCurlyQuote] itself out of regions which are \
local minima of the energy surface, but not the global minimum.  It is clear \
that the higher the temperature ",
 StyleBox["T,",
  FontSlant->"Italic"],
 " the greater the probability of accepting an 'uphill jump'."
}], "Text",
 CellChangeTimes->{{3.634895004601405*^9, 3.6348950514622383`*^9}}],

Cell[TextData[{
 " To make the 'system', 'particles' and 'energy levels' take on some \
meaning, let us consider the ",
 StyleBox["Ising model",
  FontColor->RGBColor[1, 0, 0]],
 ". This is probably one of the most widely studied of model systems, and \
although it was originally applied to magnetic systems (and this is the \
approach we shall follow) it is equally applicable to metallic alloys, the \
growth of solids from vapour, and other problems. The form of the Ising model \
which we use assumes that atoms with unpaired electrons are arranged on a \
square lattice, and that the energy of the whole system is given by \n        \
   ",
 Cell[BoxData[
  FormBox[
   RowBox[{"E", " ", "=", " ", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"i", ",", 
         RowBox[{"j", "=", "i"}]}], "N"], 
       RowBox[{
        SubscriptBox["J", "ij"], " ", 
        RowBox[{
         SubscriptBox["s", "i"], ".", 
         SubscriptBox["s", "j"]}]}]}]}], "-", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "1"}], "n"], 
      RowBox[{"m", " ", 
       RowBox[{"B", ".", 
        SubscriptBox["s", "i"]}]}]}]}]}], TraditionalForm]]],
 ",\n The coupling constant ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["J", "ij"], TraditionalForm]]],
 " represents a quantum mechanical exchange interaction between the spins \
(not a classical magnetic dipole-dipole interaction between their magnetic \
moments, which would be far too weak an effect to account for phenomena such \
as ferromagnetism which the Ising model seeks to explain).  We shall take ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["J", "ij"], TraditionalForm]]],
 " to be zero unless ",
 StyleBox["i",
  FontSlant->"Italic"],
 " and ",
 StyleBox["j",
  FontSlant->"Italic"],
 " are nearest-neighbour sites of the square lattice, in which case it will \
be taken to have a constant value, ",
 StyleBox["J",
  FontSlant->"Italic"],
 ".  Note that as the energy expression is written, if ",
 StyleBox["J",
  FontSlant->"Italic"],
 " is positive it favours a parallel alignment of the spins.   The second \
term represents the interaction of the spins, magnetic moments ",
 StyleBox["m s",
  FontSlant->"Italic"],
 ", with an applied external field ",
 StyleBox["B",
  FontSlant->"Italic"],
 ".\n           \nIn the simulations which follow, we take the spins to be \
1/2, so that each has only two possible directions, and thus they interact:\n \
 1. with each other with coupling constant ",
 StyleBox["J",
  FontSlant->"Italic"],
 " (the energy is lower if two neighbouring spins are parallel than if they \
are antiparallel): in the simulation below ",
 StyleBox["J / (",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "B"], TraditionalForm]]],
 StyleBox[" T)",
  FontSlant->"Italic"],
 " is called ",
 StyleBox["joverkt,",
  FontFamily->"Courier New"],
 "\n  2. with an applied magnetic field: here the key quantity is the ratio ",
 StyleBox["B m / (",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "B"], TraditionalForm]]],
 StyleBox[" T),",
  FontSlant->"Italic"],
 StyleBox[" boverkt.\n\n",
  FontFamily->"Courier New"],
 "In the Monte Carlo Ising simulation one must:\n  1.  Set up random \
arrangement of spins,\n  2.  Pick a spin at random,\n  3.  Calculate the \
energy change arising from reversing that spin,\n  4.  If the energy change \
is negative, OR on randomly selected but infrequent occasions when the energy \
change is positive, reverse the spin (this is to allow the system to skip out \
of local minima),\n  5.  Keep going.\nNote that the updates are done at \
random, sequentially, in the mesh -- we do not use a cellular automaton \
'update all at once' approach.  \nOne more thing needs to be settled: the \
boundary conditions to be applied at the edges of the simulation.  Here we \
loop the system back on itself: that is, we use periodic boundary conditions.\
\nDependent on the settings of ",
 StyleBox["joverkt ",
  FontFamily->"Courier New"],
 "and ",
 StyleBox["boverkt,",
  FontFamily->"Courier New"],
 " you will see the system keep up a random arrangement of spins, or align in \
blocks (even in zero external field - corresponding to a ferromagnetic \
state). The degree of long-range order (which is just the average of the spin \
over the whole system) is monitored and plotted at the end."
}], "Text",
 CellChangeTimes->{{3.6348951161920223`*^9, 3.63489518647196*^9}, {
  3.63489601478452*^9, 3.634896024425995*^9}}],

Cell[TextData[{
 " We now define some parameters of the simulation.The maximum number of \
Monte Carlo steps (i.e. changes of spin) is ",
 StyleBox["maxstep",
  FontFamily->"Courier New"],
 ". A two-dimensional diagram of the distribution of spins will be plotted \
every ",
 StyleBox["Ising",
  FontFamily->"Courier New"],
 " Monte Carlo steps. Probably five such diagrams will be enough to allow us \
to follow the evolution of the system, so set ",
 StyleBox["gstep",
  FontFamily->"Courier New"],
 " to ",
 StyleBox["maxstep/5",
  FontFamily->"Courier New"],
 ". We would like to see how the amount of order in the system changes as it \
evolves. To do this we save the order parameter every ",
 StyleBox["lostep",
  FontFamily->"Courier New"],
 " steps.  We probably do not want more than 100 points in this graph, so \
choose ",
 StyleBox["lostep",
  FontFamily->"Courier New"],
 " to be ",
 StyleBox["maxstep/100",
  FontFamily->"Courier New"],
 ". We will also average the order, and record this average, the average \
energy, and the mean square deviation of the order, but we do not want to do \
this during the early stages, before the simulation has approached the \
equilibrium state.  Accordingly we begin to record these quantities after ",
 StyleBox["bstep",
  FontFamily->"Courier New"],
 " steps, say after 9/10th of the simulation."
}], "Text",
 CellChangeTimes->{{3.6663424538064613`*^9, 3.666342454581888*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"maxstep", "=", "10000"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"bstep", "=", " ", 
   RowBox[{"9", " ", 
    RowBox[{"maxstep", "/", "10"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"lostep", "=", 
   RowBox[{"maxstep", "/", "100"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gstep", "=", " ", 
   RowBox[{"maxstep", "/", "10"}]}], ";"}]}], "BoxedProgram"],

Cell[TextData[{
 " The next parameter, ",
 StyleBox["l",
  FontFamily->"Courier New"],
 ", is going to have the largest influence on the length of time taken to run \
the simulation.  It is the number of spins along each side of the square \
lattice.  A choice of 50 should give an adequate result, but may take rather \
too long; anything less than 10 will be too small to be useful."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"l", "=", "50"}], ";"}]], "BoxedProgram",
 CellChangeTimes->{{3.634970475991456*^9, 3.63497047643297*^9}, {
  3.6349708232608767`*^9, 3.634970823678258*^9}, {3.634971896104148*^9, 
  3.63497189738575*^9}}],

Cell[TextData[{
 " We now define the physical parameters of the simulation.  Initially, we \
choose to have an external field (",
 StyleBox["boverkt ",
  FontFamily->"Courier New"],
 "= 0.4) but no interactions between the spins (",
 StyleBox["joverkt",
  FontFamily->"Courier New"],
 " = 0.0). "
}], "Text",
 CellChangeTimes->{{3.4772911622236*^9, 3.4772911624186*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"boverkt", "=", "0.4"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"joverkt", "=", "0.0"}], ";"}]}], "BoxedProgram",
 CellChangeTimes->{{3.4772911646326*^9, 3.4772911650866003`*^9}}],

Cell[TextData[{
 "Now begin by setting up the table ",
 StyleBox["ml",
  FontFamily->"Courier New"],
 " with randomly placed value of +1 and -1."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", " ", 
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"l2", "=", 
   RowBox[{"l", " ", "l"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SeedRandom", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ml", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1."}], ")"}], "^", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ",", 
     RowBox[{"{", "l", "}"}], ",", 
     RowBox[{"{", "l", "}"}]}], "]"}]}], ";"}]}], "BoxedProgram",
 CellChangeTimes->{{3.444976554851*^9, 3.4449765889519997`*^9}, {
   3.634971549629179*^9, 3.634971585163542*^9}, {3.634971711217342*^9, 
   3.634971714169526*^9}, {3.634971753716188*^9, 3.6349717585519133`*^9}, {
   3.634971877942649*^9, 3.634971885500725*^9}, 3.634972014420415*^9, {
   3.634972436403987*^9, 3.634972441867972*^9}, {3.6349725168972483`*^9, 
   3.6349725885174837`*^9}}],

Cell["\<\
Set up values to accumulate the energy, spin, and spin-squared. Calculate the \
initial average spin, and plot the initial spins.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ml", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.444976631271*^9, 3.4449766409969997`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.4449766367130003`*^9, 3.4449766421210003`*^9}, 
   3.444976961149*^9, 3.4772905349806004`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sume", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ2", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"etot", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"longorder", "=", 
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"Plus", ",", 
       RowBox[{"Flatten", "[", "ml", "]"}]}], "]"}], "/", "l2"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"gra", "=", 
  RowBox[{"MatrixPlot", "[", 
   RowBox[{"ml", ",", 
    RowBox[{"Mesh", "->", "False"}]}], "]"}]}]}], "BoxedProgram",
 CellChangeTimes->{{3.444976492226*^9, 3.444976514167*^9}, {3.444976701049*^9,
    3.444976704356*^9}, 3.634971979356762*^9, 3.634972242991243*^9, 
   3.634972454000473*^9, 3.634972595064549*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmKGqVlEQhX/wBQTtIpiMNtOJdpP5gtlutPguCiax+AJGLYZrut3gI4hc
i80Da531rTn7hwuX4TB7zTezZ8/eD69ePX9553K5PPn79+f/29+v7eb1/Q/P
bq63yz+//7c/fvDm3bf3X7eruy+efvzyfftx79Gnz29/bu7v3eum/ND8u3Wq
1lXZVXl360lxVvlXfd9up/Wx9r7k5q+yr31xTFy0Ok/xTHGeqv9sfTg1/9Dq
oUWnKq6UH3e+UnpUeXfzORsHt/52P2f7XsVzrct8b1Gtq+LWkpdUXDT+7fXc
/p7Zoofmv6Wu3HHR7qctHNz1oLLT+hutHlI8VetO3b+pvNDmxpb6ca/rrgeV
vf28UMW78nsM/706W85B2r2SVue0OSS17tn6Z0pPS7y0dw9aHlvse+Nyc0vp
adffcr+grdty3rX07XVvPYZPy/cpbnv9tN+DWuJ15512LtDeqWj9ueWe0v59
ir/KTpvfaPml7aOWulLxn8qzpc/TOLfkl1YntLyr1nX7aZkfWuJy5yvFsyWP
Kp0pDrR5j9af3RxU36f00+JScaDtU3d+aX6mzr20fU2rh5a80O6V7fU/lUM7
H5W9PS8pnrR3p5R/Wn+m1Rutz6jsLTr36lfF21JvLXym9lu3nva5KGVviYt2
jtP6RipeGh83hxS3Fv7t9xrae5pqXdo9kca/pf+0cFscZvRJtx4ah/a+2sLN
zb9lLmo/N1vqpEXn1Lm3/Rx3c6blvb0vTb13q7jR3v1o+mlzAk0/TU/7Pm3p
e3v1uPW366HFS+PZcj6m9Ljz4tZD66tTzztVnbg5uPM7lT+NjzteGgcat/b5
mdbP3XZa/2lft2U+pM2NtP7prh9aPaS40eJq4UY7391+ztZPVPb282Ltx2P0
p/TQ/Lj50PqYal3afK7y7+bp5k/z38LHvW7L+eX2T+sPLe+NKj5uzi37mqZn
at+g7aPUezXN7s4XTY/KP60vqfy77Wc7F1Qc3H7c+Urxn3p/bH+PXTy18dL6
Uop/Ki+0c8qtkzavpvLo5u/Oe6p+2vWn6oq2v9zx0vynvp+aF9q8RMsvTWd7
/1H5T/Gk6adxa+c8tU/S5qj2eN18zjYPuONy63HH5fZD6xtT+1XK3j4fttTP
4jz7nKJxoNWJ+3uaH9W6NJ3uuqLVOY3b1Hhb5jHanOnW6dbTsi6tP6s4uP3Q
5uQW/S3niMo+da5z83Hrmdo/affZVB5p66ry5faz7Le/s/VVmp+1L7TcUnlZ
8zBTv6oOWzjsjXf5P8Z/yxyl4tOSl7PpbJkH3PHS7pvt55c7j6l4W3jSuLnX
Vfmn1RVtv9D80OaWljmfVv9u/Sl7y35PxUurK3ceVXmh9R/aeeSOd++6U+20
+mnhQPNDu9/R6qRlTnZzcHNbHJjnNa0/pHS683I2nrT9S7u/tLyLpuqhhVuK
gzsvq99q+aw54Rg/tL5B8zP1XGj5fq+f3yd1buk=
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.444976514966*^9, 3.444976525921*^9}, 3.444976596455*^9, 
   3.444976705501*^9, 3.444976961244*^9, 3.4772905352586*^9, 
   3.4772911766516*^9, 3.634970441848733*^9, 3.634970492448799*^9, 
   3.634970644306161*^9, 3.6349708394184103`*^9, {3.634971568244214*^9, 
   3.6349715892787247`*^9}, 3.634971792627157*^9, 3.634971906662162*^9, 
   3.634971980071002*^9, 3.63497201937819*^9, 3.6349722504622383`*^9, {
   3.634972450608007*^9, 3.6349724664362297`*^9}, 3.63497250139815*^9, 
   3.634972595671357*^9}],

Cell[TextData[{
 "Now pick random points in the mesh ",
 StyleBox["(i1,i2)",
  FontFamily->"Courier New"],
 ", calculate the total spin of the neighbours ",
 StyleBox["dg",
  FontFamily->"Courier New"],
 " (applying periodic boundary conditions), and the change of energy (in \
units of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", "B"], "T"}], TraditionalForm]]],
 ") ",
 StyleBox["de",
  FontFamily->"Courier New"],
 " associated with flipping the spin at ",
 StyleBox["(i1,i2)",
  FontFamily->"Courier New"],
 ". If this energy change is negative, make the flip. If the energy change is \
positive accept the flip with probability exp(-",
 StyleBox["de",
  FontFamily->"Courier New"],
 ").  Accumulate the results, plot the graphs."
}], "Text"],

Cell[BoxData[{
 RowBox[{"Do", "[", "\n", "\t    ", 
  RowBox[{
   RowBox[{
    RowBox[{"i1", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
    RowBox[{"i2", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
    RowBox[{"j1", "=", 
     RowBox[{"i1", "+", "1"}]}], ";", 
    RowBox[{"j2", "=", 
     RowBox[{"i2", "+", "1"}]}], ";", 
    RowBox[{"k1", "=", 
     RowBox[{"i1", "-", "1"}]}], ";", 
    RowBox[{"k2", "=", 
     RowBox[{"i2", "-", "1"}]}], ";", "\n", "\t    ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"j1", ">", "l"}], ",", 
      RowBox[{"j1", "=", "1"}]}], "]"}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"j2", ">", "l"}], ",", 
      RowBox[{"j2", "=", "1"}]}], "]"}], ";", "\n", "\t   ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"k1", "<", "1"}], ",", 
      RowBox[{"k1", "=", "l"}]}], "]"}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"k2", "<", "1"}], ",", 
      RowBox[{"k2", "=", "l"}]}], "]"}], ";", "\n", "\t   ", 
    RowBox[{"dg", "=", " ", 
     RowBox[{
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"j1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"k1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "j2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "k2"}], "]"}], "]"}]}]}], ";", "\n", "\t   ", 
    RowBox[{"etot", "=", "\n", "\t\t    ", 
     RowBox[{"etot", "-", 
      RowBox[{"joverkt", " ", "dg", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}], "-", 
      RowBox[{"boverkt", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}]}]}], ";", "\n", "\t   ", 
    RowBox[{"de", "=", 
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"joverkt", " ", "dg"}], " ", "+", " ", "boverkt"}], ")"}]}]}],
     ";", "\n", "\t   ", 
    RowBox[{"dw", "=", 
     RowBox[{"N", "[", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", "de"}], "]"}], "]"}]}], ";", "\n", "\t  ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"dw", "<", "1"}], " ", "&&", " ", 
        RowBox[{"dw", ">", 
         RowBox[{"RandomReal", "[", "]"}]}]}], " ", "||", " ", 
       RowBox[{"de", "<", "0"}]}], ",", "\n", "\t\t       ", 
      RowBox[{
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}], "=", 
       RowBox[{"-", 
        RowBox[{"ml", "[", 
         RowBox[{"[", 
          RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}]}]}], "\n", "\t\t    ", 
     "]"}], ";", "\n", "\t  ", 
    RowBox[{"mm", "=", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"Plus", ",", 
        RowBox[{"Flatten", "[", "ml", "]"}]}], "]"}], "/", "l2"}]}], ";", 
    "\n", "\t  ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"i", ",", "lostep"}], "]"}], "==", "0"}], ",", "\n", 
      "\t\t       ", 
      RowBox[{"longorder", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"longorder", ",", "\n", "\t\t\t\t\t", 
          RowBox[{"Abs", "[", "mm", "]"}]}], "}"}], "]"}]}]}], "\n", 
     "\t\t    ", "]"}], ";", "\n", "\t  ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"i", ",", "gstep"}], "]"}], "==", "0"}], ",", "\n", 
      "\t\t      ", 
      RowBox[{"Print", "[", 
       RowBox[{"MatrixPlot", "[", 
        RowBox[{"ml", ",", "\n", "\t\t\t\t         ", 
         RowBox[{"Mesh", "->", "False"}], ",", "\n", "\t\t\t\t         ", 
         RowBox[{"PlotLabel", "->", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<Iteration number ``\>\"", ",", "i"}], "]"}]}]}], "\n",
         "\t\t                 ", "]"}], "\n", "\t      ", "]"}]}], "]"}], 
    ";", "\n", "\t\t", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"i", ">", "bstep"}], ",", "\n", "\t\t     ", 
      RowBox[{
       RowBox[{"summ", "=", 
        RowBox[{"summ", "+", "mm"}]}], ";", "\n", "\t\t\t   ", 
       RowBox[{"summ2", "=", 
        RowBox[{"summ2", "+", 
         RowBox[{"mm", " ", "mm"}]}]}], ";", "\n", "\t\t\t   ", 
       RowBox[{"sume", "=", 
        RowBox[{"sume", "+", "etot"}]}]}]}], "]"}]}], ",", "\n", "  \t", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "maxstep"}], "}"}]}], "\n", " ", "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"longorder", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", "\n", "\t", 
     RowBox[{"Joined", "->", "True"}], ",", 
     RowBox[{"PlotLabel", "->", "\"\<Long-range order parameter\>\""}]}], 
    "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ2", "=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"summ2", "/", 
      RowBox[{"(", 
       RowBox[{"maxstep", "-", "bstep"}], ")"}]}], "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"summ", "/", 
        RowBox[{"(", 
         RowBox[{"maxstep", "-", "bstep"}], ")"}]}], ")"}], "^", "2"}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"summ", "=", 
    RowBox[{"summ", "/", 
     RowBox[{"(", 
      RowBox[{"maxstep", "-", "bstep"}], ")"}]}]}], ";"}]}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"sume", "=", 
    RowBox[{"sume", "/", 
     RowBox[{"(", 
      RowBox[{"maxstep", "-", "bstep"}], ")"}]}]}], ";"}]}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{
     "\"\<l=``  boverkt=``  joverkt=`` run for `` steps\>\"", ",", "l", ",", 
      "boverkt", ",", "joverkt", ",", "maxstep"}], "]"}], "]"}], 
   ";"}]}], "\n", 
 RowBox[{"\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<RMS spin deviation = ``\>\"", ",", 
      RowBox[{"N", "[", "summ2", "]"}]}], "]"}], "]"}], ";"}]}], "\n", 
 RowBox[{"\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<Mean spin = ``\>\"", ",", 
      RowBox[{"N", "[", "summ", "]"}]}], "]"}], "]"}], ";"}]}], "\n", 
 RowBox[{"\t\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<Mean energy = ``\>\"", ",", 
      RowBox[{"N", "[", "sume", "]"}]}], "]"}], "]"}], 
   ";"}]}]}], "BoxedProgram",
 CellChangeTimes->{{3.4449761055299997`*^9, 3.444976122785*^9}, {
  3.444976472586*^9, 3.444976478584*^9}, {3.444976717238*^9, 
  3.444976720238*^9}, {3.6349699625787277`*^9, 3.634969986660825*^9}, {
  3.634970567400922*^9, 3.63497056828901*^9}, {3.634972262218445*^9, 
  3.634972294691399*^9}, {3.6349724035621643`*^9, 3.634972415629178*^9}}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmq2KlmEQhj/wBATtIpiMNtMX7Sbzwma70eK5KJjE4gkYtRg0bd/gIYho
MSi8y4z3dc3zLAgyLDP33PP7zLv3L54/vbx1Op0e/f738/+/fr6fr17cffvk
6uv59MdPn/zhvZevP7/5dL64/ezxu49fzt/uPHj/4dX1uer3afgteiy8bfkM
eXcfoOXb3/CkeKjC0+1vd3xTeUXjuTuvunnolnfjtPNGqyNaXVh4q+I5ZTc1
71L5SZOn8O/+6cqTo36l+lW3Xxb+afppfFrmS5Uemr/d8bXjp9ml7Y3dPKT8
2n3gZnpWqxdLXLp5S+Gh4U/pod2FaPelqXpW6280u7S9KCWfyrPlHUrjjSaf
Gsepe3h3HGn80HB2+2u/Y9Dqzi6n3XOq7Fr4TNm1xMWih7aH0/ydyk83Tpr+
o3btc4E2Xyw4aftnigcLb1U4afrt/dCy96b4p8XXbtfSZ2hzxPKO7pavlp8p
ud0vexxpeFI4afcQy3vT3id3/jPtduOn3SFTftl53ny6+Ozmp1uPhZ+UXVod
0fjpxmOvi6ly2p5fhbPbbjf/qXjZ68X+Xp66N9J4o+VDlf7VcHbHq0q/XU6b
U1X4aX1jy/8tnzpn97t793MCfks+0Oo3xWd3XGj+WnCm5Ja+YZ+PtDy33Mcs
9Wu/n6TwdOPv3v8t+bzzn4nfcveo+v2Nh7lf2Xmw9Jkqv2j3q25/afyn8BzF
SdtP7PmZiksKD63e99z5P3LLO8WCMyWn4aTVo+VuluKTZpfm12pz0/J9vIoH
mpzWZyz9kxZ32rugG7+lT9L4pOmxxJ3G89Q8tNQ1LV60ej+q344/5S+Nn9Vw
0uS0uUnTT3tv0voArQ/T+Om2m8JP85d2F6X5teU3k1t4pr1HLH2YtufQeKbd
XVNyy35Cqztaflq+K03tAyn8VXYt/SrF29S9ops3ux67fGreWv7ugsZDlf7V
6pTmL23fm8q/3V+afLX3Szeeo3q6f9/SZyz1RXtfW+Kbklvylrb3WvB0263C
Q+MzhTP1TrTsJ7Q9p0r/anJLn9xxr5Xb9zFa/tD69tR6sbyjV5PT+gCtv1n2
PdrdgMZDFc6UfKpf3XJaH7D0PYvdKjy0PdPyvZvWh2n3cBo/KZ5TfNJ4ttQd
bd9LxcX+vWzPNea9qBuP/TuCpT+k9Ft4oNXLVLllXnT7a+9v3fyk8HTLaXGx
zK/V9lt7XVjwr9bfdp5k8R/VQ/M3JU+9x2l3gyq7qbhU6Z9aL/a40+qFlp/d
eqp4tvvbHV+LfotdWj7Q8jCF3/L+XY3Po/qn3h8sc9+CM8XDUf1V/NDsTsWZ
wp/aVy15TouLxS97vCw80PJkatxpPKd46PaXxoMFJ21e0/hM6a/CY8GZwkOT
2/utHWe3v7T3Dm2/nfodJDWPfgCpkBqe
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`5000\\)\"", 
     StringForm["Iteration number ``", 5000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726020321493`*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmrGKVEEQRQf8AUFzEYwMzYwmNDcyXjA2NzTxXxSMxMQfMNTEYI02N/AT
RMbEZOCNXXvPqVcDC8vlUX3v7erq6n7v4dWr5y/vHA6HJ3///vx/+v063ry+
/+HZzfXx8M/v//HHD968+/b+6/Hq7ounH798P/649+jT57c/j6uep/FJ6a32
jaZ3a3waT5peC07L81S+2etGtc8WXV35pOaF5jNNV9d5odXDrnVpb/NIwy26
LHky+GW4pQ+367X7k9pPU/sIjU+KZzX/aty+Xmi6aDxp467iaeG/VVdXPrR5
pPlPw2n3tJZ+Y/DLcPu99+CnH2090vKHVie7+mPhSdvv7OvXnj8W/tU+VMex
3A+k9NLqwNb4lnVk4b+3foA2btd8sOui7TvVPnTVu8ofy7h2/imcxn/OWUw/
aePS6kbXOKvw6vWY+t7D7jONZ+r5lK6u/FO4/fscWp7T8jm1j9DWRdf9jsZn
lZ9deVr6tFT81PymxrX4Vu2DhSdtfx/8dnBL/V+li+b/Kl12vbT6Q4tT7TOt
H6vWm4pTPa5lHmn7RUqXxZ+ueUjzh6aXxmfw02/m5Tw+90JMP2n8u84vjb+9
D9/Kh9a/0Xzomg8pnpbzKY2/xZ/Bz+O09ZWq/7R8s/Ch3dvQ8tnif8oHy7zT
fLPwt+u14JbzFC3+qvMXbX+s9jM1j1P/szwnD13rt9pnWp6s0pvyZ+pqFqf1
Sym9XX2w6LLPC62eWPKzmv/e7luqcct6rNZL86Fr3lp83vq85ZxlqcO092hd
16Mdp9WTal2WOpPSVc3T8ny1/7R6bunHaP2GBbf4bMlbWvzpuy7zk1ZP7Pm2
iqdFLy1/Un7S+A+frK6uelP43vYFS19kOTfRcBp/y3cgdt9o8beOS+snab5Z
cNp7nGqeNN+q/aH5ZsFp9XZVHFq/17UO2NevJR9SOG1eaO8pZh578LHzp/HZ
yrPrPl7tW7XPKX8sPqfiWNZ7tS7afFnGXcWz631413yw+Gn3n7ZfW/LK/n4k
hdPWLy3+qnHt35ul/Kf1abQ4KXx8YOKW9bhq3K56afy7+m+Jb+kHqnH79zar
+KT8pOVztS6a/9U+0+JX86Gta8u8W3ygjbuKZ3WcqRs97meq/Un1XRbftuqt
jkP7DorGMzWP1TjtfGRZ18PnsnFpz9N8pq1Hmj+rxrX4sLd5TOG0Ppbmz1Zd
1XG69hWDn8dT3zXR6kBqv5t9x6XLcq6v1ktbL5a+jjaPNJ4W3JKHlvdftDqT
8qErTss3mq7qcWn7YFcf9oZb8oq2Xw9+GU4711vqj+VeMYXT5qXrvZndz/H/
dny24BZdkycuXbS+mnaPRMsTGp+Urq55S9NFi783nna9e8u33xKJw/E=
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`10000\\)\"", 
     StringForm["Iteration number ``", 10000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972603355207*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmrFqVkEQhX/wBYTYB8EqpZ3VLdNbWQes7VOm8V0UrMTGF0gZGwut0lv4
CBKSlApXZv7zfbsbCITDMnPm7Mzs7N48v3j3+u2Tw+Hw8uH37u/7n9/b7eWz
T+e3P7ZH5Oz06sO3jzfbxdM3rz5ff99+nrz48vX9r+1v+F47VetpfqvwKv3t
OtN4WvKqO3/suF0HWh6uPM/idh1S/bmKT8o+rQ/s9WvROcVnr260eFN6jqqP
vd5pelbFRetjtPM0FW9qTqDVqd1+iidtH2eLq5u/5T2Kpg+NP02f7rho+2vp
J8vvGHVKi4vWH1L2aTgtXsv8QIu3ym/q3rf2q1Y3Wl+l4bR47Xxo/BfPMfjT
zgvL/DmqPim/ljykzV20dxJavHacVhfdcdnt0/bF8j5cpTNtXyz60/K2O167
Dpb8T+mweDJ5WurUUl80Hap4WnSm1Qutz1jq3R6vJU9ofTX1na5b526clp/2
urPXxaj9h5YnVfF261llP4Xb92vUPLfksz1/LPHS9KTFRdOB1t+6daDZp/m1
4LT3qO64aH5pOs/Gh3bu2PW353+VPjTdLHk7qp0UTjsH7XrS4rXoTLuvpdan
7NDyoVt/Wt+rspP6nmL5jtO9v4tnbVyj2qnyS/tuW2XHvl/dfCz9c7a5hcZn
xTVnXFXxztafF16L09577fMMTbcUHwtOuy/sXW+Zu7r1Sdm33Ne696tKNxp/
2nm3+sZxdN5rp2o9LV4aTsvnUd9d7edjt24WnJb/KZ7duJ3/bDjtXLbY3+vX
XhejxpXCafNbN3+a/ql4aXOyZW6hfZef7fzqtp96/6ni2a2DfX8t62fDaX21
aj1NtxQfu99R8y11rqXsWM5T2ncly3paHlr40/SfDaf1Hxp/iw7dcY2qm2Xe
oOVP6h2Dti8WfLa+RMNp9U6b82lxdftN4Raeqbjs7wDdcdn50PowTTeaPqPO
mRacdp6ufT8OT9pcl+Jpz0PaedG9j7R9p+nZbYf2XjRbf5gNt9wjaHxGvYfS
6joVl6UuLN+LV30x7dPqtBunzXUWHSz1uPaXyYeG0/qeJd8s9/fueGm6WXBa
ntDOQXs+2PmncEv+2O3T8HUu/J8OtO8dVfZp/C1x0b53rH5+HJzGnzaXptbT
9Kzya9EtpY9FB1pfpb3b2+suhVvO/b1+Z/s/jVHvIxY9U35pcxStjmbzu5cP
jSdNn5Rf2rls7z9VcaX2i1a/NH267cw2F9HyyqKDZT607y/NTrdfe7x2nvY6
oq3v1p92f7est+hPmzNpfKpwS9+j9auquFJ2uv3S8ioV7+Lz7/X2fLb4pelJ
wy31YteHprNdB1qepHjS7i/2uGj3ypT+KdzSHyz7ReNJq9Nu/rR8pulvyc9R
9axa/wcRgYTv
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`15000\\)\"", 
     StringForm["Iteration number ``", 15000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726047952633`*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmrGKFUEQRR/4A4LmIhgZmhm90NzIeMHY3HAT/0XBSEz8AUNNDNZocwM/
QXR3I3FhHlXec2r6geBehqpbt6qrq3vm4dmr5y/vHA6HJ9f/fv//8YPzt1/f
fTme3X3x9MPnb8fv9x59/PTmx/Ff+OHP7+fx8vX9988uL67/vvn9jW+1U+V3
q/1uvxZ8qz40PbvrtluHvdVhSs9Un0npmXrerk9K/6l9laabXU/aftetW0of
mv7ddiw60/YvWr7W+q31S+OT0s2+79DuPSx5sTw/Fd/bvQStj9HqkMZn4Ve/
1HxIO8fZ93E7nur/lrzQ4qKtC/v+uHAXTltHVfb31m9pfWzhVz/afGjBLfrQ
+l6KZxUf2vcJNJ6WvKTqKqWPnSetPi0603DaOqX1c0u+aDy7+dvPL7T1RbND
40nDaX3Mwqfbb7c+U+ftxfN2+3vrh3aetLl09Z/T9KHxtOA0PWl8LDynzm+W
/dTSV2n5mprfqe+pp+arym9VvCmdae+5aHlM6V+lD+38QqsrWj3QcFo9L32Y
98b27ytoOtP40+6XaP2Bts/uTYfU8938U3mx5NHSP7txiw40nafWM80vDafF
azmPd/Op0sdyjrDo022HFhdNh5RfWp+s4knTbW/1Y5nnLed3y35RhdPq1sKf
pgPN78IXTli/W/3S+NB0s+OW92hVcdF03hsf2pxDy4sdt+hp6WN23HJvnLKT
wmn3J/a8W/qJ/X1iyg5NT1r/sXwHQuMzVf+UPpb7atr6rcJpfYy2f628M3Wz
58XOvztey75miWsrH5r+3XM4LS9b+XfbodVDlR3avG15v0OrQ9r6pe0jtPOy
PV8pPrS5evFx3QfS1rulzlN2aH0+pY8l3hRuWS9b7U/tt7R+WKWbJS9V+Urx
pOH2c/rK72m4ZW6ZOmem5nDa/Fxln8aHFi9tXXfjtDqn1XMKp51HUjy7daPN
dd356tazG6f1/6m4pT9Y7hm6ccv9SbdfWn3acdp8SPNrv7fpPi+vOSfr114/
3fp360lbR935TelswWn9PxXXVJz23Qjt/tNS/5b9i+aXNm+kdLP0Q1oeV1xM
O8tvlidNT/v6suN7Ow9acEvftvSfVLxb7azvH/6PPt1+aXqm8FSdW+yn9Lf7
pelPu++y6Lziuv15e50v/DScpvPUedU+Z9L40M6ttLi6+dP0T+WFli+azik7
Fp1pddWtz1S/lvU1FbfMD6l5Y+p3L935qrJD09M+99L2Tcv8Y69Dms6WvlfF
f2/x2vlY7Nv7QIonrZ5T+kzlP7V+LHxSeemO147Tzh00fbp17n7efm9Pq5Op
dW6vk6p4U3a647Lsy/a5xcLfrn+Vfcv6pfGxzIeWuqLpQ+NP06dbz6l5TOH2
769SOth1s88ztLmlqk5+AW46hO8=
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`20000\\)\"", 
     StringForm["Iteration number ``", 20000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972606164356*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmrGKlFEMhQd8AUF7Eaws7aymtLeyXrC2t7TxXRSsxMYXsNTGQqvtLXwE
UddKFHZI5nxf7h1Y2D0MyclJbpL7/3v34tnjpzcOh8ODq5+fv9+/8+LVp9cf
jxc3nzx8++Hz8eute+/ev/x2PPz6fD9ePr/95tHll6u//3z+xq9rp8pvFZ7S
wR5vt9+pefkXH1q8KZ5T6zMVL63+7bi9brvtX1ef1fpMN07T2aJDd7yWeqb1
sap4aX1y47W4ZR+r4m/Haed3ql/avKDVeapv0HRYTTdavmj1QNPHgqfuX1U8
LXra/Vrua5Y+YKlnS7yWvFv0seiW0me1vjE17924/TkPTbe9r55Hz+64uvnQ
5t2u2/PYt/Cx1JUlX7TzbvFL4z9V/60P0y/t/3lodULbD1M6p+4jq527bju0
urLgFp0tddVtp0rnKr9bf5cOqbjsc7Mq3m6/qXjt9u1x2XFan6ftLSn9U/uh
RR8aT3u8lj1/6rxYTX9L3mn1QJvXKXzrUItb9itavmjzyN437POFlq9u3BKv
xb79/ms5dzT+3XxoOlfxp9V/N24/XzT7tDqh1TlNn249q3SgndOpebTwsZ9f
Wn3S9KfVZxU+Na5UvJY6nDpHpupA2xs3nsVpczb1/ZSetPO4+wATt+tvqXOa
bimc1p9T+zBt37bj3fvGajrb94GdL+Z7se64LPM9tbfT9qWUPvY9xB5vlQ7d
fKpw2vlKxVv1/So+tLm299Xz6Lbx3x+anpb9rdu+pT/Q7KyG03SzzPGUPind
LPxX6580/e38p773sd/HLfZp54h2j6b5nRrX1nO2DlW4Zd5Z9sNuvync8lx9
26/F9/zK8qfZqfK746q1b5lrtOcntD5j4UOrc1o90OxMtd/tl9YP7bhdHwsf
+7lLxUvLb7duVXZo9Ta1Hrr3Iku8KT40fOvzf5w2j2j3nSrdLHVo4UmLl1YP
U/NIez5mj3fqfmjJb1VcljlO07Mb3/V/Gh9L/7HobHm+QdNz8zzNzlS/ludL
tHM6tT+sNt/t85RWP6vxt+tAe/6Qmju0513deez2a79f0+Y7TR8aTtPHspfS
+jYtrtVw2hxJ+aXVMw1fTQfL3jIVp/V/2vOxbvuWe18Kt/Ds5p96nkA7j7S9
3XIft8dF07Nbf7vfbp6r6Um7F1jucfb5ZbdjPy80fOp7pap4u/nT3qNZ7rmp
fKV4VsWVsmPB97nI6kDTbdt3+Z0a19Q6WQ237Ml2fbr50HhWxZXSbeq+an8/
0q0DrQ4t/FPxrqa/JS+0Okzhlj5p15N2Hqt0pv1fwdS9KKVDlV9737Dzt/it
4pN6r5Ti360zTZ/ueFPf3/hpuEVn2rmm2bHksRuv0uEHMTRAsA==
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`25000\\)\"", 
     StringForm["Iteration number ``", 25000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972607494529*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmq2OFkEQRb+EFyABT0hQSBzqk3gUehM0HonhXSBBEQwvgASDWNR6BI9A
gEUiBqq451T3JiTszaTm1q2frq7ZuxfPHj+9cTqdHlz/+/H/+3devPr0+uP5
4uaTh28/fD5/uXXv3fuXX8+nnz/fzlfPb795dHV5/fvvn3/H//Tebj5V9o/a
sfhF43M0T+xxSeVnin93H6D1t+732nl250+q3lfLQ3sfptnvxnfd/R/7q513
tLqw6GyZ31I4rf/QcLu/qfPIrttq+I7v3+nTbd++90jhljk2pb+lz0/lmYr7
9jerT7eeKf403HKvtPCx5+FU/rS+YdGTxt+e5936dNux15Fl7qLpSbsXpPLW
EhfLnEOzQ+Ofyn9aXln2e5b+kNLNUu+Wuk7hlrro5kmLl6W+aHxo/Yr291H2
c4F2Xlj6Yfd7aeeghU/q+e730vpwt52q99LiSNONhlvmGVq92PON1je2DrPv
3VV2aPFK2bfwseQJ7b5GOzctOE0fWr/aeVXL3xLflM4p3Wj9PMXfnudVOG0v
RNtDTu0ntP0eLb52+zQ9LTwt9u18puqwWj7T3kubA2lxt5zvKbwqLt3xpcV9
479+9t6DqSctLik9u/3a8XLhqfPUrjNtjlpN59TzVfxpftnvL6l40erLfm+i
6dnN097nLXXR7e9qfKbqYNmD0XSm9THL3FXllyW+3fhUPrR+Ys/zqvda6iKF
0/LEsrepsk87v7pxWn+z9AdandJ0SPWZ1erdPn92+9tthxYvmp2puF0HWt+j
3V9o+lhw2r075VeV/arnu3Xo5mnZQ07l2W2nG6edX/Z7ij1v7X7R8qFbf8t5
NxWn1Z2F5+bjiiNNTwtO2zvR8pCWJ7TzdOvD5G/fe9D2/FX2UzwtfqX4W+YW
C5+p9WupIxpPWn3Zv2t047S+dPT5VHyn5gltzzm1Tleb6yx+0fLfzn/3W5fO
KX+P2kntM2lzSJVfVXGk1bul31ryIaVzlV80nhY9U3Gh5af9nLU8b//OODX/
UzhtX23vk1O/C9Bwu792/lX+WvpDN5+Uvyk7FtzSby15OFWfFB/LfLuaHfue
IeUv7fyl6UPTjab/UZ67TpnfKWj27fmz2n2nWzeav7S9aDf/VLy6/aXxTPlF
m2dofOx2Ns+sDrTvj1W60XCav7S8nXpeWPhPtT+Vp32ep9nvvjdZ9oFVdux9
mIavtu+y8LHEsVv/bjsp/jScxt8SR8s5SMPt/C34Phdm5BXtHjH17zQsc0g3
TvMrlZ/2OHbrTONvwS3zrQWnfYei+VX1XpputLklpX/Kvj1PaHradU7hdv7d
fk3Vpxu3193UuO+9k+u99jxM7RloulnOI4uedtyipyUfLPcymg5Hn/8OHVa9
Cw==
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`30000\\)\"", 
     StringForm["Iteration number ``", 30000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972608900765*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmqGOVkEMhf+EFyABT0hQSBzqSjwKvclqPBLDu0CCIhheAAkGAWr9Ch6B
kB/kiiU99Ps68yebbE5u2tPTTqcz9z68ePn88s7pdHry5+/3/+ffz+Pq1f33
z66+H3+Rxw9ev/367stxcffF0w+fvx0/7j36+OnN9XETfpOdKtziN60bzU6X
/So+NJ5d8XbVQ7qeaXHR+thqfYAWF81Old/0vmlZXzSdq/hb+vbue734VB12
XW3+hH2Hhtv3IxpPWj+ZWuddc+aec1x2Vqv/Lvtd9660+96ufNFwms6WOqHh
tPscWh5p9zBVOqdx2vqy61kVl70+afwt+106rtX4pPlX2bfoYOGf1mHz/D9+
aXPmVNx+/2PpV7R7Fcv6rYo3zT9th8bfcv9P6wNdeZzKf7V1OvX7ny490/pY
3st06b9aXdHitfSfdLw0Hbr4V/m13HvTnu+qBxpOW19dcdHqrcqvpT5p+bLr
PLVfpXHafjp1Dqyyb8ct+4jFDk3nKp4W/jR9aOdQWh4t81Wav0V/i260eb4r
jxb+XTxp/dmi82rry4JPnWNpc8Ku53/TZ+vZi9vPy131Zs/Xavwt/cRy3qny
22XHkq8qnnacth4t9VkVV9qvxX5aT0v/t5yzNn7+0fZ9+75p52/Bdx+oxbvu
dWn9h5aXrri6zmu0vFh40vSp0tO+n9Lm/3RcaTu0eyQLvlpctPdNtPcgtHxV
PZ/mk/ZLq5+0DlN1o9VV2m8XbpkPp9ahpf7t68J+H0vDd7zM9zvpeC1xWepw
6j1AV7xT10uXPrT6rIrXon+XfZrfKj40nlXPp/3a65aWL1o9WOxvfOOEebvL
vkU3mg40Pmme9jnQUm+r+bXwt9in1TktLsv3BlPz0pX31XRYzc5quH0eS/Ox
9OGpuKUfWnDautv2a3HavTpNT8t98tR62/j5R9ONdr7u0iGN074fsJxzLXVC
u/+x4HZ97PU8tW/Y9afxTMfbZX9/f8LMix23xEubMy16WtY1DV9tXrqtnX2/
5MKn5sUe1/Y7Y13b67CKJ20+p+lp2U9p36F16ValD83v1O/90vHS4rLrZsEt
OkzVP41b+oO9riz7iN1+2i9tDknrlsZp73cs9dm1TqfWYZU+NL+0utr6zMZp
+nR997X3tRk47Z7Nkl/anExbv2mdaedN2j47tR5ouGW/s8zzVXZo9UzTocov
rT/Q6oRmn1b/NP5d/ZaWr7SeVc/T7NDeL9D40+Kl4fZ9waK/naf9XEDjY+/b
VXxo9ZCOt+v5NH+aDjR97Pml9f/V5gqaznY90zhtvd/WL22et+iZzkva/p7T
Zse1Wrxddmg8033VMp/Q9ql0vDScpg9t/rHrb/FLmyen9pNfTgD1fA==
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`35000\\)\"", 
     StringForm["Iteration number ``", 35000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972610246874*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmr2KVEEQhQd8AUFzEYwMzYwmNDcyXtjY3NDEd1EwEhNfwFATA40238BH
EBkTE2Gkas73ddfAwnK4VJ0+9dfd9z68evn8+s7hcHjy5+/3/6ffz+PNq/vv
n918Px7++l0ef/zg9duv774cr+6+ePrh87fjj3uPPn56c3s89/kqnKbPbngq
LlV+U/lcxbObj73eaf2kW387nooXLU9S60r1jVS8aP2wSocqnVN8aHZ2s79q
P7Tjlv2qRR8aTpuzFpymm2V+deP2PkPjSduv0uJrv2eg6Vmlg50PLa9SeqZ0
Ht321Gfw0y81R2Z+TR8jr9eSn7R9ZjdPO047v5z7vCWO9nqk4buti/a+0q6/
vf/Q/NL0oelG42nRwbIuy7kgZYe2Lkv+d7+nsOhA0zlln8Zn1bik9Lfwp/Gx
5G2KTxV/2rnJrnMVnrpP7n6elm+peHXbH/2Z9zm0uNDiaMctfbV7Xd1+aecm
Wv+p0mE3PWl5vqrOKTylG62+qvym4tjN01IX0wcuo2dKN9q94qr1ZX/PYplf
Fn1oOG2/kdKZxqcbn7qu1cHCn8aTlj+7+e3mQ4s7zW+3/rvhVfk2+VCrc4rP
qn4t66LZoeGp9600PS3nUIueKZ4WPWn3lik89T0Jbb27+U3F0WJn1fm7aj2u
+v7dHhfaemk6p3CaDt33Nqv2827+ljq1xyvFk6bz1G+WD00Hy3rt+Zmapxbd
UucI+3ur7nxIxbGKT7c+q97/pHAa/9S9BE2H7nXRdKDxqeJvsV/Fx54/lnk6
+L9xWtxpdWGx383Hvg+k8bfsN7r50/rDqnxodqr02Q233wdW+e3WjfYejTYv
aPM0FZduv7S6sOhcZb+bp/0+avDTz6L/bvtzmp1V+3+VX9ocWbWuafy7dUjZ
Odf+nNOzcanya58LKX0seUu7J0mtl8aTpgMNT+3/aecOy72c5XlaXdD6lSUu
tHqnnQftdlL2h0/WL60/0PTp1o2G0/qSpb5S87HKPo1nd3xXXe/0pcvYp50r
U+u11AXNL42nJY72OqLZr/JLmzuW+Hbr382ThtvvhSzrsufnbv2K1g8t+UNb
r/3cQYsLjaelD6T0SfGh9R9aXnX77ebZ7XfVvBqe/8ffos+q5yaL/oOffrQ+
ee7zFv4pPDU3Lfp060zjOXgWp/WxKp60e1SL/Sr97X67+Y8+WX267Vv0T+lG
42/ZZ9rj0q3DqvPRch9rx0c3F275XjH13Sktny3f39p1SPHZ7Zxo+d7DzpO2
r+v2S8NpOtD6T5Vu9rlAw1PfWVnm6cQ369dev7R+ZdGNxpMWR3tdd9tf1Y7d
b2o/0L1eS1xSPFP7TJoOFvs0nS331bvVy5zfs/jo48It+x973Gn8aXV67vO/
AELTM+M=
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`40000\\)\"", 
     StringForm["Iteration number ``", 40000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.63497261154605*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmqGOVkEMhTfhBUjAExIUEof6JR6F3gSNR2J4F0hQBMMLIMEgQK1H8AiE
LAbBhrvp2X5fZ26yyebkpnN62mk7c//75y+ePr91dnb26M/f7/8vn5+ni5d3
3z25+HY6++v5f/zhvVdvvrz9fDq//ezx+09fT9/vPPjw8fWP07/wqnWreE71
d+PXw4/G8Wg+pO1X+Zu2T7NTFZejfNJ4l19d+tjj2KV/VR3r6o8W+xaeaT4W
nmk7NB0s+Gq67XrLrBtV+tj7Lw2312E7n65zFi3/LXG0zLddfnXxsfdxmj5d
93J2nav0p/lFi+Nq+VPFZ6979fuWvKX1zdX4d+lTta7lvLzauYDGn/Zdlabz
aucUmv40nFYnV8sHu7/2fp32K82zyq+0HVrfsehJm1umnl+6cIsOtDpM40nD
aX1q87l63TRPSz2n2enCV9sXNB26+Njzf7U504Jb7gHS61rspONoqWMWnLa/
uvyinddofdCyLi2ONN1oeTtV/63DnhMI/dEy11XZp/lrX7cKt+RzWn9aXKb6
S9O5a06w1Pmp/O360Ozb7yss/trjSIuLvT/S8p92b5+O18YvH0s9PPq+vZ50
xauKD60+WM65aft7f/XitHyw+EvLtx3HNfcpLZ/T/Kf2zTROi2/XHGXv+xae
Vfwt9wm7j7v40OpPl/4bn4Hb88ry/ZTWv9J2LHFP86HZt9xDWvIt/f6eE2rx
rdvGCbjl3uOonSo+6XXTPLt06LqvoNlJ50Map+WbHaf5Szs/Wvzq4knjX8XT
Eq8qf2k8j/Kn5S3NTpf9o+va5/8ufdI6p/1N65a2Y9etCqd9F7bsl6l1Ps1z
1zEm/7Rfdn123tbqQNNtKn/aPLyaPrS8ouUDrb9Y9pGlDtPOC1NxSxxp+2s1
3F5vad9tafGi8a/yd2q8purQpSft3pI2N1bZsfi1zx03s65FZ1pcaPurC6d9
P6XFl3ben6pnF580zyrczofWZ2l2LH12tXNxWs8q+2k7lnvIqfuoi3/a39Xq
fxdOq9u0c4clLhb7e36YwT+N7zpwPX3s61riYvkdBU23NE7LH5r+NB1o+qT9
tdixz580Pe1+TdVtKk6rG/a4W76jVa1b9X5XXLr4VPHsuieh6Wm5T6bhU39X
0GWHpg8Np+1Te52k5c/UdVezT8tzms5d3x1oOnTpQ9PTEpcqPhaeFp3TOkz1
96gOXfbTcy/N3/S6tHMBzc7UPmuxb+HZhVv6FC0faHWPtu5qfZO2X9I8t78z
6kbaDm1dy32RZX+l9U/3kdXyPG2na37o4m/BaflmOXdY8NX0X21f2+eK1c6J
e469GdzCcypuuaeqsk/LN4v+XfcnNJ5H7aT1ocXXrnM6LhZ9LHzSPFerP2m8
a+61zwM0v2h1+xe8JZFn
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`45000\\)\"", 
     StringForm["Iteration number ``", 45000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.63497261291748*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmrGKFUEQRR/4A4LmIhgZmhm90NzIeMHY3NDEf1EwEhN/wFATA402N/AT
RHeNxIVZ6u49Z14/ENxiqLp1u/pWdc/cP3vx9Pmtw+Hw6PLf7/8/vPfqzZe3
n49nt589fv/p6/H7nQcfPr7+cTz8+f08nr+8++7J+bfLv//+/rVP+dnqPx2X
hj/9PC1fGk5aXmk8tPWi8UZb99bzrXVp9R0ab8vetVv2Sysv2j6l2S08p/Ol
4W/p/9ovLpzpvKaet8Rt8ZyO2+rXNDxT+O3rTqsfmp2WL01XW+vSslt4sMxv
ND5pfcfOw1RcS73R1jFtp/XHKfwWnJY5zcLzFP7WetH0jabbln1k4ZkW164z
U/a98kPTEzvOqbg0/bTwMBWXxkPLP+1+O70up2a38Eybi6bi0u6Z7e8Tabpq
Oe+k8dP23RTPabsFP21etfun4bH4p50LaHVi59PCg8WPnU+L/7Vep2m332/Y
95FlrrDzTLPv9Z5/Cg9Nl1o4aXVOW5eV1/XysvunrQtNV9P47XHTOO332zSe
aTpmnwcs+mOp22W/2k6rW8u5m+anpZM0/U/7Sdvt/Nv77BRvabsFP62/0Hiw
4KfZ0/3Lvi60vGg6QFtfy7xqiUtb3yl+7HNgC8+yX/xoddXCTzvX0PLdimfq
+bQfS75TOC37nRZ3r7wtHZvlM2234LHrZMtPy057v9DK164nFt2ewm+/R1o6
eTPrRavbqbzSeKb82/tjix+anrfwW/S5FXev+5HWd7b6t/DcypfGm71OTq3e
0s9b+tde9X+KZxrOlt2uM3vVz73OmS38tLnCYre8N7fc56T92/c7jZ+94pyK
a3lv2+LZzsOp6UOLH1qd0Oaixc/1eEjjt+hDy25fr1a+U/jtvKWfp+lYKy6t
bmn+T81O21+0/ZKOa8GzFaddB2jvv6b8r7q6GZx2P1v9W+ZVy70EzU7TW4s+
L/vVdpoO0PiZslvel9HOrbTzUXq9aO+j0zzY47bwWOZMu93S1yznFxoemt5a
6scyb6zz5r7tNH1oxaXVJ+1c0MqX1pdXPTP5aeG07K8pHmj50r7HoM1LND8t
/2m7ZX0t62jZR/b9RdN/2v0A7ZxL00nLvQ2NNwuflrgtnmlxaX4s+Gm80Xig
nfum7LTvCux9kDaf0/xY9hGNzymeLbxZ7JbzYzpfe19Ix6Xt0xZO2n1Fi890
XAueKZy07z1ofKb5t9tp+mDpjy07jZ+9+qfdE075n+Ih7SfNjyXfNA8t/1N4
LN9jLPvFz84nTcda+dL68hTPND2h9VNa37HPS+m4ND4tukfj3+7fXg+WvGj7
l8YDjZ80fvu8uvC78NDm2xafaz5n+m/ZabxZ9NCS11Y8tHpo4bfUIY23qbws
/ZrWT2n50nSvlRft/Y4lLq2e7XZanbfytd9j0PhMx/2f/RfrLOiv
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}, {{49.5, 
       FormBox["1", TraditionalForm]}, {40.5, 
       FormBox["10", TraditionalForm]}, {30.5, 
       FormBox["20", TraditionalForm]}, {20.5, 
       FormBox["30", TraditionalForm]}, {10.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {49.5, 
       FormBox["50", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`50000\\)\"", 
     StringForm["Iteration number ``", 50000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726142601*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxdlAlIVFEUhgcLqUw0kjQwWhArtdDcM/M3dWbcx3GWp9CiNgkZGCrRYvoM
26QNksoWy4r2TNxLs6FFi7ahUtOUakqiIiwLo0jrvbonmDvwGL533n/We+7M
zFytyU6hUJikR/7/9/scsWNr+tPWN6cj2Au0j9ZuGqoxMx6HuIl23tun3GPs
DCG0/u66tseMXXCof/92yQVjN1Rl133Ib+hk7I7SyocXHnd2MZ6BAmX5sP3y
54xnIenrntQCj27GHigcqtHkHCb2xJdvcWnbQkg/h2MvNJYWWurSKJ4PcloL
9ruNJft89HWX5CvLiX3Rca15t/1nYj8MX+0tGzFRvAX4WbRa8kD5+aN1tpND
w5kexgFoxhZrx6EXjANRFrliwDKLOAgLxl1yT19JHAzrRpdq1etexiEIHAyJ
UeWRv1B8Pyg3kOwL0d8gF0T2MFxpzCzuCSdexPUvHBe+PEnMdCZeDKej/ifr
g4kj4KrW/HLLp/qA20+9TVOtzC4CLhm3pDfkP5LNm7EYiYGMqq6AQfK3BLkl
Y+/s9WP+xCXw8zo/2RJN9ijOHoVK0fPmtrMUP9qWxWguvxhkd75b7T1M9hh8
cmzzrfAi/0rszFrapxxD+Su586PCnKJdV3PGU/4qDMntEag+NdY7eEifkF1t
+70iFh88/aQJsnmIHCvibPslxnH9jredjxjPnZ8EVC6be9+5g/wncPNNhI80
HcGV6k/E9G9rDJur6bwm4YxPlPtHK2MxCe/V83/PHCF7MtffZK4+DcKP6I9f
vMzyg8Z2fqLGtt9mjhUpKGmSF4D0KVy8FE6fAnfHV/P2nSC91vZ7aKFU5f1w
ek96Lf6evkeMzRwrUpG+Muxl8m7Sp3L94Nicyu27jqtfhwfF6hubp1H9OjTJ
49hA+eu4/dJz+eu5eenREisvEMXXI8tZvjEpvgG1xwbPtseT3gCH7lNrwyeQ
3oCASUGLrmtJb8AzeV0Fqt/IxTdy+2C03QezkatfwKjp+1tppZlegGWVvHDU
PwGiVL1wjt2nZoG7z9NQ0XJgn9NG0qf99/cHX/riig==
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"Long-range order parameter\"", TraditionalForm],
  PlotRange->{{0., 101.}, {0, 0.4312}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726143260927`*^9}],

Cell[BoxData[
 InterpretationBox["\<\"l=\\!\\(50\\)  boverkt=\\!\\(0.4`\\)  \
joverkt=\\!\\(0.`\\) run for \\!\\(50000\\) steps\"\>",
  StringForm[
  "l=``  boverkt=``  joverkt=`` run for `` steps", 50, 0.4, 0., 50000],
  Editable->False]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726143306103`*^9}],

Cell[BoxData[
 InterpretationBox["\<\"RMS spin deviation = \
\\!\\(0.01392283536646748`\\)\"\>",
  StringForm["RMS spin deviation = ``", 0.01392283536646748],
  Editable->False]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972614331599*^9}],

Cell[BoxData[
 InterpretationBox["\<\"Mean spin = \\!\\(0.35519439999999886`\\)\"\>",
  StringForm["Mean spin = ``", 0.35519439999999886`],
  Editable->False]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.634972614332464*^9}],

Cell[BoxData[
 InterpretationBox["\<\"Mean energy = \\!\\(-7008.565119997943`\\)\"\>",
  StringForm["Mean energy = ``", -7008.565119997943],
  Editable->False]], "Print",
 CellChangeTimes->{3.4449750334519997`*^9, 3.444975792315*^9, 
  3.444976161561*^9, 3.444976753413*^9, 3.444976962467*^9, 
  3.4772905372256002`*^9, 3.4772912153466*^9, 3.6349705118555307`*^9, 
  3.634970577980373*^9, 3.634970653109818*^9, 3.6349708434846888`*^9, 
  3.634971799228167*^9, 3.6349719119385223`*^9, 3.634972031806869*^9, 
  3.63497229780401*^9, 3.6349726143332977`*^9}],

Cell[BoxData[
 InterpretationBox["\<\"Mean energy = \\!\\(-6975.101759997961`\\)\"\>",
  StringForm["Mean energy = ``", -6975.101759997961],
  Editable->False]], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.4449750334519997`*^9, 3.444975792315*^9, 3.444976161561*^9, 
   3.444976753413*^9, 3.444976962467*^9, 3.4772905372256002`*^9, 
   3.4772912153466*^9, 3.6349705118555307`*^9, 3.634970577980373*^9, 
   3.634970653109818*^9, 3.6349708434846888`*^9, 3.634971799228167*^9, 
   3.6349719119385223`*^9, 3.634972044200506*^9, {3.634972169418212*^9, 
   3.634972171240637*^9}}],

Cell["\<\
What we see is that the pattern remains fine-grained, but that more spins are \
aligned in one direction than the other.\
\>", "Text",
 CellChangeTimes->{{3.4772916735736*^9, 3.4772917042416*^9}, {
  3.634895350337826*^9, 3.634895354997774*^9}, {3.634972177858058*^9, 
  3.634972190892783*^9}}],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "When we tease the code apart (and this is the longest chunk of code we have \
met on the course so far), this is how it works.\n   We set up a ",
 StyleBox["Do",
  FontFamily->"Courier New"],
 " loop, and start by selecting a cell ",
 StyleBox["(i1,i2)",
  FontFamily->"Courier New"],
 " at random and locating the cells above ",
 StyleBox["(k1=i1-1,i2)",
  FontFamily->"Courier New"],
 ", below ",
 StyleBox["(j1=i1+1,i2)",
  FontFamily->"Courier New"],
 ", to the left ",
 StyleBox["(i1,k2=i2-1)",
  FontFamily->"Courier New"],
 " and to the right ",
 StyleBox["(i1,j2=i2+1)",
  FontFamily->"Courier New"]
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"Do", "[", "\n", "\t    ", 
  RowBox[{
   RowBox[{"i1", "=", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
   RowBox[{"i2", "=", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
   RowBox[{"j1", "=", 
    RowBox[{"i1", "+", "1"}]}], ";", 
   RowBox[{"j2", "=", 
    RowBox[{"i2", "+", "1"}]}], ";", 
   RowBox[{"k1", "=", 
    RowBox[{"i1", "-", "1"}]}], ";", 
   RowBox[{"k2", "=", 
    RowBox[{"i2", "-", "1"}]}], ";", "\n", "\t    ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"j1", ">", "l"}], ",", 
     RowBox[{"j1", "=", "1"}]}], "]"}], ";", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"j2", ">", "l"}], ",", 
     RowBox[{"j2", "=", "1"}]}], "]"}], ";", "\n", "\t   ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"k1", "<", "1"}], ",", 
     RowBox[{"k1", "=", "l"}]}], "]"}], ";", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"k2", "<", "1"}], ",", 
     RowBox[{"k2", "=", "l"}]}], "]"}], ";"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.63497000078668*^9, 3.63497000771525*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "where we have taken care over what happens at the edges, imposing periodic \
boundary conditions. Now form the sum of the spins on the neighbours, ",
 StyleBox["dg",
  FontFamily->"Courier New"],
 ", and calculate the contribution to the total energy and the energy change, \
",
 StyleBox["de",
  FontFamily->"Courier New"],
 ", which would arise if spin ",
 StyleBox["(i1,i2)",
  FontFamily->"Courier New"],
 " were flipped."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"\t   ", 
  RowBox[{
   RowBox[{
    RowBox[{"dg", "=", " ", 
     RowBox[{
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"j1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"k1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "j2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "k2"}], "]"}], "]"}]}]}], ";"}], "\n", "\t   ", 
   RowBox[{
    RowBox[{"etot", "=", "\n", "\t\t    ", 
     RowBox[{"etot", "-", 
      RowBox[{"joverkt", " ", "dg", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}], "-", 
      RowBox[{"boverkt", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}]}]}], ";"}], "\n", "\t   ", 
   RowBox[{
    RowBox[{"de", "=", 
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"joverkt", " ", "dg"}], " ", "+", " ", "boverkt"}], ")"}]}]}],
     ";"}]}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Now accept the change if it reduces the energy, or (with reduced probability) \
of it increases the energy slightly.\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"dw", "=", 
     RowBox[{"N", "[", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "de"}]], "]"}]}], ";"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"dw", "<", "1"}], "&&", 
         RowBox[{"dw", ">", 
          RowBox[{"RandomReal", "[", "]"}]}]}], ")"}], "||", 
       RowBox[{"de", "<", "0"}]}], ",", 
      RowBox[{
       RowBox[{"ml", "\[LeftDoubleBracket]", 
        RowBox[{"i1", ",", "i2"}], "\[RightDoubleBracket]"}], "=", 
       RowBox[{"-", 
        RowBox[{"ml", "\[LeftDoubleBracket]", 
         RowBox[{"i1", ",", "i2"}], "\[RightDoubleBracket]"}]}]}]}], "]"}], 
    ";"}], ")"}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Calculate a long-range order parameter, the total spin, and accumulate \
values in ",
 StyleBox["longorder",
  FontFamily->"Courier New"],
 ": only do this every ",
 StyleBox["lostep",
  FontFamily->"Courier New"],
 " updates."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"\t  ", 
  RowBox[{
   RowBox[{
    RowBox[{"mm", "=", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"Plus", ",", 
        RowBox[{"Flatten", "[", "ml", "]"}]}], "]"}], "/", "l2"}]}], ";"}], 
   "\n", "\t  ", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"i", ",", "lostep"}], "]"}], "==", "0"}], ",", "\n", 
      "\t\t       ", 
      RowBox[{"longorder", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"longorder", ",", "\n", "\t\t\t\t\t", 
          RowBox[{"Abs", "[", "mm", "]"}]}], "}"}], "]"}]}]}], "\n", 
     "\t\t    ", "]"}], ";"}]}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Every ",
 StyleBox["gstep",
  FontFamily->"Courier New"],
 " updates, display the spin distribution (Note that as we are inside a loop \
we have to force ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to show the graph by using ",
 StyleBox["Print",
  FontFamily->"Courier New"],
 ")."
}], "Text",
 CellChangeTimes->{{3.444976164924*^9, 3.444976209461*^9}, {3.444976285896*^9,
   3.444976293403*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"\t  ", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"i", ",", "gstep"}], "]"}], "==", "0"}], ",", "\n", 
     "\t\t      ", 
     RowBox[{"Print", "[", 
      RowBox[{"MatrixPlot", "[", 
       RowBox[{"ml", ",", "\n", "\t\t\t\t         ", 
        RowBox[{"Mesh", "->", "False"}], ",", "\t\t\t\t           ", 
        RowBox[{"PlotLabel", "->", 
         RowBox[{"StringForm", "[", 
          RowBox[{"\"\<Iteration number ``\>\"", ",", "i"}], "]"}]}]}], "]"}],
       "\n", "\t\t                 ", "]"}]}], "\n", "\t      ", "]"}], 
   ";"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.4449761533859997`*^9, 3.4449761604119997`*^9}, {
  3.444976745745*^9, 3.444976775105*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Every",
 StyleBox[" bstep",
  FontFamily->"Courier New"],
 " updates, save the total spin, total spin squared, and total energy."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"i", ">", "bstep"}], ",", "\n", "\t\t     ", 
     RowBox[{
      RowBox[{"summ", "=", 
       RowBox[{"summ", "+", "mm"}]}], ";", "\n", "\t\t\t   ", 
      RowBox[{"summ2", "=", 
       RowBox[{"summ2", "+", 
        RowBox[{"mm", " ", "mm"}]}]}], ";", "\n", "\t\t\t   ", 
      RowBox[{"sume", "=", 
       RowBox[{"sume", "+", "etot"}]}]}]}], "]"}], ","}]}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Do all that ",
 StyleBox["maxstep",
  FontFamily->"Courier New"],
 " times."
}], "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[
 RowBox[{"  \t", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "maxstep"}], "}"}], "\n"}], " ", 
  "]"}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Having finished, plot the time evolution of the long range order, and the \
averages and deviations of the spins, and the average energy.\
\>", "Text",
 FontColor->RGBColor[0, 0, 1]],

Cell[BoxData[{
 RowBox[{"Print", "[", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"longorder", ",", 
    RowBox[{"Joined", "\[Rule]", "True"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", "\"\<Long-range order parameter\>\""}]}], 
   "]"}], "]"}], "\n", 
 RowBox[{
  RowBox[{"summ2", "=", 
   SqrtBox[
    RowBox[{
     FractionBox["summ2", 
      RowBox[{"maxstep", "-", "bstep"}]], "-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["summ", 
        RowBox[{"maxstep", "-", "bstep"}]], ")"}], "2"]}]]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ", "=", 
   FractionBox["summ", 
    RowBox[{"maxstep", "-", "bstep"}]]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"sume", "=", 
   FractionBox["sume", 
    RowBox[{"maxstep", "-", "bstep"}]]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   InterpretationBox[
    "\"\<l=\\!\\(l\\)  boverkt=\\!\\(boverkt\\)  joverkt=\\!\\(joverkt\\) run \
for \\!\\(maxstep\\) steps\>\"",
    StringForm[
    "l=``  boverkt=``  joverkt=`` run for `` steps", 
     NotebookCompatibility`Dump`Symbols`l, 
     NotebookCompatibility`Dump`Symbols`boverkt, 
     NotebookCompatibility`Dump`Symbols`joverkt, 
     NotebookCompatibility`Dump`Symbols`maxstep],
    Editable->False], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   InterpretationBox["\"\<RMS spin deviation = \\!\\(summ2\\)\>\"",
    StringForm["RMS spin deviation = ``", 
     N[NotebookCompatibility`Dump`Symbols`summ2]],
    Editable->False], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   InterpretationBox["\"\<Mean spin = \\!\\(summ\\)\>\"",
    StringForm["Mean spin = ``", 
     N[NotebookCompatibility`Dump`Symbols`summ]],
    Editable->False], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   InterpretationBox["\"\<Mean energy = \\!\\(sume\\)\>\"",
    StringForm["Mean energy = ``", 
     N[NotebookCompatibility`Dump`Symbols`sume]],
    Editable->False], "]"}], ";"}]}], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.444976303966*^9, 3.44497631271*^9}},
 FontColor->RGBColor[0, 0, 1]]
}, Open  ]],

Cell[CellGroupData[{

Cell[" ", "Subsubsection"],

Cell[TextData[{
 "What we can see is that the order parameter (that is, the average spin ",
 StyleBox["longorder",
  FontFamily->"Courier"],
 ") oscillates around a value of about 0.4. When you cover the theory of \
magnetic systems you will be able to confirm that the expected average is \
tanh(boverkt),"
}], "Text",
 CellChangeTimes->{{3.4772917418856*^9, 3.4772917422595997`*^9}, {
  3.634970761523641*^9, 3.6349707639791317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tanh", "[", "boverkt", "]"}]], "Input"],

Cell[BoxData["0.3799489622552249`"], "Output",
 CellChangeTimes->{3.444975033573*^9, 3.4449757923970003`*^9, 
  3.444976973307*^9, 3.4772905480706*^9, 3.4772917465346003`*^9}]
}, Open  ]],

Cell["so our result is reasonable.", "Text"],

Cell[TextData[{
 "  We now consider a more complicated problem: a phase transition.  You are \
probably aware that if a ferromagnetic material is heated to a high \
temperature, it ceases to be ferromagnetic (that is, it ceases to have a \
permanent magnetic dipole moment).To demonstrate this with our model, we \
should remove the external field (set ",
 StyleBox["boverkt",
  FontFamily->"Courier New"],
 " to 0) and introduce the spin-spin interaction (set up a non-zero value of ",
 StyleBox["joverkt",
  FontFamily->"Courier New"],
 " - try values between 0.1 and 5.0).  We can look at the graph of order \
against step number to judge whether the system has finished changing in a \
systematic way and is merely jumping about the equilibrium, and we can look \
at the two-dimensional plots to get an idea of the way the local order \
develops.  We'll use a larger mesh here, 100 by 100 and ",
 StyleBox["joverkt",
  FontFamily->"Courier New"],
 " parameters of 0.1 and 2.0.  We'll just repeat the block of code from above \
here, as we did not set it up as a function (which might have been more tidy)."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"l", "=", "100"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxstep", "=", "50000"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"bstep", "=", " ", 
   RowBox[{"9", " ", 
    RowBox[{"maxstep", "/", "10"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"lostep", "=", 
   RowBox[{"maxstep", "/", "100"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gstep", "=", " ", 
   RowBox[{"maxstep", "/", "10"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"boverkt", "=", "0.0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"joverkt", "=", "2.0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ml", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1."}], ")"}], "^", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ",", 
     RowBox[{"{", "l", "}"}], ",", 
     RowBox[{"{", "l", "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"sume", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ2", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"etot", "=", "0"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"longorder", "=", 
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"Plus", ",", 
       RowBox[{"Flatten", "[", "ml", "]"}]}], "]"}], "/", "l2"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"gra", "=", 
   RowBox[{"MatrixPlot", "[", 
    RowBox[{"ml", ",", 
     RowBox[{"Mesh", "->", "False"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Do", "[", "\n", "\t    ", 
  RowBox[{
   RowBox[{
    RowBox[{"i1", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
    RowBox[{"i2", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "l"}], "}"}], "]"}]}], ";", "\n", "\t    ", 
    RowBox[{"j1", "=", 
     RowBox[{"i1", "+", "1"}]}], ";", 
    RowBox[{"j2", "=", 
     RowBox[{"i2", "+", "1"}]}], ";", 
    RowBox[{"k1", "=", 
     RowBox[{"i1", "-", "1"}]}], ";", 
    RowBox[{"k2", "=", 
     RowBox[{"i2", "-", "1"}]}], ";", "\n", "\t    ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"j1", ">", "l"}], ",", 
      RowBox[{"j1", "=", "1"}]}], "]"}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"j2", ">", "l"}], ",", 
      RowBox[{"j2", "=", "1"}]}], "]"}], ";", "\n", "\t   ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"k1", "<", "1"}], ",", 
      RowBox[{"k1", "=", "l"}]}], "]"}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"k2", "<", "1"}], ",", 
      RowBox[{"k2", "=", "l"}]}], "]"}], ";", "\n", "\t   ", 
    RowBox[{"dg", "=", " ", 
     RowBox[{
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"j1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"k1", ",", "i2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "j2"}], "]"}], "]"}], "+", 
      RowBox[{"ml", "[", 
       RowBox[{"[", 
        RowBox[{"i1", ",", "k2"}], "]"}], "]"}]}]}], ";", "\n", "\t   ", 
    RowBox[{"etot", "=", "\n", "\t\t    ", 
     RowBox[{"etot", "-", 
      RowBox[{"joverkt", " ", "dg", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}], "-", 
      RowBox[{"boverkt", " ", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}]}]}]}], ";", "\n", "\t   ", 
    RowBox[{"de", "=", 
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"joverkt", " ", "dg"}], " ", "+", " ", "boverkt"}], ")"}]}]}],
     ";", "\n", "\t   ", 
    RowBox[{"dw", "=", 
     RowBox[{"N", "[", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", "de"}], "]"}], "]"}]}], ";", "\n", "\t   ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"dw", "<", "1"}], " ", "&&", " ", 
        RowBox[{"dw", ">", 
         RowBox[{"RandomReal", "[", "]"}]}]}], " ", "||", " ", 
       RowBox[{"de", "<", "0"}]}], ",", "\n", "\t\t       ", 
      RowBox[{
       RowBox[{"ml", "[", 
        RowBox[{"[", 
         RowBox[{"i1", ",", "i2"}], "]"}], "]"}], "=", 
       RowBox[{"-", 
        RowBox[{"ml", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "i2"}], "]"}], "]"}]}]}]}], "\n", "\t\t    ", 
     "]"}], ";", "\n", "\t  ", 
    RowBox[{"mm", "=", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"Plus", ",", 
        RowBox[{"Flatten", "[", "ml", "]"}]}], "]"}], "/", "l2"}]}], ";", 
    "\n", "\t  ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"i", ",", "lostep"}], "]"}], "==", "0"}], ",", "\n", 
      "\t\t       ", 
      RowBox[{"longorder", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"longorder", ",", "\n", "\t\t\t\t\t", 
          RowBox[{"Abs", "[", "mm", "]"}]}], "}"}], "]"}]}]}], "\n", 
     "\t\t    ", "]"}], ";", "\n", "\t  ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"i", ",", "gstep"}], "]"}], "==", "0"}], ",", "\n", 
      "\t\t      ", 
      RowBox[{"Print", "[", 
       RowBox[{"MatrixPlot", "[", 
        RowBox[{"ml", ",", "\n", "\t\t\t\t         ", 
         RowBox[{"Mesh", "->", "False"}], ",", "\n", "\t\t\t\t         ", 
         RowBox[{"PlotLabel", "->", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<Iteration number ``\>\"", ",", "i"}], "]"}]}]}], 
        "]"}], "\n", "\t\t                 ", "]"}]}], "\n", "\t      ", 
     "]"}], ";", "\n", "\t\t", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"i", ">", "bstep"}], ",", "\n", "\t\t     ", 
      RowBox[{
       RowBox[{"summ", "=", 
        RowBox[{"summ", "+", "mm"}]}], ";", "\n", "\t\t\t   ", 
       RowBox[{"summ2", "=", 
        RowBox[{"summ2", "+", 
         RowBox[{"mm", " ", "mm"}]}]}], ";", "\n", "\t\t\t   ", 
       RowBox[{"sume", "=", 
        RowBox[{"sume", "+", "etot"}]}]}]}], "]"}]}], ",", "\n", "  \t", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "maxstep"}], "}"}]}], "\n", " ", "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"longorder", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", "\n", "\t", 
     RowBox[{"Joined", "->", "True"}], ",", 
     RowBox[{"PlotLabel", "->", "\"\<Long-range order parameter\>\""}]}], 
    "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"summ2", "=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"summ2", "/", 
      RowBox[{"(", 
       RowBox[{"maxstep", "-", "bstep"}], ")"}]}], "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"summ", "/", 
        RowBox[{"(", 
         RowBox[{"maxstep", "-", "bstep"}], ")"}]}], ")"}], "^", "2"}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"summ", "=", 
    RowBox[{"summ", "/", 
     RowBox[{"(", 
      RowBox[{"maxstep", "-", "bstep"}], ")"}]}]}], ";"}]}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"sume", "=", 
    RowBox[{"sume", "/", 
     RowBox[{"(", 
      RowBox[{"maxstep", "-", "bstep"}], ")"}]}]}], ";"}]}], "\n", 
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{
     "\"\<l=``  boverkt=``  joverkt=`` run for `` steps\>\"", ",", "l", ",", 
      "boverkt", ",", "joverkt", ",", "maxstep"}], "]"}], "]"}], 
   ";"}]}], "\n", 
 RowBox[{"\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<RMS spin deviation = ``\>\"", ",", 
      RowBox[{"N", "[", "summ2", "]"}]}], "]"}], "]"}], ";"}]}], "\n", 
 RowBox[{"\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<Mean spin = ``\>\"", ",", 
      RowBox[{"N", "[", "summ", "]"}]}], "]"}], "]"}], ";"}]}], "\n", 
 RowBox[{"\t\t\t\t", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<Mean energy = ``\>\"", ",", 
      RowBox[{"N", "[", "sume", "]"}]}], "]"}], "]"}], 
   ";"}]}]}], "BoxedProgram",
 CellChangeTimes->{{3.444976335575*^9, 3.444976360427*^9}, {
  3.4449768028389997`*^9, 3.4449768541879997`*^9}, {3.634970030514861*^9, 
  3.6349700393925047`*^9}, {3.634970143276029*^9, 3.6349701746101093`*^9}, {
  3.63497026186579*^9, 3.63497026295682*^9}, {3.6349709479915323`*^9, 
  3.634970950754237*^9}, {3.634971176630884*^9, 3.6349711799476423`*^9}, {
  3.634971352779557*^9, 3.634971368001215*^9}, {3.63497263421129*^9, 
  3.634972661313184*^9}}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmbHqZ1kRhAd8AUFzEYx8A6MJzY2MF43NDU18FwUjMfEFDDUx0GhzAx9B
ZEwMXLxD1dT3nXv+sLA0P/pUV9Xp7nPn+1/94ic//9aHDx9+9p///v3/n/7+
+fHrX373dz/++m8fP/zX3/8f/+H3fvWbv/z2zx+/+vZPf/T7P/3149+/84M/
/PHX//j4v+Ltc9v4n56byk+Lp3RM6dv+fRs/jQfavVjhP/V+0fxDq9fu55W+
7bpWfrP4mYZ/pUsbD21upn7frrftq1Pz0PxmeRek8pyqy6ov0XSnzYUUb23d
V/rScNLm4Nvuo70P0/Rt60U7923vFNq5ljjtu4SFh6d5Unja9bbz2PtAih9a
vM3zSkdafppPLD5v41nx0D6Xpu8Kfztu4cHOc5sH2v2lxVe60PLQ+KHtRSv8
b+tvNN3fttdZ8LfrauOhvfdpedo80/owbQ6262rnOdUPqTy0fSnF26nn0vYf
C/6VH2j9ZMVDGw+NT1r81Hln+XcK2rl2Pmn+tOuS4mcVt9xHi2+f5kn9PlVX
Kv+p8atj9txT31+0fax9bhvnqefS/Em7X6t6r76ud6t9z6ftY7T5tdq3Ld/H
aP0npYs9fn3InEf27waWPDR/pnRs89zG+bY47X1x8bjeQTQ8tHd3ip92nhU/
tL3l1Hl9+fwy9aby2/fwFc7r2y1O+3cqyzxdnUvbD2l+OLUfvi1uue92P6/4
b/O5wrOq1/KOo/nBjpPWJ2nffyzvKYteNPztc9+2v1n6DK0u2j2i8UDz1anz
esUDbV+151/9noZ/hTOV334u7bvxCqc9TvMhTV/aXLPrnspj2UPa9Vr4X/G2
ym/5vb0/r3xi4ZMWp+2BtD5midPe9anf0+Jv+x614qF9Lg3/SscUTto+/PT3
tH2AtrfT7nWbhzafq3Np7xoLz5a9l7ZXW/LT+KHtLat677lfRpen+FP1nvou
oH0PpO2ltO8Gdv5pur/N/7Q92XJf2vjtfaZ9bhsn7Z7SdEnVdarP7T6069iu
l5bfvuev9E3pYpkXNH1p35lT/LRx0u4vLW73G80/NF+leKbte7cuZn97Wtcq
futl7uepc0+N0/ik6fg0fxv/Co+dB0u8zZuFzxQP7braOJ/ip/HWxm95p7T5
X/FGe8+uzrX0SRpvT89NxWl4Vjjt9yvFm2V+2eOWei33joaTdt9p8/fqss3/
NM9K3xWfK5zteml7xb1HTL+t4vY5Zb93tO/YNF3s/K94S51Lw0njn4Z/Fafx
Y3mntPGv+KfpZcdj0aV9rgX/rTdb1ypu2Ustv6ftsW3db/zTn2Uu0+7Fip+2
jqu4HX+qXlr86vh5etHOPdUnNP5p/rfPrzsfs7pY8Fv4OZVn2n2k7UU0PlM8
03zVxknzs6Uu2v1a8bbyP62f0PYxy/1t87zik5bfgpPWD1M4afOOdr9W9Z7q
hxX/bZyWOW7x2+0bX8aHNH0tPLdxrs6lfTegvRdO9T9Nx1RdKT5XdZ2Kk9aH
aXGaz9t1pXiw80bbh2m80eq17Btt/tv4LfsDrd4VTpq+bT/Y/fO2e23ZE2j3
jpaf5ueVT1Zx+77RzmPhn9aHV/jbutD6eQq/RS9Lf6DNL5o/V36g6UI7N4Vn
5Qcaz7R5QcOT0iv1+xVv7XqvT1x4UvlpfNL2q9W59vu1itN4s9872juufW4b
J43nFE6aDy04Vz5527226NvGT+O5jaeN09LH2rxZ/HDv75fhgfYd4/rtjH2s
zU/bDyvdVzhp99GOn8bbimd7v6Lx9vTclU9S/Kzy0Oq98U9/tL5hx7PqM7T+
RuPTnsee3+IH+/fStr40v9Hi7bosfLZ9TuOf5hNavO3bFZ8rn9/3zufxY+kz
b/Mh7bsTDafdt21fWfzT5iHlh5VPaDgvP3evIHzfS+FP1Uur694vph9oPKz4
TOWn+WeF823fN2h9yYJzlb+tO83PFv6f4qHpvjqX5isaftp3ntX3opS+7XpT
+S1+s+Ns+5DGz6l4Urqk8FvwnKoj7TuVJT9tH2vHaX0+hdPiq3a9K71ofLZ9
sjrX0vcs7yAaz208q/yn6mLBaclP03EVp80j2ruvXW+bN3ufofmz7Z+VLqm6
LDxY8NDmKS2PRXeaf1Z1reql7cM03trnWnSh9R8Ln23/0/oeTd+Vf2h+OFWv
9u9p3zHuvThjz7fEV7pY7pHFbyl+aHxe/5zdH2jvypRPLH6j8Wbx56lxmh9W
+WnzN5Xf8i5b6Zvi0z4fafgt567yW/zw9NxUXZa5+bY+09b9VD+081julyX/
qb61+4rWx2h928Jnqt52ntS59j1kpZeln9D4t/Ttt93TFX6LP2nxVV0pP1j8
TzuXNhfaPNDiFj/Q7jWNT7sutLljidN4oPmkjZNWL+1dmfKV3Q+ret/WD0+N
2/eiVF3tPO26Vvlp79/27y3zup3nbX6z+MSO/237s+XepXi4OD8Pj6X/03xO
w0njh6ZLCufb+o+d5zafNJyputp52rqs+GzXZdlXVzy0dW/XtcpD+/3bcNLm
CO0+vq0v0eKWOZLCT+OB9n2+HbfvdU/z03S3+IE2x2n4LX3bXpcFP63PrHzS
rsvCZ5tny3xZ6WJ5T9H4PPXe0fDQ5ubbeH7b/mDZq1c+afPW5ieVn9Y3aPeO
dh9XvkrhXOGn8UPrq7Q+YInb/dnG+bb96n5Pc+l76nda2rm0+9vGuTr31Lid
z6d4Vn5un5vSpZ2njd++N57a/2l7hd0/tH5L80nKP6k8NF1oPKz8cPXN4m/7
bcUDjf92Hlr+FJ7r5zPmvmXu3PegK77i2dLn2/ys+KTxc2qcdt9p88XCc/vc
VL0WPi37+al+s/QHmk9o/NN0T+my0pHmnxTPbR7aONt4aP6x63J5yPKQyt/O
s5rXFt1X9dr3Ydp8tOiyqitVr2W/epsf2vgt7+i2Lm19aXjudwDXfLT4xOIf
Cz80H9LmO23u0+7RigfLubQ+RvM57fstjedUnOYTWrzt25WfaXlSfm7rRfNJ
6lzLPkDrA5Z+2PahhTd7npQu9r2I1j9X59L6G01fC34LP+08K/wrPLT5Trsv
Fz/zfWTnjfaOo/HZxpnyZyr+tu9CbfxvezfRfE7zLQ0nbS7T8tPmMu1eW3Cu
/Nb2w4q3VfxUnBa9LO/QFf42zxY/nHpPaXHavKO97+z31LJ3pfin7Z9tfizn
tvGfygPNt+26aDhTddH6mGWO03S5+L8Zz6ou2j5jqWul++pcWj+0+9Mep71H
Vuda+tXbeGvzY4nTvnvQ+idNd9p3tqfnWvYN2tyn+dDOZ5t/+/cK+z5Pmzu0
uWnpV7S6TsVPO3elS5sfO5+09+bb9sk2n0/rssRp79O3zSnLXmrBSfMDDX+7
Xsv3TJqO9u+Nlv2KhsfCm6UPpPCn+F/xucLT9iGNZ8u7j1aXZb7Q3kFtX119
XXOtzU+bzxQeWl33XOb3Xtp9tOBp//7UuIWHtk9WcRpvtHqf5lnxfKpeKf7b
fmifS8OZyt8+l9b/LfOxrW87TusP11cuv10esry1f295X690SeE/9T1o0ZG2
j73tuygNP41/mq9SeFb10vpwm4cVb6lz2/jbPK/w2++dBSetn9DwtOOW+W75
Pka7jzRd7Pd3db9o+0OqXnt+mi4W36bw0PpzKm7pA5b9waLLSi+ar9r4LfXS
fPgUT7suGm+0PBZ9afhp/Kdw0vxP2+toeSz5ae+XFZ+0+9Lm51Sf0PaQU/PT
5lHbPyse2nH7vV7lafNsmS80Htp+sPQHmh9oetm/S1jqbfuBlp/G8yp/Wy8L
flr/b/N5qj/buq/y03Rczcc2P7TvS2+bL22e7fhp8RQPNJ5XPqHFbz88+/21
0rGtC+3dStPx1Pwr39L2TBr/qXNpfqC9K1O6t31i9w+NtxQPp85x2j2izR3a
fLToS3tvvm1vofH8tr5K4+1tfYx2f+1xGg9tX618kqorhb99Lm0u0PCsdKHh
tPCZwknTxYIzhf9+p2J+f7DsGzSf0/DT9vm38ZOq6/aBz8PfzrPy4SpP+/eW
fkKbgyv8bZypuk49t41/9Z3Krgttbqb4oeFf6UXTnXaPLPqm8tDy0/pDql7a
faHhacftOGn9k7Zf2d9xtPtI64dt/lc+OfX7Bu1ep/zT1rfNp52HFD+0/maf
CxZ9L5/ffC5NrzZ+Gv8WH96+esZ+m8pj4dOyx6b0svcN2nvErhctTvPn0zyp
c2n1tvW1nGvvkyucbZ5p89cSt/QZ2n2h+c2yd9HqpeGx3McUnlV+y7vP7oe3
7V3tumg8WHR8mp9WVzsPzVe0+Wj/vv2UH5qv2vqu/NPmYVXX1f3s92Ybp503
mg/b+lrqsvQB2l5B46d9bso/lvto2Rvt+4YF5yrPin87/rZ/UnH73Fzx0D63
rXuKB5ofaHtUu66232j9kHZu6veWc2n9qo2fdk/t8af1rnzSPreNn+Zzyz1a
6WK5Lyk8tP5Dq9fCG42H1O9pPrfwSYs/1ZdW78rPFl1u/NMfjWfLvKPVReNz
5QdaP7y6MOcCzVc0Pmk6WvYHi28t9y6Vv63vql4L/7R5dM/9MnnaddHmuD2P
JX+bN/t8pO1LtL2FthetfHJqnNbnafF2XTQ/pOL29wXNbzT/0Pa0U+O0OUu7
d3Zd3vadZNU37Oe2+af51tLHUnhWulvwnLpfWfokzVc0HlL1tnWhzYU2/zQ/
p3hYnUv7dxM7P0/zt3HS+KTx/7a9gjYXaHGLb1d4UudacLbrtfNP65+W/mzh
39Ln7d8PVzpaeEvlt9xH2nvh9o3tuW/br9o80HSx87/Cb9HX/u6w+Jn2vcI+
Ny080/DT/EaLt3mj6U7LT5unT3loxy06tnmm9XnaHrKq14J/VZclf5sfS/zU
PZ/mE/te19blzmWmXu089n5iwUnLQ3v/Pq1rxefKPzT8bR4sOGnfbSx71woP
LW7v8ymcdp5XeqV4sOhFu+80vVY8pPDT4it+Ur9v67LyyUoXGm8r/LQ9sH0u
TXfa/nbqnk/jzeIry35C4zmVx9IHLHPqVN5W+Vf34mme1Lm0Pmnv85b+TNPl
bX3SHrfv27Q5Yv+OnYpb+gxNX1r+FG/tPDQe2nxa3kG0e0rrz/b9ahVvf9ey
vENX9dL6AK2utu40nlM47brT7t3Vkfn9wVLvSq9V/rZv23ksOtrxrPCv+s9K
F8v9tezzKR3beVL5Ld8DUz5Z8fm2OE1f2p5g99vqHrV90taXlsf+HY+Gh/a+
O1UX2r5n6W803Wl6tfNbfELjwY7/vrOYcdr+Y/Hb6vc0/Ckd2/Va5uOKh7Yf
UvhX9b6tL7V1tPcZmi6n+ryNf3WuXS+aH9rxVF3/Aqx0x5A=
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`5000\\)\"", 
     StringForm["Iteration number ``", 5000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972687801795*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmbHKrtURhQ94AwHtJZDKO0j1l/ZW1pLU6S3TeC8JWImNN2BpmhRanT6F
lyBBmxQe8h5m/et5Zu8Dggwfs9estWb2vPv/4xd/++yvH7x58+Yvv/333///
9d/PL2+//OjrT9/++PLmf/79//FPPv77P/71zx9evvjD53/+5vt/v/z04Z++
/e6r/7z8Xjx9bhr/03On8tPiUzpO6Zv+fRo/jQdaX7Twb+0vmn9o9dr9nM5P
OzftN4ufafhpulj8/PRcmn/sfUHLQ/MbbZ6k82y9j+xzKc2bvV+mcLbwTP2+
xZt9v0rzT/suaM1Pmr5pvWjntvCn8VjOpcVpc4YWp/mEdt/R/EObhzTe7PVu
zU/zCU13Gp/pc9P80/Rt4U/HLTzYeU7zYP8Opc3hKR5oeWj80PaiFv7T5htN
97tfMfGn60rjoX3v03hL82yZw/c7ZRanxQ+Wei1+s59L23/S+O0+pM2TFg9p
PDQ+afGt9519Ltn5t/CZ5sfyXbZ1Hl7fduui+eHG3x237Mk03p7ip/Wd5XvK
Mpfuua57iranWfDT+po2H2g4t86HNB5aH1nedWk6pnU5LX6aDy33Ee1e25qH
5s90nLZH0fhpxWnfFxcP81wLHku/0+6vKfwtnHefn42fxicNT6tey99xaO+K
dh3teOz7Bk2vtL53/5zVizYH7HHa/vw0j8XPLf7TfLbwtOql3YM0frbipM1J
y9yg4U/zMMUbzW/pc+1+sPBgv8dp9bZ4sMyTrfd1iwfavmrP3/o9DX8L51T+
0/zZwn/anvY0btFxCj+t3tPmXotPuy5b/x6U5q2V3/J72jsqTccWn7T+svCf
1ovGZytOe7eZ+j0tftp7VJoH2r1J+z6i6dv6ffpc2vsGzSf297HT4rT5RttD
WnVZ7ke7Lmkd0/hpe0ur3nvu6+jyFP9UvVvffyzfNWk/pH319Nyt/NvP3co/
zc/p/DR+aLrQ9Hr6e/s+kK43Hbf0F22e33tk1odT9dLyn+ZDWpzWjy38Fj9Y
5pWlf2lxi44W/9B8NcVzq7/S/tlaV8uHT/G04lvrelqvJf/Tc0+L03hu6djy
p2Vu0Hig9VGr7+zfL1M8pOtK43yKn8ZbGr/lO6XFs4UH2jueJZ7WnabXVJyG
p4XT3l9TvNHu0/S5rbilXkvf0XDS+p12/15duvmf5mnp2+KzhbPFg+X78fZR
1280/LR6af6k8WbXhTavTuNtK89TddHwt+I0fizfKWn8Lf5petnxWHRJn5vW
i8azRa90Xa04bS+l7Xvpeu263/hsfGsfWfYWu//t+KfqpcWvju+nl+Vcmk9o
f184bQ63eLg8v44uFvwWfiw8p3mj7ee0fYl2z6Z9MsVDGicNT6suS5zmB/sc
m+Kz5f+p/PbvjqlzafWm66LFafNwCqf9vrP4wb6ft3hu8d+6d+zveLQ9iuZn
2nclTV8Lz2mcrXMt7wZTfF7/3/l5As+W/SStlyVO83m6rike7LzR9uGtvE3V
a3mXTvOcxk/7LrbU28JJ0zftB7t/Tutry55A6ztafpqfWz5pxe37RjqPhX/a
HN6qC22et3je+l5n2WPt+x7ND638tHMteNJxmo40P9N8aNfxtHNp82rq3BYe
Gp9b70dLH9nvXxqfU36w15uuK33uFM/pPBYeaH1Hw7nVJ0/rap1rn4d2nGk8
aT4tcyzNm8UPtO8Li45pfe18puN2PmnfWRY/WOqy96MFP423Fs+WuIU3mt9o
9bbuI5oPt8Zpe87W+FPeWrq3fGWZY7R3AJqOdj/Q7iOavlt1sdRL07flcxr/
NJ/Q4mnftvhs+fx+B70OPzS/WXxI09HitzTOdF2n7VctX6X9YPEJzQ80Hlp+
s8ft73vpemn32u2v98Nj57kVt7zLXTxM39rPPU13O37aHLbgoeneOpfmKxp+
+7sc7bvmNF/Z36Vbvto6J2l60eb/FP6p/Gk8dh1p/rTnt/TjVJw256dwWnyV
rrelV4vPlk/SPND4pPk5Hbfwacm/VRcLTkt+mo6tOO0+on33petN82afMy1/
tvK0dJmqy8KDBY+l7yz1tnRP1zuFJ62v3T+0eUi7N2lxGn47z1P403locymt
b8s/T+uditP8TJvDU/jt+trnJC0/jWfL/NzaLxY8T3G26kr7hOYrmn9oOKd8
a4nf/nL5c2uc5odWftr9O5U/PW8t7xX2eWLhk8az3T9TOtL6K12X5d48bc6k
+dnqh3QeC5+W/BY8U76y1GuZY7R93sJzWq/WufY9JM2zZY+y8E+bG7Q5Q8OT
xm/xJy3eqmvKDxb/085t3Qvpei1xix9ofT1VV5pniy60e8cSp/FA80kaJ61e
+/xM+63Fc6verXPvxn/9d1pft3ig8UZ7P7TgpMWn8E/5yqKjxQ9p/i3+3Ipz
Sl+a/y/O98Njmf80n9Nw0vih6TKF87T5Y+c5zScN51Rd6TxpXVp8puuy7Kst
HtK6p+tq+WSKH9pcsuCk3SO0fjxtLtHitDmTxk/jgfY+n47T5mE6P013ix9o
9zgNv2VeWeqy46fNmak8tLpo87PF81Z+nvI2xXNaRwuftH6n8dPKv3U+0O4R
S7ylC823tD5t8dzif4qHND9beUjzlsbZwk/jh+Znmv8tcbs/0zi3vs/Q6qXp
ZdE3/fvrWyYPaZytc7fG7bw9xZn2My3eui8sddHqpfVpSy/LntPyD23etnwy
lT+dh6YLjYeWH66+s/jTfkvHLfxb8tB4o/VpOm6pizZ/ts492l5Ni7d4ps3n
0+Y8jZ+tcVq/0+4XC8/pc6fqtfBpeXfa6jfLfKD5hMY/TfcpXVo+oflnCn+a
/zTONB7LHLDokubt8vA6PNDOpc3PqbjFD2n8NH0tOLfWZdmvLH1qwW/5jk7r
ktaXhue+A7juR4tPLP6x8GO/p1o82/mkvQduPZc2x67PmXuCnTd7PM3/lC72
PDSe0/jt/U7jf+v8t9zXtHli0XGqj1r8nMZnK06bJxa9LPVavhPTeVr47X57
ioeGn9ZHNPxp31r4TPt8ih8Lzy2cU/6cilvuQdo9m/693ecW/0/pSMtvwWnJ
T5sDU/hp/U7bl1pxy3c0jQcLTotetH3GPoe3+mFrn9rj9v2Kdr9b3vFo+dN4
aLrbz03j38oDzbfpumg4p+qizTHLPd7Sy4KTtrfT6qK9I1m+H9N8WnRM47f7
0x6nfY+0zrXMKxoPlncGe9zyLmG/H2l6tXCetm/Q9u1W3L5H2e9HC/+WvS5d
Fy2e7pcWb1O+teOnnZvWxY7/NL1o89mSn6ZjK067N0+7p2j803hI65vmgYY/
XS9tblh0tL83bt2v0ngs3y+WOZDmoaULjR/LXm3359a6LPdLy+e0PKfpa+mv
ND9pPqfwWHS34KTx09J9Cs8Uzhae9O+3xi08pH3Vip/Gz/Xzbh3Tfkjjp+m4
1SeW7/p0fru+6bj9ey2df6vfLg+zvKV/T3tvt+tL8//dk9/Nw1Y/WO7ZFn7a
u3Sa55burXpp/ZXmIc1bWi8L/jQPln2M1i+0ObA1PqVXOk7jjTZPbj8y922a
ryz6puvdmt/+jtTCP5Xffv/a5yQNZ0sXmh9oell42OqHNJ50XTTeaHks+tLw
0/ifwknzP22vo+Wx5Kfp2OJzK2+W+UCr9+bvft/R/NPiIR2nvV+l89PuKct+
ZeEh7QfLfKD5gaaXheet9dL82eJha/40nov//fCk/bDVny2cFv+08Fv4ob23
0Hz7NP9U/N4vzPgUPzT+0z6xxO887N6nW+dYy4dpflp4LDy0eG7tt1M82Pmf
OndrnOartE9o/rHzNsWDhbc0DxY89358nfxpPls80PyW1ivN8/0+6vK2dY5t
vS9ocRoP6X5s+baFh8ZD616g4WnpQsNp4XNrvZY9YQp/635M8zCli2UOn6av
5T6i7fOn8UPjgdbvtD6i6duak1vnuaWPpupt6duKW3DS4pa5MVUXjU/LvUnD
39KLpjuNT1q8de+38tPmw1S9tH6h4UnH7Thpewhtv7J/x9H6kTYP0/y3fGLv
I3u96Thtv7LzMMUPbb7Z7wWLvpfPd59L0yuNn8a/xYd3ru7Yb7fq0urTtC5p
vew+Seto14sWp/nzaZ6pc2n1WvSd0quVh3YP0s5N67I1TvNJOr/le9PCg/0e
sfszjaelVyt/63uBxj9NFxoPW/ccS71T+J/mp9WVzkPzFe1+tL9vP+WH5qu0
vi3/pHlo1XV1735v0vhP80njjebDdH57XS1+LHsFjZ+Wb2n3oOVdws7zaThb
edI8b52Taf9MxWm62Of21Llp3ad4OK1Pt+4tFpy0c6d+bzmXNq/S+C1zxhKn
+c3i5zRvNH3tc4z2jpqOW+YejR9LvKV7+vdb5wCNT5pvWzrS6rXgvPF3x2k8
0/ZG2j5Jm/O0e8q+h9B8m/a5pR8t+t64y/+W/qLdg0/zp/Vt1Wvhn/addc/t
4p/CY5l7aX7SPNPyp3mz3480/9P6l8ZPyydb47R3AFo8XRfND1Nx+/cFzW80
/1i+Q+1x2j1L6zu7Lvc7lPkuTTs3jYfmW8scm8LT0t2CZ+t+RXvnt/iKxsNU
vVN10eLputL80PRtndvqI5petLk9hZPGJ41/Gp+WvYs2V9P8T/FpxzN1rgWn
pV7aO8DU76d4mMpv4Z/mzxb/U79Pn9vqOwtvU/nt/WjnYUrftE9o59J8NYUz
nZ82V7fy38Jv0ZfWF7T8Lf6ncKbxp3Fe/K45ma7XvjfSdKflp92nT3lIxy06
pnmmzXlaX7fqteBv1WXJn+bHEj9tz0+fS+PZoovlHrHgtPBjnycWnLQ8tO/f
p3W1+Gz5Z+teZKmLtm/b964WHlrcPuencNp5buk1xYNFL1q/0/Rq8TCFnxZv
8TP1+7QuLZ+0dKHhTOO3fE+lz6X5wbI/0HRs8WzpI/t9mubBgpMWp+GfwpOu
a2v+p+e28kydS5uT9jl/9407J8n3cssPdvy0vrbzn9aFtifQ5o/d/1N5aDyk
+bR8B9H6lKa7fb+yxGn80OawfQ7Q6krrTuN5Cqddd1rfXR2Z7w9236bxt/Kn
fZvOY9HRjqeFv+WHli6W/rXs81M6pvNM5be8B075pMXnjbv2jbvf7phLNF/R
8tjf8Wh4aN93LZ7TutB4tsw3i0+uH5h9ba/XruPW76xWnLb/0PzWqteOZ+t8
S59rqWtKr5buLZ5pc5WmC63vLLrQ3qloc8POD20ubfVJut5fADxoj3Q=
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`10000\\)\"", 
     StringForm["Iteration number ``", 10000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972692631385*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmTHOpsURhFfiAkgmt5CIfAOiPyQncryC2LlDJ76LLREhEi7g0CQEEG1O
wBGQtU4ceMW76tp6np5ZCQm1PvVUV1X39Dv/p6//8uXXH7169eqr//73n/9/
++/Xlzd//eSbL9789PLqf/79/vif/vi3f/zwz3+/vP74z59/+68fX37+w2ff
ff/3X17+Xzx9bhr/03On8tPiUzpO6UurK+1Pi9+mcFrqpfnQ4jdavXY/p/PT
zk37zeJnGn6aLhY/Pz2X5h97X9Dy0PxGmyfpPFvvI/tcSvNm7xcLTovfLLzR
9ErzabkfLfqm9bL7ZAp/WnfLubS4xVcWfp7mmcKTrneKH9q7AW2voMVp9W7N
T/PJlO5b+Uyfm+a5xdvdr5h9aud5Kw+0fYB2X6T5TOex+ITGp8W3rThN97tf
MfFb4pb5YNfLwnOrrqf5Lfq2+Nw6n7f6zX4ubf9J46f1Y6veFs4Wb2meafhp
/FjuO/tcsvNv4TPNz/0u68avb7t10fxw4++O077X7L6yzAdLv1twtuI0XdL5
7f3VqjfN/2n62nWcqpd27hQeWh/Z+6KlY1qXrXHa/LfwsHXO0/7eR5urUzzT
4rQ9isZPK27Zw1vn0vBcHnbM1dN4sOwtFj7T8dP4pOGx8ED7Xjhtn7TwQzuX
ds9a3lct94LdD+m6pvDc+PvF7T638NPis4WnVS/tHqTxsxXnaft2mh9LvVP4
LfO2xZvdDxYe7Pc4rd4WD5Z5svW+bvFA21ft+ad+n45b8FvmTPpcO29T554W
t+tImzO0PacVp+2NFl1oe6adt1b+rXNpKw80Pmn9ZeE/rReNz1ac9m4z9Xta
/LT3qDQP9vgUby0dp3DS/p779Pe0v0vSfGJ/HzstTptvtD2kVddp+wOtfy38
0PYWO/+nnZvGP1UvjX/auxxtDtDy2H3Swkk7dyv/T/Ok/ZzOT+OHpgtNr6e/
t/cpTfepumj9RfOJHU9ax3ScNt+e5rH4sKVvWkfafZHGb/GDZV5Z+pcWt+ho
8Y/dV2l+aHN+a10tHz7F04pvretpvZb8T889LU7juaVjy5+WuUHjgdZHrb6z
f79M8ZCuK43zKX4ab2n86XPt/WvhgfaOZ4mndafpNRWn4WnhtPfXFG+0+zR9
bituqZfWd5Y9hNbvFp6vLsy/I7T0bfHZwtnigTY/W7rb+4jm/zR+Wr00f9J4
s+ti55/G25RP7DxP1UXD34rT+LHPExoeu152PBZd0uem9aLxbNErXVcrvvU7
wo7fovuNz8ZpPmy9d1n4ocXt+KfqpcWvju+n1z33w+Sn8XD93/1702lxO2+0
94qtPKf5pO3ntH1p6z5mmfO0e9z+XUnrL4sftvI5xUMrv/27Y+rcVnxrXVM8
WPrFskdZ+ovGcxpni+cW/617x/5dTNujaH7e+l1J08Xuh9a5lneDKT5pe05L
X5qOU3XR8ND80OKf5itanObzdF1TPNh5o+3DW3mj6dXKP1VvGj/t/rLU28JJ
64tWHpouU/hpPqfhmYrb+87Sj3aftOL2fSOdx8K/ZQ7bdbHwYP87BU0XO04a
PzQ/tPLTzrXgscRp9whtLk3xOfX703Sk1dvqu6lzW3hofG69Hy19tPX+pfFm
7zvaPEyfexrPFh5Om6t2nzytq3WupU+34kzjSfNpmWNp3ux+mOLBMmdo95Sd
z3TcziftO8viB0td9n604Kfx1uLZErfwRvMbTcfWfUTz4dY47e8OW+Np/lu6
t/xA83Oah606nhaf4t+i7/UV0z8WnDSfT+Wn6WXxA+3+bcXt+Fs82L9nW/OW
1u80n9NwWnxLi1//zOK0f19Y+Nnqt1bc8j7Tqpd2r9n7q/X9a+e5Fbe/V6TP
tfBjr8vCm113O37aHLbgoeneOpfmNxpO+7scbR+789n1Lp3GOfV7i+40vWjz
fwr/VP40HpqOLV0s/m/pQturp+K0OT+F0+KrdL0tvVp8tnyS5oHGJ83P6biF
T0v+rbpYcFry03RsxWn3Ee27L11vmjf7nGn5cyp/On73q/fjwYLH0neWelu6
p+udwpPW1+4fmg8t59J4puGh4Wzt4Wl/pvlv6dvyT1rHli4tvabw0Hhr8Wyf
k7T8NJ4t83Nrv1jwPMXZqivtE5qvaP6h4ZzyrSV++8vlz61xmh9ofrO8D7Tm
bWuenzZPLHzSeLb7Z0pHWn+l47T538JJmzNpfmg8T9WbzkPjM32uxScWf1rq
tcwx2j5v4TmtV+tc+x6S5tmyR1n4p80N2jyx4KTpZfGVva4pP1j8Tzu3dS+k
67XELX6g9fVUXWmeLbrQ7h1LnMYDzSdpnLR67fMz7bcWz616t869G3/77/b1
mf6nzXnaO2caP+3eb/ktrSPNt/Z7f2u8xduUvum4ZU+g4bT4lsbzVNwyb1s8
pM9N4zxt/pwWt9yzlnfIli4tPtN1WfbVFg9p3bfq2/LDVpzpPBZ/pvFM6Zvm
J60jLX7fUV3zgeZb2jxM56fpbvED7R6n4afNK1q8pa9Fl3T/TuWh1UWbny2e
t/LT4i2NZyufaTw0fmh4aDrS4rS9iKaXZV+i8dPiv6Uv7d2AFm/x0PLVFM4W
fho/lrl62v7wNG73ZxqnZd+g8TDlN9rcoOmb/v1UXU/z03zb0rfFm0UvS9zO
21OcaT/T4q37wlIXrV5an7b0osVp/rHwYOEtnYemC42Hlh+uvrP4p/hvxS38
W/LQeKP1aTpuqYuGc+t3KO390BJP80ybz6fNeRo/W+O0vt76Pkmry96PNP9M
4bTwQ9PF/u6xlX+a7lO6tHxC888U/jT/aZxpPJY5YNElzdvl4cPwQDuXNj+n
4hY/pPHT9LXg3FqXZb+y9CmNtyk8W+fP1vjWPqXFabqn9bK/I1n4sdwLFjwW
/LT3wK3n0u7B63PmnpDmjcYzLW7h2Z6HxnMav31O0vjfOv8t9zVtnlh0nOqj
lr60eJrPVpzGs10vWr2Wc9N50jpeXzHvQUsf0fTa6mcLb/b9qoUzrUu6rnSe
Vv6n56Z/b/e5xf9TOtLyW3Ba8tP2txZ+C86W36birXvEzoMFp0Uv2j5D28fS
PFv8sLVP7fGt+xWtXto7Hi1/Gg9N96lzp3huxWnzoVWvBf9pcdpcvT5xxS06
WuawpR9b/LR0b51L2/fS+S3zpBW39O+dV0weLO8M9jjtXWIKZ4sfGh4ab/Z9
g1Zvuq4WPxZ9W/XS4i2ftPRK10WLp/slzduUP2m6t3Cmz23pZcF/ml60+WzJ
38JDi9PuTRr/tH2DtrfQcNL8QMOfrtcyN2g60t4babzR+ov2Pfg0P62/aPfX
FP8tPlt4nua380zj/7S6Wj55mmcKTyvPafpa+ivNT5rPKTwW3S04afy0dJ/C
M4WzhSf9+61xCw9pX7Xip/Fw/bxDX/u7h0XHrT6xfNen89v1Tcft32vp/Fv9
dnno8jZ17tTv03hocZr/7578bh5oeGg+odXV0pfmf1qf2uul6UvjLX2uRXca
//a+s+C8ceZ8s/uBVtdp/NP2VZpeFn3T9W7NT/N/moc7n2fjljlpibd0ofmB
FrfwsNUPU3hadbV42+qrp3haeWi6p/G36rLvFVN8tvLQ8lt0bPFJ65eWH269
3fzpOM0PNJ5pPNj90NKlhXOKZ8u8pfGQ9oNlPlh0b+ll2Qcsc5imSzq+1Vdb
78fT8Lf6cas/Wzgt/mnht/BDe2+h+fZp/qn4vV+Y8ZYf0rrQ8Lfidx5279Ot
c6zlwzQ/LTwWHlo8t/bbKR5acct3pT2e5pPmE5p/tvJGu8dpPNPuZdrfBSxz
7DQdp3igvY+l+UnzbJmrtHNp8RZvNP/QdKHpbp8DLZ+08NB4OM2fFp/T/Gzn
01KvZU+Ywt+aP2keaLq09LLra/FVq67TeKDN1Va9W/c6mr6tOXnaPE/rZZkn
NJxTddFw0uKWuTFVF41Py71Jw9/Si6Y7jU9avHXv0/LTeLb3Cw0PTV8aTtoe
Qtuv7N9xtH6kzcMp/tN6WXiewkPj34I/zUOr3jQPU/zQ5pv9XrDoe/l897k0
vabwWPi3+PDOVeZ+a/GDnU/a3rV1brTmzFa9aHGaP5/mmTqXVq9F3zT/9jnZ
wjl17tTvT4vT+i6Nf+u7KG2/2soDDWf63LRe6Thtf5s6N82PZf63eNi651jq
ncL/ND+trnQemq9o96M9/pSfNG9TeKZwbuWhVdfVvfteTeO/VZflHrTnt9Q1
Fafd47S5Tdt/aDy3fJjui1ZdtPvOjjOdp8Xz1jmZ9o9dxyk8LR7S56Z1n+Lh
tD7durdYcNL4eYqzlWcrz2n8ljljidP8ZvFzmjeavrT7On3uVh+2eKPxSZvD
rff8qTz2+4V2b9Let2n9TqvLMm9pc3hrnMY/bW+k7ZO0OU+7py6frv619KNF
3xt37XWW/qLdg0/zp3Vv1Wvhn9aP99wu/ik8lrmX5ifNMy1/mjf7/UjzP61/
afy0+EzjpPHwNE9LF5o/T/PVUx5a+Wm+avUdTV9aXbS4/f6izWd7XTR+7j3b
xWO/v2i8pX1C092CZ+t+RXvnt/iKxsNUvVN10eLputL80PRtnWt5L7LwQ+ON
xieNfxqflr2LNlfT/E/xacczda4Fp6Ve2jvA1O+neJjKb+Gf5s8W/1O/T59r
n3tp3tL1WvqRxk9L3zQPtHO3+iqdv7XPnMZ/C79FX1pf0PK3+J/Cmcafxnnx
u+ZkiwfafLboTstv17cVp+lox5nGY+fB3i/puq7us7q04qft+elzaTxbdKHt
VzS/tfSy6J7mwY6Tlof2/fu0Lhqfaf/Y59tTHiw4aX6w7F0tPLS4fc5P4bw8
u/6u1NKL1u+0e6HFwxR+WrzFj0WXFp7T+Gnh3/oO1uKTpm/6XJqOLZ4tfWS/
T9M8WHDS4jT8U3jSdW3N//TcVp6pc2lz0j7n775x5yT5Xm75wY6fVpd9Trbq
snyH0uak5V6z85Dm0/IdROtTmu72/coSt+yflnppc4BW15Qu6bqmeJ7Caded
1ndXR5cuFt+2fELrizQP935h4mnhb/mhpQutf2k8p39P+96h3WutPFNx2r6x
Nd7ScUr31rkWvSw+SfuKlsdyL0zFt+57NJ7TutB4tsw3i0+uH5h9ba/XrqP9
3YAWp+0/NL+16rXjufPNdf+2/NnSneYfms9butD23ql6076l6WWZGxZ+aPfU
aT6Zqus3EIO7bQ==
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`15000\\)\"", 
     StringForm["Iteration number ``", 15000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972697737903*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmbHKrtURhQ94A4HYS8Aqd2D1l+lTWUus7VPaeC8KVpImN2BpmhRanT5F
LiHISWPhwVdm/et5Zu8Dggw/s9estWb2vPv702df/PXzD968efO3///38/+/
+/ffl7d///Dbv7z98eXNL/799vifP/ry639988PLZ3/49JPvvv/3y09//Pgf
//zqPy+/Fp86t4X/aV1T+Wnxli4tHdP4aTzQ+sJSL82HFr/R6rX7OZ2fdm7a
bxY/0/DTdLH4+em5NP/Y+yKdxzIPabpv1WsKP21vmdJ9Kn5av1hwWvxm4Y2m
V5pPy/1o0Tetl90nU/jTulvOpcUtvrLw08Jj4Yf2bkDbK2hxWr1b89N8MqX7
Vj7T56Z5bvF29ytmn9p53soDbR+g8ZPmM52nVReNh+tbph9aeqXrTfNswW+J
W+aDXS8Lz626pvLT9G3xSeOnVa/lu9h+Lm3/SeO396MFP423NM80/DR+LN8j
9rlE8+1WPtP83O+ybvz6tlsXzQ83/v447XvN7ivLfLD0uwVnK07TJZ3/tP6i
+f/y062rpZfl3Ck8W99p7ffmab9z0fi0z6UWP3Y+ab/30ebqFM+0OG2PovHT
ilv28Na5NDyXhx1z9TQeLHuLhc90/DQ+aXgsPNC+F07bJy380M6l3bOW91XL
vWD3Q7quKTw33o3b/fy0LgufLTytemn3II2frTgtfmjFad9Tlnpp87bFm90P
UzzYz6XpSzvXcg+28KTnKk13y3fN1vxpP7TiW+s9zf8t3tI6bo3bdaR9x9H2
nFactjdadKHVZeetlX/rXNrKA41PWn/R+G/pReOzFae920z9PS1Ou9/tPNjj
U7y1dJzCSfs99+nfW36nntJ3Cg+N/xt/948232h7SKuu0/YHWv9a+KHtLRb+
afxYdHmKfyv/tHc52hyw+NbikxZO2rlb+X+aJ+3ndH7afUfTpXWupR9p70Jp
3afqor1T0XxCwzOli923tPx2H7b0Tet4mn8sfrDMK9p3gSWe1sUSv/55nd8d
tu5XtLpo+GnxWy9zv5o697Q4jWeLjml+0rrYcdL6iOYf2vuDZf5YfE7jLY0/
fa69fy080N7PLfG07jS9puI0PC2cp/VXi2faua24pV5a31n2EFr/Wni+ujB/
R2jp2+KzhXMrP1v76Pqti59Wr92fW9/zaXsCzbct3qZ8Yud5qi4a/lacxo99
ntDw2PWy47Hokj43rReNZ4te6bpa8a3fEXb8Ft1vfDZO2+ta78Y0fmg+ufF3
/2h9kfY5jX9LXbQ93zIPWzzY/b/1/t0at/NGe6/YynOaz63fubT4lF5pP6T9
k/atpa9p/qT5f4q3rXrRfGvBQ/NJi7d0vTScLR7s97g9bvEDzT8Wnlv8t+4d
+3cxbT7Q/GzB2dL3NJ7tv1/QeLa/d7X0pek4VRcND80PLf5pvqLFaT5P1zXF
g5032j68lTeaXq38U/Wm8dPuL0u9LZy0vmjloekyhZ/mcxqeqbi97yzvCXaf
tOIWXSw+bPFvmcN2XSw8tPJv1cWOk8YPzQ+t/LRzLXgscdo9QptLU3xO/f1p
OtLqbfXd1LktPDQ+T7sfW7zR6t3K5633deq6PL9OvTQe7PE0zzSf0OL2frTg
p+FJ82n5zkrzZvfDFA+0e2RKxyketvKZjtv5bOWf+nuL7jScln604KfhafFs
iVt4uz5h3kdb9aXFab87bI2n+W/p3vIDjc80D+l6af2yNT6lC82ftHt/a5ym
72k+n8pP08viB9r7Wytux9/iwf4925q3tH6n+ZyG0+JbWvz6Zxan/fvCws9W
v7XitPcZWr20e83eX3Y8Fv+kfZjOb49v5adVl4U3u+52/LQ5bMFD0711Ls1v
NJz2dznaPnbnM/M9JO0rWt9tjdN4aPXvVP40HpqOLV0s/m/pQturp+K0OT+F
k1YXbT5b5hVtbrT0ovFp6d+WXjTf0vJv1cWCkzY3aPzQ4rT7iPbdl643zZt9
zrT8OZU/Hb/71e/jwYLH0neWemm60/o3ra/dPzQfWs6l8UzDQ8PZ2sPT/kzz
39K35Z+0ji1dWnpN4aHx1uLZPidp+Wk8W+bn1n6x4HmKs1VX2ic0v9H8Q8M5
5VtL/LT+svtza5zmB5rfaHtpOj/t71v60uJP+aHxuVXHdF3pfm/h3+pnGk77
Hk7rR9p3+lQeGp/pcy0+uecy+3SqH2lz285zWq/WufY9JM2zZY+y8E+bG7R5
YsFJ08viK3t8yg8W/9PObd0L6XotcYsfLPpe/Dvurxb/Lb0seE7zGw3PU5xT
vrL7oVWvfb7d+Pvjt6/P9D9tztPeOdP4afd+y29pHWm+td/7W+Mt3qb0Tcct
ewINp8W3NJ6n4pZ52+IhfW6at9Pmz2lxyz1reYds6ULjP10v7d5v1Xt1dPlh
K850Hos/03im9E3zk9aRFqfxYJ+ftHuqpZf9XNo8oemexnna/kCbV7R4S1+L
Lun+ncpDq4s2P1s8b+WnxVsaz1Y+03ho/NDw0HSkxWl7EU0vy75E46fFf0tf
2rsBLd7ioeWrKZwt/DR+7PEpfuxxuz/TOC1xGg9TfqPxTHt/S/89Lb61j2i8
WfSyxO28PcWZ9jMt3rovLHXR6qX1aUsvS9ziT1r/0nhL56HpReOh5YfT9KXh
pMVpfWHPQ+PtNP9b6rXjeZonrXurrq3xNM+W+Zz2Yctvafw3/u4fra9p7wMW
ntPnTtVr4dNy72z1G63faXpZ+Kfpno5v/T5q8Uy7x9P40zxY5i1NL1pf2Hmg
7TmWc1txix/S+Gn6WnBurcviH0ufpvG38GydP1vjW/uUFqfpntaLtpc+zWPh
x3IvWPBY8Lfmc5qHVpzGM80P9novz8y9yM4/7fcI+z04haf1e0S6Xto9lcZv
mf9b9/yWH2g60vik8UPjsxWn8WzXi1av5dx0nrSOFl+lcabxW/xswX/9wOTN
vl+1fJLWpYU/zQNN3/Tft3xOw9OK03x1eejmp+1vLfwWnC2/TcVb94idBwtO
ml7279CWLi3+ad99W/vUHj9tv9q6n9jzT+GZ8m1a9xaeFj9pnDT+p3DS8J8W
p83V6xNX3KKXZQ5b+tHiB/u5tO/xdP57L7wOb1P5n+ZJ10WbVzQeTvsdoRWn
vUvQ4jT8Fv9v3Qda9dJ8mOaHNk/s96OFf8tel66LFk/3S5q3KX/SdG/hTJ/b
0suC/zS9aPPZnt8yP6fitHuTxj9t36DtLTScND/Q8KfrtcwNmo6090Yab7T+
2rr/TOWh9aOl3y38bH1vt/N/Wl0t/0z9vSXP0/w0fWl9ZN9nLPeFRV8aTho/
Ld2n8EzhTOOh1WuPW3ig+aTlNxr+dL1b/WzX1/7uYdFxq08s3/Xp/HZ903H7
91o6//XbLG+0uiw80N7b7frS5sDdk9/PAw0PLU6rq6Uvzf8W3S310vSl8ZY+
16K7hX+af+582BFv+XCrH2h1ncY/bV+l6WXRN13v1vw0/6d5uPN5Nm6Zk5Z4
SxeaH2hxCw9b/TCFp1VXi7etvnqKp5WHpnsaf6su+14xxWcrDy2/RccWn7R+
afnh1tvNn45b5oOFZ5r/0/if5knjbOVJ82yZtzQe0n5o3Zvpulq6t/Sy7AOW
OWzpCxoPW/On8ZyG397XLTw03dP5afsD7TvRci/bvxdofZrm2YLTEqf5ZEoX
Gn5L3O5P2n26dY6ldaG9c9J03Jqf9jvIFA+tOM23N870lf3+3crbaT6c4mcr
nq3342k6TvFAex9L89Pin8YD7VxavMWbxSdb4zQe0vq2fNLCQ+PhNH9u9fnF
s6Neu88t8yfNA02Xll52fS2+oulOqzfNQwtnq96t/qHpS5uT9v3c0kdT9abx
p3FO1UXDSYvT3gFo/KT5tPBmxz9VF013Gp+0uH3/seh7Wr/Q8ND0peG0vyO1
3tnSdbX0pX3P0vC39LLzbOffgj/NQ6veNA9T/Fj6jtbXp92bp/FJ02sKj4V/
iw/vXGXuVxY/2Pmk7V1b50ZrzmzVixan+fNpnqlzafVa9E3zb5+TLZxT5079
/WlxWt+l8bf2B5qONN4s/NjxWPRK85z+ewufFv/TeNi651jqncL/NH+rrhYe
mq9o96M9nvaVpR9p/knz0Krr6t59r6bx36rLcg/a81vqmorT5uRpeO4c/n14
ps5Nx2k8n4YznafFM21O0nhOx2m6nKYvzVc0P6RxWvix+6GFJ83PU5ytPFt5
TuO/c+bMez/tzzR+u7729yvavZmOW+YejR9LPK37FJ9T/NN0T9fVmueWfqfV
ZZm3tDm8NU7jn7Y30vZJ2pyn3VOXT1f/WvrRou+NM31iwUPDP5X/aZ6puH0+
0/Lfc2fPtfvTMvfS/KR5puVP82a/H2n+p/UvjZ8Wn2mcNB6e5mnpQvPnab56
ygMNDy1u57OVZ2vcfn/R5rO9Lho/957t4rHfXzQdLXEan3b/0PzW2q8svqLx
MFXvVF20eLquND80fVvnWt6LLPxM8UbrX1q9aX1p9yNtftLmapr/KT7teKbO
teC01EvD8xSnJT+Nf8v+3+J/6u/T59LmHu1es9RL45nG/1R+O077e85UXS3e
pvxw+WfObRoeWl/Q8rf4n8KZxp/GefG75mSLh63z0DIn7d8ptL6Y4r+lox1n
Go+dB3u/pONX9y7/rbh9LrXOpcVpulj2KxrPab1oulv6uqVXul9outN0ecpP
Wpe0Xi0+W7rQcNL8QNvPaXhocfucn8J5eb77Fdk/LZwWHqbw0+Itfiy6tPCc
xk8Lv6Xepzy0+KTpmz6XpmOL5/Rebak3rVeaBwtOWpyGfwpPui5L/rSfW3mm
zqXNSfuct/iQpgttPlj81orbebDrS+s7e12W79Ct8621X9F4SPNp+Q6i9RFN
d/t+ZYlb+oXGj50HGv7T5t5putPmzNXRpYvFty2f0PrC4h87zzQ8p/mhVRet
f+08T+VP52nxkNb3tLl04655RZszFr0sPkn7ipbHci9Mxe8e8jo8p3Wh8WyZ
bxafXD8w+9per11Hy7uHJU7bf2h+a9Vrx3Pnm+v+neKfFqfxTHtPsPRjKz/N
b1M403xunTNb5z8tTtN9Spf/AU5BznY=
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`20000\\)\"", 
     StringForm["Iteration number ``", 20000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972702910544*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmTGuZkcRhUdiA5Ygtyw5YgdEL3RORDzCMTkhCXsBiQg5YQMOceLAjiYn
8BIsNCQEPHGf6sz5vuoeyZJVeup76junq/ve/4v3f/jt17949+7d7//z37//
/+O/n14+/PFXf/vqww8v7/7r3/9f//Xnf/rLd3/958v7z373m79/+/3Lj7/8
8pt//PlfL/+rPvXclv6nfU2tT6u3fGn52Krb8zal09KvPYen7buteU6vT3tu
Om+WPNP003yx5Pnpc2n5se+LFh/aPKT5nvar5a8lb2lf0vXT9otFpyVvFm40
v9I8aXNv63vHaeed5b5hfy6tbsmVhU9Lj4UP7X5Ou1fQ6rR+T+Np0UnLg/25
ac4tbvd+xdynds5bOdDOLxqfNLep9S39br13WXJLywMtb1N60pwt+i11y3yw
+2XhbOmLlgf7+yCNG+3e1eJgeS7t/pPWb9+PFv00bmnONP00Ppb3EftcouV2
K880n/te1q3f3Hb7ouXh1l+v034vsOfKMh8s+92is1Xf2q/9/LXrf9rX5fNp
+mr5ZXnulJ6t32nt52aLJ41Di+flc/cd4fc+2lyl+TVVp92jaHxadcs9vPVc
mp7LYcdcPY2D5f3UwjNdP40nTY+Fg+U7WItPum7hQ3su7Zy1fF+19GvPQ7qv
KT233q3b8/y0LwvPlp5Wv7RzwcKHprO1ftpHS93er2W/0PjTzt9WncY/vf7W
flscLPOEdl6nfW/xoeXNsn4rD+n61n5Py3+LW9rHrXW7j/d3MWaddm+0+ELr
y86ttf7WuUTj3Fr/tLlE49/yi8azVbfMB7uP9vfEFoet9SluLR+ndLbmAO3+
vDUnp72/2Ou0+Ua7h7T6on0fmOLT8qXlY0uPfX7S5o9lbljqdv7277r3/cWV
k5ZO2nO38n+6TjrP6fVp5x3Nl9ZzLfuR9l0o7ftUX7TvVLSc0PRM+WLPLW19
ew5b/qZ9PC0/ljxY5hXtvcBST/tiqd/8fJrfHbber2h90dan1U+bk1vzQ5uf
tLnd4mzxMc0n7Yu9TttHtPzQvj9snT8t/RZulvu5ff9aONC+n1vqad9b3J7q
aXGw10/bX091tvinn9uqW/qlne+Wewht/1o4X1+YvyO0/G3xbOncymfrPrp5
6+qn9Ut7n6Vxs/tCu1fYuU3lxM55qi+a/ladxsc+T2h67H7Z9Vh8ST837ReN
s8WvrXXLe67lvmfJp0XnaXXava713ZjGh5aTW//4j7Yv0jmn8bf0RbvnW+Zh
i4M9/1vP3611Ozfa94qtnNM8LXPYXp/idvOz4xyn5ZOW/yluW/2i5daih5aT
Frd0vzSdLQ60ezJtjm2dk2n+W/XQ+mr9Pthax5K3rXPDopPm71bO9t8vaJzT
c3tr/mk+TvVF00M7l7f2a69fbm/jYOdGO1+2cqP51Vp/qt+0fst7Aa3flk4a
59Y6NF+m9NvzYLkn0PYjzUca51ZOWnWLL7Sc0/hb5rDdFwsHC2eLL3adND60
PLTWpz3XosdSp50jtLk0xXPq70/zkdZva99NPbelh8bztPOxxY3W71aet9+u
75fzbg5b61OcaTmh1e370aKfpifNkzYHLO/XtDxMcbDcB1rvWVt5put2nq31
p/7e4jtNp2U/WvTT9LQ4W+oWbjcnzPPoNN9bddrvDlvrW31v5aHVV4tDul/a
ftlab+Ww5fvNWzc/Fp2WnE+tT/OLlgf7+um6XX+Lw32f/TR90XxM12k6Lbml
1W9+ZnXa3y8sfLbmrVWnfZ+h9Us71+z7y67Hkp90DtPr2+tb+bT6snCz+27X
T5vDFj0031vPpeWNptP+XY52H7vzmfk9hPYdxj5PTssJbf9OrZ/WQ/Ox5Ysl
/y1faPfqqTptzk/ppPVFm8+WeUWbG2m/LDwt+zftF42nZX0Lf/s+pemh1afy
ma5b9le6L/t+3DpnLPelVv3er97GwaLHvu9o/dJ8p+3fdJ7T69P2C+1+1Xou
jTNND01na/6n85nm3/K3lZ+0jy1fWn5N6aFxa3G2z0na+jTONG608+7er97G
rdVXOie0vNHyQ9M5lVtL/bT9Zc/n1rolD6280e6l6fVpf9/yl1Z/yofGc6uP
lr5aeUjnlpZnmk77Pdy+H9N80v22eG7ty6LntH4t+7F1P7dwTvvVeq79HpLm
bJlvFv20uUGbJxadNL8subLXp/JgyT/tua1zId2vpW7Jg8Xfq39HvcW/5ZdF
z9b7Ek3nlO9TubLnodWvfb7d+uv1u6/PzD9tztO+c6b10879Vt4sz6X5a9Fv
qbe4pfPfys/U+nadtJxbOE/VLfO2xSH93DS30+bPaXXLOWu5n7T6bfG3+Gs/
32lzeKuP6e8htBxO6UyvY8knjXOLT9pHWp3GwT4/LfMtrcf+XNo8ofme1mm5
50ytQ5tXtHrLX4sv6f07tQ6tL9r8bHHeyqfFLa1nK8+0Hhofmh6aj7Q67V5E
88tyX6LxafFv+Uv7bkCrtzi0cjWls6Wfxsden+Jjr9vzmdZpqdM4TOWNxpn2
/S3997T61n1E42bxy1K3c3uqM51nS93yHtTSQ5tLaf133nbvVzSeU76n+5pa
n8bfziH997Q5bPGXppNWp+0L+zo0bqfl39KvXc/TddK+t/raWk9zpulv5bDF
M63/1j/+o+0L2vcBC+f0c6f6tfCknTs0PjRf7N89tvKn+Z6ub30/anGmneNp
/WkOlnlL84u2L+wcaPccy3NbdUse0vpp/lp0bu3Lkh/LPk3rb+nZOn+21rfu
U1qd5nvaL9q99Ok6Fj6Wc8Gix6K/NZ/THFp1GmdaHuz9Xs7Me5GdP+33CPs5
OKWn9XtEul/aOZXWb5n/tH5b+ZziT/ORxpPGh8azVadxtvtF69fy3PQ6aR8t
uUrrTOu/9d3vR5fb7HNpPNP6075s5U/zN/33Fs72/E/5SFvfotOyvuV9JK3f
orOVt6l66xyxc7DUaX5Z9jXtPrY1DzQ+af00nZZ+LfOBpvO09af0TOU27XtL
59a6hb/lHL/1j/9o3/lvTlx1i1+0e0KaJ+19k/a+ZnkujWeazz0XPg23qfVp
fdH6pc3t035HsNRPm3s0/Zb80+azvV9aDtN8aPPEfj5a+G/9vk3zyzKvaPmc
qtP6oj235YtF/2l+0eazfX37/KTxod03LHxoubXopPne0k/jQJsbNB9b/bbW
T/Oh+TXFubW+ZQ60OKf10PjQ9mOLM43/aX218mN5Lu37GO3+QKtP9ZvOSev+
affdopPGp+X7lJ4pnWk9tH7tdQsHWk5aeaPpT/e7Nc92f+3fPSw+bs2J5b0+
vb7d33Td/r6WXv/mbZYbrS8Lh9Z+bK2frtPmwL0nv86BpodWp/XV8peWf4vv
ln5p/tK4pZ9r8d3Cv5Ufi85bd+Vwax5ofZ3Gn3Zfpfll8TfdL61umSc0H+98
nq1b5qSl3vKFlgda3cJhax6m9KTr9vxYcmXxceq59n1kz+1pvqS52XNFmw8W
32l5uP1210/XLfPBwpmWf1oe0jpb69A437x1z/10vy2/puo0vyz3gXQ+W/3a
98XWXNk5n3a+t/Q/XWdKT9rHFrep9Wn8ae+JlnPZ/r6wdf/S5vDWOi0nU37R
9Fvq9nzSztOt9+S0L7TvnBYf03rS+mm5tdctuT2tvjUn97sZ875B45bms1VP
Kw+0+5jdxykOtO9daT4t/jQOtOfS6i1ulpxsrdM4pP1t5aSlh8bhtHxuzfnV
s6Nfe84t8yfNgeZLyy+Lv/e+dO+N5H5pOd+aH5q/9jmZ5jalP82Bxs2ic6ov
mk5anfYdgMYnzdPCza5/qi+a7xbONH+n1rGsT+Ns3xc0PTR/aTpb/Gnny5S/
Fp60PLT6Suuf6mtq/RZnO3+L/jSHVr9pDlN8bn1HDi/PWW40X6b0WPhbckh7
L7DX07mi5cHOk3bv2jo3WnNmq1+0Oi2fT9eZei6tX4u/af72OdnSaXnu1rqd
G22/WOYnjZuFj12Pxa805/TfW3ha8k/j0NqnU3+f5pDud0r/0/VbfbX00HJF
Ox/t9XSuLPuRlp80h1Zf1/fu92oa/1Zf9nNwan2a/lZfU3XanDxNz53Db9Mz
9dx0ncb5NJ3pdVqcaXOSxjldp/l1mr+0XFl8tD+Xln8a5yk9aT5PdbbW2co5
rf/OGeZ7XDon6Xym9dv9tX+/op2b6bpl7tH4WOpp36d4TvGn+d7KlT3PNB9p
/Vp03vrrdRp/S25bfbXOL8t5MZVDO08LH8t+tPh768ycWPTQ9E+t/3Sdqbp9
PqfXt+Rq63Pt+bTMvTSfNGfa+mlu9jlGyz9t/9L4tHimddI4PF2n5Qstn6fl
6ikHmh5a3c6ztc7Wuv38os1ne180Pvec7eqxn180Hy11Gk97frbmjcY5rb/F
Ie1j2i/aPc0yN1r+tp5r+V5k4TPFjbZ/af2m/aWdj7T5SZuraf5TPO16pp5r
0Wnpl6bnqU7L+jT+lvt/i//U36efS5t7tHPN0i+NM43/1Pp2nfbvOVN9tbhN
5eHyZ85tmh7avqCt3+I/pTOtP63z6t99/6HdN2jziubXVF+tPDx9Lo1zWr/l
nkbbL5Z5ku43zdlS3+r7rb9ep/lCmw+WOs0Xy/2KxjntF813y75u+UX7Xezu
x9c52H1p8Wz5QtNJy8Np89mSnyn9lnlOm2NbOU9xsPhF2++0c6HFYUo/rd7i
Y/Glpec0Pi39ln6fcmjxpPmbfi7Nxxbn9L3a0m/arzQHi05anaZ/Sk+6L8v6
6Ty31knz33qutfRb1m/5QpsPlry16nYOdn9p+87el+U9dOt8a92vaBzSPC3v
QbQc0ny3368sdct+ofGxc6Dp3/p7wZROu++0OXN9dPliyW0rJ7R9QcsPTf9W
PS39rftGqy9a/u2c0/q3zn/aOlN12n1ja73lY8t3e95a+yidk3SuaOtYzoWp
+tZ7CI1z2hcaZ8t8s+Tk5oG5r+392n2kvc/a67T7Dy1vrX7teu58c9Wn+NPq
W+fPaTpb62/1Zav+rXxo58XNydt8+Rmg9l4+
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`25000\\)\"", 
     StringForm["Iteration number ``", 25000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972707730713*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmbGqblcVhS/4AkLsRUjlG6Q6pX2q1CGp01va+C4KVmKTF7CMjYVW6VP4
CBJuGgsP2Yc5zvi+udaFQJgc1h7zG2PNtfb+f/PlN59//YsPHz589dN/P/7/
x3//efn+97/6y+++/9fLh//59/Prv/31H/70jz9/9/LlL7/47K9//+fLvz/5
9G/f/vGHl/9Xn3puS//TvqbWp9VbvrR8bNXteZvSaenXnsPT9t3WPKfXpz03
nTdLnmn6ab7cPL+Pj/Z90eJDyw/N97RfLX8teUv7kq6ftl8sOi15s3Cj+ZXm
SZt7W987TjvvLPcN+3NpdUuuLHxaeix8aHmj3StodVq/dp6W+pTvrTzYn5vm
3OJ271fMfWrnvJUD7Vyg8Ulzm1rf0u9p965WPi152PrcNGeLfkvdMh/sflk4
W/qycKDxTHOg9Wt5L7Y/l3bvTeu370eLfhq3NGeafhof+/sIjQ+Nc5r/Vm60
czOdB0v95rbbFy0Pt/56nfZ7gT1Xlvlg2e8Wna361n7t569d/9O+Lp/36avl
l+W5U3q2fqe1n5stnjQOLZ6Xz913hN/7tt4faHXaPYrGp1W37KPWc2l6Locd
c/U0Dpb3UwvPdJ12Llj6tddb9/Cn69/7pIsP7blbz9kpblN/n17n6fr2PND0
3Hq3bs8zrU7j03pvsv/OaOFD09laP+2jpW7v17JfaPzv+dut289xS91+Drb0
pM9rSx5o58jW9Vt5SNe39nta/lvc0j5urdt9vL+LMeu0e6PFF1pfdm7p51r0
W/aFZf3T5hKNf8svGs9WnTYftvpof09scdhan+LW8jGdhzQH2v35fn/e8f5i
r9Pmm+U9It0X7fvAFJ+WLy0fW3rs85M2f+xziVa38KftO5qepzpbebPnpKWT
9tyt/NO5faozvT6NT+u7RFpni4Nln9L4p3XSvr/RckLTM+WLPbe09e05bPmb
9tHSr2Uepvud+vuWL3bfLfmx1G9+3ud3h633K/u+s+hM97uVw2l9nVancbb4
mOaT9sVep+0jWn5o3x+2zp+Wfho3+/3cvn8tHGj5sdTTvre4PdXT4mCv3/11
c0jI22k6Lbm17EeannT9NF+m1n+6TsvfFs+Wzq18tu6jm7euflq/tPdZGk+7
LxbOFm5TObFznuqLpr9Vp/GxzxOaHrtfdj0WX9LPTftF42zxa2vd8p5rue9Z
8mnReVqddq9rfTemcaPl5NY//qPtC/t3rZZfrefS5lJ6fQsHe/5PO3/tdTs3
2veKlk5L3T6H7fUpbjc/O85xWj5p+X/K7TS/0v3S+Fv0W3y08LTULfOQNse2
zsk0/616aH21fh9srWPJ29a5YdFJ83crZ8v7jp3zFH/LHKPtx7RfW8+7tM6t
/drrl9vbONi5Wc4ROzeaX631p/pN67e8F9D6bemkcW6tQ/NlSr89D5Z7Am0/
0nykcW7lpFW3+ELLOY2/ZQ7bfbFwsHC2+GLXSeNDy0NrfdpzLXosddo5QptL
Lf7Xx+55QZtXrRzS7v9T+k87H1vcaP1u5Xn77fp+OZ/Jx16f4knLA61u348W
/TQ9aZ60OdC659vzMMXBch+g/Y5g55mu23la9Nh9p+m07EeLfpqeFmdL3cLt
5mS3vxbfW3Xa7w5b61t9b+Wh1VeLQ7pf2n7ZWm/lsOX7zVs3PxadlpxPrU/z
i5aH1vqtfNL4WOq0eWXfX1N92X1M62/pSfO3129+ZnXa3y8sfLbmrVWnfZ+h
9Us71+z7y67Hkp90DtPr2+tb+bT6snCz+27XT5vDND20fu37fWtfT/VM9TXF
Ia1/qn7nM/N7iOU7zGm+0/yy7N+p9dN6aD62fLHkv+ULba5O1Wn3xvRzW33R
5rPFL9rcSPtl4dk6Z6f4Wzin9bTWt/C371OaHlp9Kp/pumV/pfuy78etc8Zy
X2rV7/3qbRwseuz7jtYvzXfa/k3nOb0+bb/Q7let5976mfcu2hxO82/528pP
2seWLy2/pvTQuLU42+ckbX0aZwu3dJ3G2e5vi3MrP6283Tx33+tp9dP2191H
zLolD628We5XrXnbmue0fUTLG43nVh8tfbXykM4tLc80nfZ7uH0/pvmk+23x
3NqXRc9pdct+bN3PLZzTfrWea7+H0LjR+qXpp80N2jyx6KT5ZcmVvT6VB0v+
ac9tnQvpfi11Sx4s/l79O+ot/i2/LHq23pdoOqd8n8qVPQ+tfu3z7dZfr9Pm
aqsvmn4LH9pzLfOTdu638mZ5Ls1fi35LvcUznf9WfqbWt+uk5dzCeapumbct
DunnprmdNn9Oq1vO2dPu+Rb+Fn/t5zttDm/1Mf09hJbDKZ3pdSz5pHFu8Un7
SKvTONjnp2W+pfXYn0ubJzTf0zot95ypdWjzilZv+WvxJb1/p9ah9UWbny3O
W/m0uKX1bOWZ1kPj1qrT8m+p0+5FNL8s9yUanxZ/mr/pOm3fWb6f2PcLbV+k
+djrU3zsdXs+0zotdRqHqbzRONO+v6X/nlbfuo9o3Cx+Wep2bk91pvNsqVve
g1p6aHMprf/OW+Yca/Gc8j3dV3odS56n9KfXofnY0rk1n1P8W3XavrCvQ+N2
Wv4t/dr1PF0n7Xurr631NGea/lYOWzzT+m/94z/avjjt+2SrL/t+pOXHwt+S
N7vOtF8W/jTf03XL+5GFM83fln7LHLD7aNkXdg60e47lua06bZ6cpj/dV1rn
1r4s+aHN7Zb+lp6t82drfes+pdVpvqf9ot1Ln65j4WM5Fyx6LPpb8znNoVWn
cablwd7v5cy8F9n5t/LZWofGOa3/3gdm+W+d/7R+W/mc4k/zkcaTxofGs1Wn
cbb7RevX8tz0OmkfLblK60zrv/Xd70eWeouPhXMrJ2lftvKn+Zv+ewtne/6n
fKStb9FpWd/yPpLWb9HZyttUvXWO2DlY6jS/LM+l3ccsHFo603qm9NN0Wvql
nftb7yf29af0TOU27XtL59a6hb/lHL/1j/9o3+1vTlx1i1+WfNLuOfb7jP25
NJ5pPvdceB9uU+vT+qL1S5vbp/2OYKmfNvdo+i35p81ne7/2/WW/R9nPRwv/
rd+3aX7R7pNpblP5TNft+27quS3+Fv2n+UWbz/b1t87PFh/afcPCh5Zbi06a
7y39NA60uUHzsdVva/00H5pfU5xb61vmQItzWg+ND20/tjjT+J/WVys/lufS
vo/R7g+0+lS/6Zy07p923y06aXxavk/pmdKZ1kPr1163cKDlpJU3mv50v1vz
bPfX/t3D4uPWnFje69Pr2/1N1+3va+n1b95mudH6snBo7cfW+uk6bQ7ce/Lr
HGh6aHVaX3a/aHpa5witX5q/NG7p51p8t/Bv5cei89ZdOdyaB1pfp/G3v5el
/bL4m+6XVrfME5qPdz7P1i1z0lJP+2LJA61u4TClh5aHdG7T/ba4bc2Vxcep
59r3kT23p/mS5mbPFW0+XG5v66vFp9Xvaee7JecWzrT80/LQ6utpv3bOFl9o
fU3NpXS/LV9a61vOEXs+0/3S9nuLw2nrtzjT5qcl/+l5O6XH7mNLT4s/7T2R
lqt0XxY+rTqND833m7dZv2j6LfWbz/fhcJp+y/t1S8+Uj2k9af203Nrrltye
Vt+ak/vdrPv+buGW5rNVTysPtPuY3ccpDrTvXWk+Lf40DrTn0uppDlN8aHrs
dRqHVg7TOWnpoXE4LZ9bc3717OjXnnPL/ElzoPnS8svi770v3XsjuV/7PY3G
8ymfrf62dLbqtPPCkrfT/D2tTjtfaHzSPC3c7Pqn+qL5buFM83dqHcv6WznT
vidv3ad2nS3+tPNlyl8LT1oeWn2l9U/1NbV+i7Odv0V/mkOr3zSHKT63vjuH
l+fbnkvjP6XHwt+SQ9p7gb2ezhUtD3aeW887e04sPtJy3qrT8vl0nann0vq1
+Jvmb5+TLZ2W526t27nR9otlftK4WfjY9Vj8SnOe+ntL3Z5/C5/0Pp36+zSH
dL9T+p+u3+qrpYeWK9r5aK+nc2XZj7T8pDm0+rq+d79X0/i3+rKfg1Pr0/S3
+pqq0+bkaXruHH6bnqnnpus0zqfpTK/T4kybkzTO6TrNL4u/W+9XFh/tz6Xl
n8Z5Sk+az1OdrXW2ck7rv3OG+R6Xzkk6n2n9dn/t9yvauZmuW+aehRutnvZ9
itsUZ5q/rfxszW3LR1q/Fp23/nqdxt+SW1pf6edazospbnaeFj6W/Wjx99Zd
fln2l+UcpN0b7fM5vb4lV1ufa8+nZe6l+aQ509ZP67HPMXtf9rolz2mdNA5P
12n5Qsvnabl6yoGmx16n+T7lC01nq27Pydb8W76/WTikn0vjQONPyy1tv9Pq
NJ72/GzNG41zWn+LQ9rHtF+0e5plbrT8bT3X8r3IwmeKG23/0vpN+0s7H2nz
kzZX0/yneNr1TD3XotPSL03PU52W9Wn8Lff/Fv+pv08/lzb3aOeapV8a51bd
on/reWGZMy1uU3m4/Jlzm6aHti9o67f4T+lM60/rTPd1mk47B1q91W/Lr6m+
Wnl4+lwa57R+yz2Ntl8s8yTdb5qzpb7V91t/vU7zhTYfLHWaL5b7FY1z2i+a
75Z93fKL9rvY3Y+vc7D70uLZ8oWmk5aHrfN5677Yer+i+bWV8xQHi1+0/X7n
3qx+Wr3Fx+JLS89pfFr6Lf0+5dDiSfM3/Vyajy3O6Xu1pd+0X2kOFp233n1v
pem0vL+nz6m0Tsuc3Krfsn7LF9p8sOStVbdzsPtL23f2vizvoVvnW+t+ReOQ
5rm13uK21V87nzTnli80zncOuL6v0jhP6bT7Tpsz10eXL5bctnJC2xe0/ND0
b9XT0t+6b7T6ouXfzjmtf+v8p60zVafdN7bWWz62fLfnrbWP0jlJ54q2juVc
mKpvvYfQOKd9oXG2zDdLTix+bc0JjbNdP+39kZarVp12/6HlrdWvXc+db676
FH9afSvn03S21t/qy1b9W/nQ5tjNydt8+S8hSDjW
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`30000\\)\"", 
     StringForm["Iteration number ``", 30000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972712585142*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmTGOqEcRhJ/EBZBMjpAccQNHG5I7cmzZsXNCEu4CEhEi8QUITUIAkXMH
HAFZzwkBK/+rrq3v65mVnvRUWs1UV1X3zPz7my+/+fzrX3z48OGrn/79+P+P
P/95+f73v/rL777/18uH//n5+fhvf/2HP/3jz9+9fPnLLz7769//+fLvTz79
27d//OHl/+FT+7b4P61ran0a3vKl5WMLt+dtiqelXnsOT+u7rXlOr0/bN503
S55p/Gm+3Dy/j4/2vmjpQ8sPzfe0Xy1/LXlL+5LGT+uXNE9aP1p0a/FJ79vS
04Jb/E37Zc/JFP+075Z9abglVxZ9Wnws+tDyRrtX0HBavXY9LfiU76082PdN
69zS7d6vmH1q13mrDrRzgaZPWrep9S31nnbvauXTkoet+6Z1tvC34Jb5YPfL
orOlLosOND3TOtDqtbyL7fvS7r1p/vZ+tPCn6ZbWmcafpo/9PULTh6ZzWn+7
Dum6Wr5sxS25pc1VGs+Lvw9O+3uBPVeW+WDpdwvPFr5VB/v5a+d//WXWNcWn
5W963yk+W7/TnjY30uvY8a05oelj15P2976t9wcaTrtH0fRp4ZZ7bHp9Ox/a
XLLzT+On6WB5n1r0TOO0OWCp9zTcfn+g1btVH9q+W8/ZKd2mfj+9ztP17Xmg
8bl4F7fnmYbT9LG/06f40Nax6Eb7rtXy0YLb67X0C03/e/52cfs5bsFpfU3b
t3Vep31v6UO7d1nWb+UhjW+t97T8t3RL+7gVt/vY+k4+Ve/WPNO+n1h8odVl
1y29r4W/pS8s6582l+z41XkWp82HrT7a34ktHbbiU7q1fEzngaYDbV5t7XeL
/ltx2nyzvCPSddnPL5ovLR9bfCy+t/Sn6UPTP41b9Kf1HY3PU56tvNlz0uJJ
23er/uncPuWZXp+mj/27BE0HS59uxWm6WXJC4/OU59Tvt3DafHu6jiWHLX/T
PlrqtczDdL1Tv9/yxe67JT8W/OZn9lyj6Tz1+6260riFZ7rerTqcVtdpOE1n
i49pfdK+2HFaH9HyQ/v+sHX+tPjTdLPfz+39a9GBlh8Lnva9pdtTPi0d7Pjt
r5tDQt5O42nJraUfaXzS+Gm+TK3/dJ2Wvy09Wzy36rO1j27euvxp9dLeszQ9
7b5YdLboNpUTu85TddH4t3CaPvZ5QuNj98vOx+JLa1+7L63ctuq14JZ3ruW+
Z8mnhedpOO1e1/puTNONlpOLf/yh9YX9u1bLr9a+tLmUXt+igz3/tPlj1zON
23Vr9S+NpwW3z+Gt+FPdbn52nDu0HFrOfct93qKnRX8Lf4uPFj0tuGUe0ubY
1jmZ1n8rH1pdNB1a3/HsvtB8pPli93erzrQ5Y/n7bEt/yxyj9WPar63nXZrn
1nrt+NXtbTrYdbOcI3bdaH611qf5YnkX0PqU5gvNR8ucpOls4UnjY9GZ9t63
57mVkxZu8YWWc5r+ljls98Wig0Vniy92njR9aHlorU/b18LHgtPOEdpcaul/
fbzfx94zn63zosX/tPOxpRut3q163nq7vl+dz9THjk/pScsDDbf3o4U/jU9a
T9ocaN3z7XmY0uG0+wAt53Y9n+pj0dPCx+47jaelHy38aXxaOtNwu243J8x7
tYW/Haf93WErvtX3Vh5oeqZ1sPC8uCu3tHfoxWfzY+FpyfnU+jS/aHlord/K
J00fC06bV/b+mqrL7mOaf4tPWn87fvMzy9P+vrDoszVvLTydQ3u9tHPN3l92
Ppb8pHOYXt+Ob9WnVZdFN7vvdv60OUzjQ6vX3u9b63rKZ6quKR3S/KfwO5+Z
30Ms32FO853ml6V/aTl5ui+NZ9oXS/5p/UU736fyM7WOJf/pumjz2eIXbW6k
/bLo2Tpnp/S36Jzm01rfor+9T2l8aPhUPtO4pb/Sddn7ceucsdyXWvi9X71N
Bwsfe9/R6qX5TuvfdJ7T69P6hXa/au178TPvXafdr+z+0s7Tli9pv9J8aLq1
dLb0hWV9ms4W3dI4TWe7vy2dW/lp5e3mufuup+Gn9dftIyZuyUMrb5b7VWve
tuY5rY9oeaPpudVHS12tPKRzS8szjaflHr61H6f0OU3PrXVZ+JyGW/qxdT+3
6Jz2q7Wv5fy16Earl8afNjdo8+Ty350rOz6VhylfWnlu7ds6F9L1WnBLHiz+
Xv478Jb+Lb8sfLbel2g8p3yfypU9D6167fPt4q/jtLnaqovG36IPbV/L/KSd
+628pfdN87fMGVpuaXhLT1rOp+qdWt/Ok5Zzi85TuGXetnRI75vW7bT5cxpu
OWdPu+db9Lf4az/fLfON5gvtewgth1M80+tY8knTuaVP2seLv47b56dlvqX5
2PelzROa71P80/XS9rXMKxre8tfiS6tP7XVZ5mda5636tHRL8zlNz9a7citO
y78Fp92LaH5Z7ks0fVr60/xN47S+s3w/sfcLrS/S+tjxKX3suD2faZ4WnKbD
VN5oOtO+v532bt3aRzTdLH5ZcLtuT3mm82zBaefFFH/7vZHWpy2/TsNpek75
nq4rvY4lz1P8Wzq0fJzSx+IvjScNb/UXza/bdzvyb6nXzufpOmnfW3VtxdM6
0/i3ctjSM83/4h9/aH1Bu19Z9G+t39KTlh+L/pa82Xmm/bLoT/M9jVveRxad
af62+FvmgN1HS1/YdaDdcyz7tnDaPDmNf6uuNP90XRaetPw/XYemM43P1vmz
Fbf0qR2n+U7zK83n6ToWfSzngoWPhX9rPqd1aOE0nWl5sNd7dWbei+z6t/LZ
Woemc5r/vQ/M6r91/tPqbeVzSn+ajzQ9afrQ9GzhNJ3tftHqteybXiftoyVX
aZ5p/hff/T6y4C19LDq3cpL2Zav+NH/Tv2/R2Z7/KR9p61twi86W90iav4Vn
K29TeOscsetgwWl+Wfal8dmqA02fNH8aT0u9tHN/6/3Esn5az6l9ab5f/HXc
ovPNiQunfbe/OXHhFr8s+aTdc2jf8ab0tOxL0zOtzz0X3ke3qfVpddHqpc3t
0/6OYMFPm3s0/pb80+azvV57f9nvUfbz0aJ/69yn9S8NT/dLWrepfKZxe99N
7dvS38L/NL9o89m+/tb52dKHdt+w6EPLrYUnzfcWf5oOtLlB87FVb2v9tD40
v6Z0bq1vmQMtndN8aPrQ+rGlM03/0+pq5ceyL+37GO3+QMOn6k3npHX/tPtu
4UnTp+X7FJ8pnmk+tHrtuEUHWk5aeaPxT9e7Nc92f+3fPSw+bs2J5V2fXt/u
bxq3v9fS69+8zepGq8uiQ6sfW+uncdocuPfk13Wg8aHhtLrsftH4tM4RWr00
f2m6pfe1+G7Rv5UfC8+Lu3K4NQ+0uk7T3/4uS/tl8TddLw23zBOaj3c+z+KW
OWnB075Y8kDDLTpM8aHlIZ3bdL0t3bbmaitOm2OWuuz3Cpovad3suaLdr65u
b6urpU+rXktdp+lj0dmek5v/M78D0PS31LXVL9r3N8s50lqf5uPWvqD5blm/
pTNtflryn563U3zsPrb4tPSnvRNpuUrXZdGnhdP0oflOw+35ofG34DeH76PD
afwt7+sWnykf03zS/Gm5teOW3J6Gb83J/W7Wfb9bdEvrs5VPKw+0+5jdxykd
7rn2PjhNB9q+NDytw5Q+ND52nKZDK4fpnLT40HQ4LZ9bc97a164nDbfn3DJ/
0jrQfGn5ZfH33pfuvZFcL61Pt+bH4m96ndb6LZ3TOtB0s/CcqovGk4bTvgPQ
9EnradHNzn+qLprvFp1p/k6tY1l/q86078lb+9TOs6U/7XyZ8teiJy0PrbrS
/Kfqmlq/pbNdfwv/tA6tetM6TOlz8ZvDk/W09OMUH4v+lhzS3gV2PJ0rWh7s
etLOO4s+ljlD84uWt5YOrfVp37taelr40M4X2jxM87TsuxW360brF8v8pOlm
0YfGk7Y+Dbf4fpoONP1pc6917ljqneL/dP1WXS0+tFzRzkc7ns6VpR9p+Unr
0Krr+t79Xk3Tv1WX/RycWp/Gv1XXFE6bk6fxuXP4bXym9k3jNJ1P45lep6Uz
bU7SdE7jNL8s/m69X1l8tO9Lyz9N5yk+aX1a+rf2tehsf1/Q5gztHZfOSTqf
af52f+33K9q5mcYtc8+imwWn6TmlM83fVn5a+9LySavLMm/tc8OC0/S35JZW
V3pfy3kxpdtWPWn6WPqR5u/Fd/hl6S/LOWifh3Y+W3O1dV97Pi1zj4Zv7ccp
PpY5duti4pY8p3nSdHi6TssXWj5Py9VTHWh87DjN9ylfaDxbuD0nW/Nv+f5m
0SG9L00Hmv603NL6nYbT9LTnZ2veaDqn+bd0SPuY9ot2T7PMjZa/rX0vn/fh
08o5Lf80/Wl6Wu5dllxN6T+lp53P1L4WnpZ6aXye8rSsT9Pfcv9v6T/1++l9
aXOPdq5Z6qXpfPHX8a3nhWXOtHSbysPVnzm3aXxofUFbv6X/FM80/zTPdF2n
8bTrQMNb9bb8mqrLkgeazk91a/lo55nmY9fB3i9pfKvvF38dp/lCmw8WnObL
vV91cdr9397XLb9ofxe7/fi6DnZfWnq2fKHxPG0eWu4V6Tyk9Wzpv9WvrTpP
6WDxi9bvtHtCS4cp/jS8pY/Flxaf0/Rp8bfU+1SHlp40f9P70nxs6Zy+V1vq
TfuV1sHC8+LddyuNp+X9nj6n0jwtc3Irf8v6LV9o88GSN4u/W+u186fVa5kz
U/xb69Py0Lpf0XRI67kVb+m21V+7PmmdW77QdL5zwPV9labzFE+777Q5c310
+WLJbSsntL6g5YfGfyufFv/WfaNVFy3/dp1butnnP22dll8Xd/Vdy3d73lp9
lM5JOle0dSznwhRuv4fY+2XKF5rOlvlmyYnFr605oels50/7fkjLVQun3X9o
eWvVa+dj8eXiu+feVp1P49laf6svW/lv1Yc2x25O3ubLfwFievpv
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`35000\\)\"", 
     StringForm["Iteration number ``", 35000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.6349727174299707`*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmbGq70cVhS/4AkLsRUjlG6Q6pX2q1CGp01va+C4KVmKTF7CMjYVW6VP4
CBJuGgsP+R32Ouv79syFQNhcZtb+1po98/vf33z5zedf/+LDhw9f/fTfj///
8c9/Xr7//a/+8rvv//Xy4X/+/Pz6b3/9hz/948/fvXz5yy8+++vf//ny708+
/du3f/zh5f/Vp/Zt6X/a19T6tHrLl5aPrbo9b1M6Lf3ac3jaudua5/T6tH3T
ebPkmaaf5svN8/v4aD8XLT60/NB8T/vV8teSt7Qv6fpp5yWtk3YeLdxaetL7
tnha6hZ/037ZczKlP+27ZV9a3ZIrC5+WHgsfWt5o7wpandavnaelPuV7Kw/2
fdOcW9zu+4p5Tu2ct3Kg3Qs0PmluU+tb+j3t3dXKpyUPW/dNc7bot9Qt88Hu
l4WzpS8LBxrPNAdav5bvYotfT/XT/KXpt/vV0m+pX56zfOzfIzQ+NM5p/nYO
6b5avtz66/Wt592i89aZ9TvfZvnQ7hEa/zuXzuRjv3/t+q+/zL6m9LT8Te87
pYd2z9rPRdrHNE8ahxbPy+eeO8K/9219P9DqtHcUjU+rbnnHpte366HNJbv+
dP00DpbvUwvPdN0yB2j9nla3vx9o/W7lQ9vXMpdodUu/W/NA03Pr3bo9z7Q6
jY/9O31KD20dCzfa71otHy11e7+W80Ljf+/fbt1+j1vqtHNN27d1X6d9b/Gh
vbss67fykK5v7fe0/Le4pX3cWrf7SMsD7buJxqHF0+ILrS87t/S+Fv2Wc2FZ
/7S5ZK9fzrN12nzY6qP9O7HFYWt9ilvLx1ad9i61zM80n7ROGv+tddp8s3xH
pPuy3180X1o+tvRYfG/xp/Gh8U/XLfxp546m56nOVt7sOWnppO27lX86t091
pten8ZnKIU1ni4PlnG6t07hZckLT81Tn1N9v1Wnz7ek6lhy2/E37aOnXMg/T
/U79/ZYvdt8t+bHUb35m7zUa56m/3+orXbfoTPe7lcNpfZ1Wp3G2+Jjmk/bF
XqedI1p+aL8/bJ0/Lf00bvb3uf38WjjQ8mOpp31vcXuqp8XBXr/n6+aQkLfT
dFpyazmPND3p+mm+TK3/dJ2Wvy2eLZ1b+dDeV2lup+WtpZ/WL+17lsbT7ouF
s4XbVE7snKf6oulv1Wl87POEpsful12PxZfWvqf5QvNra93ynWt571nyadF5
Wp32rmv9bkzjRsvJrX/8QzsX9t+1Wn619qXNpfT6Fg72/NPmj51num7n1jq/
NJ2Wun0Ob60/5Xbzs+PeoeXQcu9b3vMWnhb+Fv0WHy08LXXLPKTNsa1zMs1/
qx5aXzQOrd/x7L7QfKT5Yvd3K2fanLH8+2yLv2WO0c5j2q+t911a59Z+7fXL
7W0c7Nws94idG82v1vo0XyzfBbS+aL7QfGzpsfdl0UnTY+FM+96357mVk1bd
4gst5zT+ljls98XCwcLZ4otdJ40PLQ+t9Wn7WvRY6rR7hDaXWvyvj937gjav
Wjmkvf+n9J92P7a40frdyvP22/X9cj6Tj70+xZOWB1rdfh4t+ml60jxpc6D1
zrfnYYrDae8BWs7tPJ/ysfC06LH7TtNpOY8W/TQ9Lc60up3bzQnzXW3Rb6/T
/t1ha32r76080HimOVh03rort7Tv0FufzY9FpyXnU+vT/KLlobV+K580PpY6
bV7Zz9dUX3Yf0/pbetL87fWbn1md9u8LC5+teWvV0zm090u71+zny67Hkp90
DtPr2+tb+bT6snCz+27XT5vDND20fu3nfWtfT/VM9TXFIa1/qn7nM/P3EMvv
MKf5TvPLcn5pObHkueWLJf8tX2hzdapOO7/pfVt92eeShWfre6G1vmXuWb6b
7Dxp9dN8oemn6aHV0/Mknf/0+rR71n4et84Zy3upVb/vq7dxsOixnztavzTf
aec3nef0+rTzQntftfa99TPfXae9r+z+0u7Tli9pv9J6aNxanC3nwrI+jbOF
W7pO42z3t8W5lZ9W3m6eu9/1tPpp5+ueI2bdngcLN8v6lr9/Wn3q3LU4b/XX
0lcrD+nc0vJM02l5h289j1N8TuO5tS+LntPqlvNof2+nOaf9Sq+/9R3S8ssy
T2j6aXODNk+u/t25sten8jDlSyvPrX1b90K6X0vdkgeLv1f/jnqLf8svi56t
7yWazinfp3Jlz0OrX/t8u/XX67S52uqLpt/Ch7avZX7S7v1W3tL7pvVb5gwt
t7R6iyct51P9Tq1P05nWszX/ac40nTQ+NF+muNHejTTf7XXLPUvL7Z1v9/18
37f7fEzfa7QcTulMr2PJZ3rfqRy2dN76+9Tt89My39J60vu2+rq+z+pP90vb
1zKvaPWWvxZfWufU3pdlfqY5b+XT4pbWQ+PZ4ryVW7p+OTO52c+F5b1E49Pi
T/M3XaedO8vvNvbzQjsXaT72+hQfe92ez7ROS53GYSpvNM40f9N/n1bfeo5o
3Cx+Wep2bk91pvNsqbfuu7R++7uRdk5bfp1Wp/Gc8p3Wl4V/S3+Lw9T66Ry2
8mDJ5xT/Vr11vmh+3XO3I/+Wfu16nq6T9r3V19Z6mjNNfyuHLZ5p/bf+8Q/t
XNDeVxb+rfVbPGn5sfC35M2uM+2XhT/N93Td8n1k4Uzz16KflgeLj5ZzYeFA
uzft+948nKm/1Vdaf7ovi05a/tPc7Ppp3zsWHy11yzm112m+0/xK63m6joWP
5V6w6LHot8znNLdWvzTOFv60OXk576hbONvXoXFO67/vga5+y/yn9dvyd4o/
zUcaTxofGs9WncbZ7hetX8u+6XXSPlpyldaZ1n/rTH9Py0OLj4VzKydpX7by
p/mb/vsWzvb8T/lIW99St3C2fI+k9Vt0tvI2VW/dI3YOljrNL8u+ND1bOdD4
pPXTdJ7W732f7Fg/zTOdQwu30+oWzjcnrjrtd/ubE1fd4pcln7R3Du13vCme
ln1pPNN87r3wPtym1qf1ReuXNrdP+3cES/20uUfTb8k/bT7b+7WfL/s7yn4/
Wvi37n3a+aXV0+clzW0qn+m6/dxN7dvib9F/ml+0+Wxff+v8bPGhvTcsfGi5
teik+d7ST+NAmxs0H1v9ttZP86H5NcW5tb5lDrQ4p/XQ+NDOY4szjf9pfdHy
NlW39Gvxl3aOaP7S3oeW+bP1fUXj0/J9Ss+UzrQeWr/2uoUDLSetvNH0p/vd
mme7v/bfPSw+bs2J5bs+vb7d33Td/r2WXv/mbZYbrS8Lh9Z5bK2frtPmwH0n
v86BpodWp/Vl94ump3WP0Pql+Uvjlt7X4ruFfys/Fp237srh1jzQ+jqNv/27
LO2Xxd90v7S6ZZ7QfLzzebZumZOWetoXSx5odQuHKT2WPKTzPNUvjZs9V1vr
W8+LPben+ZLmZs8V7X11ub2trxafVr+Wvk7jY+Fsz8nN/5m/A9D4W/ra6hft
9zfLPdJan+bj1nNB892yfoszbX5a8p+et1N67D629LT4074TablK92Xh06rT
+NB8p9Xt+aHpt9RvDt+Hw2n6Ld/XLT1TPqb1pPXTcmuvW3J7Wn1rTu7vZt3v
dwu3NJ+telp5oL3H7D5Ocbj32vvUaRxo+9LqaQ5TfGh67HUah1YO0zlp6aFx
OC2fW3Pe2tfOk1a359wyf9IcaL60/LL4e99L991I7pd2Trfmx+Jvep3W+i3O
aQ40bhadU33RdNLqtN8BaHzSPC3c7Pqn+qL5buFM83dqHcv6WznTfk/eek7t
Olv8affLlL8WnrQ8tPpK65/qa2r9Fmc7f4v+NIdWv2kOU3xu/ebwZJ6W8zil
x8LfkkPad4G9ns45LQ8WnhYfLfPTMmcs3NI6aRxa69N+72rxtOih3S+0eZjW
adl3a93OjXZeLPOTxs3Ch6aTtj6tbvH9NA40/rS517p3LP1O6X+6fquvlh5a
rmj3o72ezpXlPNLyk+bQ6uv63v29msa/1ddp9yBNf3rfp+tP1bf6ZdFz5/Db
9Eztm67TOJ+mM71OizNtTtI4p+s0vyz+bn1fWXy070vLP43zlJ40nxb/1r4W
zvbvC9qcoX3HpXOSzmdav91f+/uKdm+m65a5Z+FmqdN4TnGm+bs1P5Z80vqy
zFv73LDUafwtuaX1ld7X8v6f4raVJ42P5TzS/L31HX7R9NDO3dT6T9eZqtPm
Ns1fS6627mvPp2Xu0epbz+OUHsscu30x65Y8p3XSODxdp+ULLZ+n5eopB5oe
e53m+5QvNJ2tuj0nW/Nv+b3LwiG9L40DjT8tt7TzTqvTeFryc1re7Oe09e8d
lpzQ5j/tfqfleYpDa9+r53300O7HNE8LfxpP+7urlZ80/ymedj1T+1p0Wvql
6Xmq07J+mn9rX/ucnzq/rX1pc492r1n6pXG+9dfr9vuClivLfTeVh8ufObdp
emjngrZ+i/+UzrT+tM50X1dnt057b9DmlSUPlu8UO+en3Fo+2nWm9dg52M9L
ur7V91t31WnzwVK3+HXfV11fWv7az3XLL9q/i93z+DoHuy8tni1faDpPm4e0
eWLJz1OeFv5TOi9n1/lt+UU777R3QovDlH5avcXH4ktLz2l8WvppfU1xaPFM
97X1PrLPgfS72tJv2q80B4vOW+9+t9J0Wr7f0/dUWqdlTm7Vb1m/5QttPljy
ZvF3a792/bR+LXNmSn9rfVoeWu8rGod0nXa+aPxpvtN40vi0+Fv8avGxc6Dp
b70fLHPP7jttzlwfXb5YctvKCe1c0PJD079VT0t/673R6ouWfzvnFjf7/Ket
0/Lr1l3nruW7PW+tc5TOSTpXND2We6HFZ2r9+7v0rC80zpb5ZsmJxa+tOaFx
tuun/X5Iy1WrTnv/0PLW6teux+LLre+ee1s5n6aztf5WX7bq38qHNsduTt7m
y38BEkS12w==
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`40000\\)\"", 
     StringForm["Iteration number ``", 40000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972722313587*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmTGuZkcRhUdiA5Ygtyw5YgdEL3RORDzCMTkhCXsBiQg5YQMOceLAjiYn
8BIsNCQEPHGf6sz5vup+kiWr9Kv71HdO1+1754v3f/jt17949+7d7//z37//
/+PfTy8f/virv3314YeXd//19//Xf/35n/7y3V//+fL+s9/95u/ffv/y4y+/
/OYff/7Xy/+qT+3b0v+0r6n1afWWLy0fW3V73qZ0Wvq15/C0c7c1z+n1afum
82bJM00/zZeb50/jo/1ctPjQ8kPzPe1Xy19L3tK+pOunnZe0ztZ5bNVp/tL2
bfG01C3+pv2y52RKf9p3y760uiVXFj4tPRY+tLzR7hW0Oq1fO09Lfcr3Vh7s
+6Y5t7jd+xXznNo5b+VAey7Q+KS5Ta1v6fe0e1crn5Y8bN03zdmi31K3zAe7
XxbOlr4sHGg80xxo/Vreiy1+PdVP85em3+5XS7+lfnnO8rG/j9D40Din+ds5
pPtq+XLrr9e3nneLzltn1u98m+VDe47Q+N+5dCYf+/PXrv/6y+xrSk/L3/S+
U3poz1n7uUj7mOZJ49Diefncc0f4976t9wdanXaPovFp1S332PT6dj20uWTX
n66fxsHyfmrhma7b50Cr39Pq9vsDrd+tfGj70uaPpW7pd2seaHpuvVu355lW
p/Gxv6dP6aGtY+FG+67V8tFSt/drOS80/vf5263bn+OWOu1c0/ZtPa/Tvrf4
0O5dlvVbeUjXt/Z7Wv5b3NI+bq3bfaTlgfbeROPQ4mnxhdaXnVt6X4t+y7mw
rH/aXLLXL+fZOm0+bPXR/p7Y4rC1PsWt5WOrTruXWuZnmk9aJ43/1jptvlne
I9J92Z9fNF9aPrb0WHxv8afxofFP1y38aeeOpuepzlbe7Dlp6aTtu5V/OrdP
dabXp/GZyiFNZ4uD5ZxurdO4WXJC0/NU59TvW3XafHu6jiWHLX/TPlr6tczD
dL9Tv2/5Yvfdkh9L/eZn9rlG4zz1+1Zf6bpFZ7rfrRxO6+u0Oo2zxcc0n7Qv
9jrtHNHyQ/v+sHX+tPTTuNHu5+l+Lfta3rMs+1rmpIXbUz0tDvb6PV83h4S8
nabTklvLeaTpSddP82Vq/afrtPxt8Wzp3MqHdr9Kczstby39tH5p77M0nnZf
LJwt3KZyYuc81RdNf6tO42OfJzQ9dr/seiy+tPY9zReaX1vrlvdcy33Pkk+L
ztPqtHtd67sxjRstJ7f+8Y92LuzftVp+tfalzaX0+hYO9vzT5o+dZ7pu59Y6
vzSdlrp9Dm+t03KyNT92nvZ6mttpfqX7pfG36Lf4aOFpqVvmIW2ObZ2Taf5b
9dD6onFofcez+0LzkeaL3d+tnGlzxvLvsy3+tDlmOY9pv7Y+79I6t/Zrr19u
b+Ng50ab51u52f2y5JzWF80Xy/2f1i+NM60v+9yz67Fwpr3v2/PcykmrbvGF
lnMaf8sctvti4WDhbPHFrpPGh5aH1vq0fS16LHXac4Q2l1r8r4/d5wVtXrVy
SLv/T+k/7fnY4kbrdyvP22/X98v5TD72+hRPWh5odft5tOin6UnztNTT3Ox5
sOTHzuHynOVM40mrT/G0+E7TaTmPFv00PS3OtLqd280J815t0W+v0/7dYWt9
q++tPNB4pjlYdN66K7e099Bbn82PRacl51Pr0/yi5cGet3T98nkbB/u9N32+
pvqy+5jW39KT5m+v3/zM6rS/X1j4bM1bq57Oob1f2nPNfr7seiz5Secwvb69
vpVPqy8LN7vvdv20OUzTQ+vXft639vVUz1RfUxzS+qfqdz4zv4dYvsOc5jvN
L8v5peXEkucpPbS+tp4v2vPdnp/0vq2+7HPJwpM2V9PrW+ae5b3JzpNWP80X
mn6aHlo9PU/S+U+vT3vO2s/j1jljuS+16vd+9TYOFj32c2fXb+n3qZ5WntPr
0/JGu1+19r31M+fnafcru7+052nLl7RfaT00bi3OlnNhWZ/G2cItXadxtvvb
4tzKTytvN8/d93pa/bTzdc8Rs27Pg4WbZX3L70+rT527Fuet/lr6auUhnVta
nmk6ac8Fmn5LTlq5avHc2pdFz2l1y3m0z+0057Rf6fW33kNaflnmCU0/bW7Q
5snVvztX9vpUHqZ8aeW5tW/ruZDu11K35MHi79W/o97i3/LLomfrfYmmc8r3
qVzZ89Dq1z7fbv31Om2utvqi6bfwoe1rmZ+0534rb+l9W33R5gwtt7R6iyct
z1P9Tq1P05nWszX/ac40nTQ+NF+muN1zsbtuec6eds+38G/tS6u3+krz3+pX
63sILYdTOtPrWPJJOxctPmkfb/31un1+WuZbWk9631Zf1/dZ/el+afta5hWt
3vLX4kvrnNr7sszPNOetfFrc0npoPFuct3JL1y9nJjf7ubDcl2h8Wvxp/qbr
tHNn+W5jPy+0c5HmY69P8bHX7flM67TUaRym8kbjTPM3/Xtafes5onGz+GWp
n8YtnWdLvfW8S+u33xtp57Tl12l1Gs8p32l9Wfi39Lc4TK2fzmErD5Z8TvFv
1Vvni+bXPXc78k/rl6ZnSufTdSx5aPlIq6c50/S3ctjimdZ/6x//aOeCdr+y
8G+t3+JJy4+FvyVvdp1pvyz8ab6n65b3Iwtnmr8W/bQ8WHy0nAsLB9pz077v
zcOZ+lt9pfWn+7LopOU/zc2un/a+Y/HRUrecU3ud5jvNr7Sep+tY+FieCxY9
Fv2W+Zzm1uqXxtnCnzYnL+cddQvn09ZJc576fXqdqX1pvqT1W+Y/rV9a3e5j
i0+a81aerTqNs90vWr80Xyz3Olre7rm4dbK/p+WhxcfCuZWTtC9b+dP8Tf/e
wtme/ykfaetb6hYO9veIrXPekp8pDqdxs+h8qp/ml2Vfmp6tHGh80vppOk/r
995Pdqyf5pnOoYXbrX/8o3G+OXHVad/tb05cdYtflnzS7jm073hTPNP7pvWf
1pe9Xws3y3uQpV/a3E5zm8rDafXT5iFNvyX/tPls79d+vmjvL1P6W/3S6q2c
tPxK90Wrp89LmttUPtN1+7mb2rfF36L/NL9o89m+/tb52eJDu29Y+NBya9FJ
872ln8aBNjdoPrb6ba2f5kPza4pza33LHGhxTuuh8aGdxxZnGv/T+qLlbapu
6dfiL+0c0fyl3Q8t82fr/YrGp+X7lJ4pnWk9tH7tdQsHWk5aeaPpT/e7Nc92
f+3fPSw+bs2J5b0+vb7d33Sdxpm2/s3bLDdaXxYOre8nrfXTddocuPfk1znQ
9NDqtL7sftH0tJ4jtH5p/tK4pfVYfLfzT+u36Lx1Vw635oHW12n87fW0XxZ/
pzicVrf7mM4tjefW/LR40uppXyx5oNUtHKb02POQzvnTfi3cpnLV4m+vn3Yu
aLml6Wz5kuZmzxXtfnW5va2vFp9Wv5a+TuNj4WzPyc3/md8BaPwtfW31i/b9
zfIcaa1P83HruaD5blm/xZk2P7fm/ymH1jpT+7b8ou1L42k5R7TvLTQ+rTqN
D813Wt2eH5p+S/3m8NNwOE2/5f26pWfKx7SetH5abu11S25Pq9+czOaHpjPd
79YcTvHZqqeVB9p9zO7jFIf7XPs0dRoH2r60eprDFB+aHnudxqGVw3ROWnpo
HE7L59act/a189xat+SkNX9O86Xll8Xfe1+690Zyv7RzujU/Fn/T67TWb3FO
c6Bxs+ic6oumk1anfQeg8UnztHCz65/qi+a7hTPN36l1LOtv5Uz7nrz1nNp1
tvjTni9T/lp40vLQ6iutf6qvqfVbnO38LfrTHFr9pjlM8Tmt3uLcylsrJxae
tJxY7i00Pvb3QdqctM9nSz4tPC0+WuanZc5YuKV10ji01qd972rxtOihPV9o
8zCt07Lv1rqdG+28WOYnjZuFD00nbX1a3eL7aRxo/Glzr/XcsfQ7pf/p+q2+
WnpouaI9H+31dK4s55GWnzSHVl/X9+73ahr/Vl+nPQdp+tP7Pl1/qr7VL4ue
O4ffpmdq33Sdxvk0nel1Wpxpc5LGOV2n+WXxd+v9yuKjfV9a/mmcp/Sk+bT4
t/a1cLa/X9DmDO09Lp2TdD7T+u3+2u9XtOdmum6ZexZuljqN5xRnmr9b82PJ
J60vy7y1zw1LncbfkltaX+l9Lff/KW5bebbqtH5pub31Hd8Z7Hpo525q/afr
TNVpc5vmryVXW/e159My92j1redxSo9ljt2+mHVLntM6aRyertPyhZbP03L1
lANNj71O833KF5rOFgd7Tm5f3e9dFg7pfWkcaPxpuaWdd1qdxtOSn9PyZj+n
lvdNmr+0erqvNB+av619r55Po4f2fEzztPCn8bTfu1r5SfOf4mnXM7WvRael
X5qepzot66f5t/a1z/mp89valzb3aM81S780zrf+et3+vKDl6rTn3eXPnNs0
PbRzQVu/xX9KZ1p/Wme6r6uzW6fdN2jzypIH2r1lK+en3Fo+2nWm9dg52M9L
ur7V91t31WnzwVK3+HXvV11fWv7az3XLL9q/i93z2PU37QuN2xQHi87T5iFt
nljy85Snhf+UzsvZdX5bftHOO+2e0OIwpZ9Wb/Gx+NLScxqfln5aX1McWjzT
fW19HtnnQPpebek37Veag0XnrXffW2k6Le/v6edUWqdlTm7Vb1m/5QttPljy
ZvF3a792/bR+LXNmSn9rfVoeWvcrGod0nXa+aPxpvtN40vi0+Fv8avGxc6Dp
b90fLHPP7jttzlwfXb5YctvKCe1c0PJD079VT0t/677R6ouWfzvnFjf7/Ket
0/Lr1l3nruW7PW+tc5TOSTpXND2W50KLz9T697v0bJ3G2TLfLDmx+LU1JzTO
dv2074e0XLXqtPsPLW+tfu16aL5M6dxab/E/zV9LXxadp/U7pXOr/q18aOfl
5uRtvvwMdWepYw==
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`45000\\)\"", 
     StringForm["Iteration number ``", 45000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.6349727271281147`*^9}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztmTGuZkcRhUdiA5Ygtyw5YgdEL3RORDzCMTkhCXsBiQg5YQMOceLAjiYn
8BIsNCQEPHGf6sz5vu4ayZJV+tV96jun6/a974v3f/jt17949+7d7//z37//
/+O/n14+/PFXf/vqww8v7/7r3/9f//Xnf/rLd3/958v7z373m79/+/3Lj7/8
8pt//PlfL/+rPrVvS//TvqbWp9VbvrR8bNXteZvSaenXnsPbzt2peU6vT9s3
nTdLnmn6ab5snj+Nj/Zz0eJDyw/N97RfLX8teUv7kq7fdl7SOlvnsVWn+Uvb
t8XTUrf4m/bLnpMp/WnfLfvS6pZcWfi09Fj4WPJGu89YuKX7tfO01Kd8b+XB
vm+ac4vb3q+Y59TO+VQOtOcCjY+Fm71fC2eaL6265Z6z96uufkvdMh/sflk4
W/qycKDxTHOg9Wt5L7b49VQ/zV+afrtfLf2W+vKc5WN/H6HxoXFO87dzSPfV
8mXrr9dPPe8WnVtn1ne+zfLZ58in4Unri8aHxs3+/LXrX3+ZfU3pafmb3ndK
D+3vofZzkfYxzZPGocVz+ey5I/y979T7A61Ou0fR+LTqlntsen27HtpcsutP
12/jYHk/tfBM1+1zoNXvbXX7/YHW76l8aPvS5o+lbun31DzQ9Gy9W7fnmVan
8bG/p0/poa1j4Ub7rtXy0VK392s5LzT++/zt1u3PcUuddq5p+7ae12nfW3xo
9y7L+q08pOun9ntb/lvc0j6eWrf7SMsD7b2JxqHF0+ILrS87t/S+Fv2Wc2FZ
/7a5ZK8v59k6bT6c6qP9PbHF4dT6FLeWj6067V5qmZ9pPmmdNP6n1mnzzfIe
ke7L/vyi+dLysaXH4nuLP40PjX+6buFPO3c0PU91tvJmz0lLJ23fU/mnc/tU
Z3p9Gp+pHNJ0tjhYzumpdRo3S05oep7qnPp9q06bb0/XseSw5W/aR0u/lnmY
7nfq9y1f7L5b8mOpb35mn2s0zlO/b/WVrlt0pvs9lcNtfd1Wp3G2+Jjmk/bF
XqedI1p+aN8fTp0/Lf00brT7ebpfy76W9yzLvpY5aeH2VE+Lg72+52tzSMjb
bTotubWcR5qedP02X6bWf7pOy98Wz5bOU/ns/ersvLX00/qlvc/SeNp9sXC2
cJvKiZ3zVF80/a06jY99ntD02P2y67H40tr3Nl9ofp1ap32Pst/3LPm06Lyt
TrvXtb4b07jRcrL1j/9o58L+XavlV2tf2lxKr2/hYM8/bf7Yeabrdm6t80vT
aanb5/CpdVpOTs2Pnae9nuZ2m1/pfmn8LfotPlp4WuqWeUibY6fOyTT/U/XQ
+qJxaH3Hs/tC85Hmi93fUznT5ozl77Mt/rQ5ZjmPab9Ofd61OG+/3fpyexsH
OzfaPD+Vm90vS85pfdF8sdz/af3SONP6ss89ux4LZ9r7vj3PrZy06hZfaDmn
8bfMYbsvFg4WzhZf7DppfGh5aK1P29eix1KnPUdoc6nFf33sPi9o86qVQ9r9
f0r/bc/HFjdav6fy3H67vi/nO/nY61M8aXmg1e3n0aKfpifN01JPc7PnwZIf
O4flOcuZxpNWn+Jp8Z2m03IeLfppelqcaXU7t80J815t0W+v0/7ucGr9VN9b
eaDxTHOw6Ny6K7e099Ctz+bHotOS86n1aX7R8mDPW7q+fN7GwX7vTZ+vqb7s
Pqb1t/Sk+dvrm59Znfb3CwufU/PWqqdzaO+X9lyzny+7Hkt+0jlMr2+vn8qn
1ZeFm913u37aHKbpofVrP++n9vVUz1RfUxzS+qfqO5+Z30Ms32Fu853ml+X8
0nJiyfOUHlpfp54v2vPdnp/0vq2+7HPJwpM2V9PrW+ae5b3JzpNWv80Xmn6a
Hlo9PU/S+U+vT3vO2s/jqXPGcl9q1fd+9TYOFj32c2fXb+n3qZ5WntPr0/JG
u1+19t36nfPztvuV3V/a87TlS9ovmh67v7R6ut/W+jTOFm7pOo2z3d8W51Z+
WnnbPHff62n1287XniNm3Z4HCzfL+q3fb717TmnPd0vd0lcrD+nc0vJM00l7
LtD0W3LSylWL56l9WfTcVrecR/vcTnNO+5Ve/9R7SMsvyzyh6afNDdo8Wf1n
58pen8rDlC+tPLf2bT0X0v1a6pY8WPxd/WfUW/xbfln0nHpfoumc8n0qV/Y8
tPq1z7etv16nzdVWXzT9Fj60fS3zk/bcb+UtvW+rL9qcoeWWVm/xpOV5qt+p
9Wk603pOzX+aM00njQ/Nlyluey7Orlues7fd8y38W/vS6q2+0vxP9av1PYSW
wymd6XUs+aSdixaftI9bf71un5+W+ZbWk9631df63uVJu+e0+rXosftr8SV9
TlvnPd2XZX6mOZ/Kp8UtrYfGs8X5VG7p+nJmcrOfC8t9icanxZ/mb7pOO3eW
7zb280I7F2k+9voUH3vdns+0TkudxmEqbzTONH/Tv6fVTz1HNG4Wvyz127il
82ypt553af32eyPtnLb8uq1O4znlO60vC/+W/haHqfXTOWzlwZLPKf6teut8
0fyinTtLPZ1PGk+7nimdT9ex5KHlI62e5kzT38phi2da/9Y//qOdC9r9ysK/
tX6LJy0/Fv6WvNl1pv2y8Kf5nq5b3o8snGn+WvTT8mDx0XIuLBxoz037vpuH
O/W3+krrT/dl0UnLf5qbXT/tfcfio6VuOaf2Os13ml9pPU/XsfCxPBcseiz6
LfM5za3VL42zhT9tTi7nM+oWzretk+Y89fv0OlP70nxJ67fMf1q/tLrdxxaf
NOdTebbqNM52v2j90nyx3OtoedtzsXWyv7flocXHwrmVk7Qvp/Kn+Zv+vYWz
Pf9TPtLWt9QtHOzvEafOeUt+pjjcxs2i86l+ml+WfWl6TuVA45PWT9N5W797
Pzlj/TTPdA4t3Lb+8R+N8+bEVad9t9+cuOoWvyz5pN1zaN/xpnim903rv60v
e78Wbpb3IEu/tPtSmttUHm6r3zYPafot+afNZ3u/9vNFe3+Z0t/ql1Zv5aTl
V7ovWj19XtLcpvKZrtvP3dS+Lf4W/bf5RZvP9vVPnZ8tPrT7hoUPLbcWnTTf
W/ppHGhzw+4jzZdT71dpPbS5PbUOLVe0827nQzuPLc40/rf1RcvbVN3Sr8Vf
2jmi+du6D0zpsfhu0Unj0/J9Ss+UzrQeWr/2uoUDLSetvNH0p/s9Nc92f+3f
PSw+npoTy3t9en27v+k6jTNt/c3bLDdaXxYOre8nrfXTddoc2Hvy6xxoemh1
Wl92v2h6Ws8RWr80f2nc0nosvtv5p/VbdG7dlcNT80Dr6zb+9nraL4u/Uxxu
q9t9TOeWxvPU/LR40uppXyx5oNUtHKb02POQzvnTfi3caDxvq5/qIy23e75e
55DmZs8V7X613N7WV4tPq19LX7fxsXC252Tzf+d3ABp/S1+n+kX7/mZ5jrTW
p/l46rmg+W5Zv8WZNj9Pzf9TDq11pvZt+UXbl8bTco5o31tofFp1Gh+a77S6
PT80/Zb65vDTcLhNv+X9uqVnyse0nrR+Wm7tdUtub6tvTmbzQ9OZ7vfUHE7x
OVVPKw+0+5jdxykO+1zr1i05Se9Lq6c5TPGh6bHXaRxaOUznpKWHxuG2fJ6a
89a+dp6n1i05ac2f23xp+WXxd+9Le28k90s7p6fmx+Jvep3W+pa6Pf8WnVN9
0XTS6rTvADQ+aZ4Wbnb9NL9OzQmtbrn/2H2kvY/T/Fp/uzpb/C33K9r7ZpoD
7Tza9U/1NbV+i7Odv0V/mkOr3zSHKT631VucW3lr5cTCk5YTy72Fxsf+Pkib
k/b5bMmnhafFR8v8tMwZC7e0ThqH1vq0710tnhY9tOcLbR6mdVr2PbVu50Y7
L5b5SeNm4UPTSVufVrf4fhsHGn/a3Gs9d2g5Setv6aHxSeu33Ddo9yUanzS3
KT1TOk/l0Oprfe9+r6bxb/W1z8FZH2nna6pfmr+rh3lfsp/TqX3TdRrn23Sm
12lxps1JGud0neaXxd9T71cWH+370vJP4zylJ82nxb+1r4Wz/f2CNmdo73Hp
nKTzmdZv99d+v6I9N9N1y9yzcLPUaTynONP8PTU/lnzS+rLMW/vcsNRp/C25
pfWV3tdy/5/idirPVp3WLy23Wz/jO4NdD+3cTa3/dJ2pOm1u0/y15OrUfe35
tMw9Wv3U8zilxzLHti9m3ZLntE4ah6frtHyh5fO2XD3lQNNjr9N8n/KFprPF
wZ6T7av7vcvCIb0vjQONPy23tPNOq9N4WvJzW97s59Tyvknzl1ZP95XmQ/O3
te/q+TR6aM/HNE8LfxpP+72rlZ80/ymedj1T+1p0Wvql6Xmq07L+FP/WvrQ8
pDlM/T69rz0naW6Wfmmct/563fK8sOTKfs+xf4/auc3UQzsXtPVb/Kd0pvWn
dab7Wp3dOu2+QZtXljzQ7i2ncn7KreWjXWdaj52D/byk66f6vnVXnTYfLHWL
X3u/6vrS8td+rlt+0f4utuex62/aFxq3KQ4WnbfNQ9o8seTnKU8L/ymdy9l1
flt+0c477Z7Q4jCln1Zv8bH40tJzG5+WflpfUxxaPNN93bbv1PpT/bbu1ZZ+
036lOVh0br373krTaXl/Tz+v0zotc/JU/Zb1W77Q5oMlbxZ/T+3Xrp/Wr2XO
TOlvrU/LQ+t+ReOQrtPOF40/zXcaTxqfFn+LXy0+dg40/a37g2Xu2X2nzZn1
0eWLJbetnNDOBS0/NP2n6mnpb903Wn3R8m/n3OJmn/+0dVp+bd117lq+2/PW
OkfpnKRzRdNjeS60+Eytv9+lZ+s0zpb5ZsmJxa9Tc0LjbNdP+35Iy1WrTrv/
0PLW6teuh+bLlM5T6y3+t/lr6cui87Z+p3Seqv9UPrTzsjl5my8/A/K1oyc=

   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotLabel->FormBox[
    InterpretationBox["\"Iteration number \\!\\(TraditionalForm\\`50000\\)\"", 
     StringForm["Iteration number ``", 50000], Editable -> False], 
    TraditionalForm]]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.6349727319998703`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxdk2lIlFEUhj8ktzbKxJQRy7ChXEonl3LJ19xGHcdZHDV/aEUWSGBmGa2O
hmli9UMqWzCkpEbUyj3XUQsDycgCLXHJbDN/tJAVJuTkucR3B4bhmee+55zv
u/c678nQpJkJgpA2/zX9Lny+BJf05cg7T1UH0x/wr3+S3XGzktgKZ5NftL21
ZX4FHl/0OurhfI/YFmOZRRcmvzG2h7ieI459knpZVVURr+Xqr0NV9VBqdlwN
sQvsiqOnFnk/IJZy9Tcgb6K3tPXyfWJXZGdKlo17MHbneBNXzxO6rru3lagj
9sIJ25rIN8friWUY/n06ve0w81sgV/2xzxqsJfbGHpnO09XAvA8MPk8DlM9Z
fV+O/fBjeDA3K4LV34ry/XVTWQ0NxNtQY3p8p0Zif7RGLTVzK2AcwK0PxKUZ
i9RSBeMg9LY0n7f4wtZvx0u3NIeJpCbiYOQ2mV5ZMzFwZ3HE+iNmLQusBzxC
HT9P+BILITDZa1at5ENo/9vJ74DUpCUd5HdgQBg1sy7qJB9K54NYHwrZ+5r1
k2dovRBG+8l8GB7OT28nN5IPp/0j1odjICPVst+hi3wEFH7nQna9Yz4C1pKy
lI19LB/J+UhMq5ud8j+zvBxj40tKDHnEejntF/NRWDc3c2T8BvNROGQad003
+Wgx66Nh7r3SN7Cd+RjkzPof7C9kPgbdq6Va81vMK2BT0d61WtpDXkHnkViI
RfGBD7OGrywfy3klnhUOjI4vYXkl1z+O6x/Hza/Cr+69lbviiaESz6dXifsZ
VahQYtXuHtZfTeefGGq4Fdi96v/J5uHYqObyGnxMd5u5MsLyGpSOlBTkJ7O8
hstrxP0ErbgetKjtnC4LdH9EeS3dZ2KjFh2eV13tLxEL8SjMNx1oYnCsj8fy
f4HHlI+n+0Ys6DBk8y3k2T5icKzXISXmiWXQdZbXQbJ5xMUil+UT6D6zfAKX
TxD3MyaI5xESxR6JUL+WnNwtY3nOGzkWkrj5k9BXHt74fY49P8fGJPH7EXaK
++E//wXu9tnb
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"Long-range order parameter\"", TraditionalForm],
  PlotRange->{{0., 101.}, {0, 0.1696}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972732097662*^9}],

Cell[BoxData[
 InterpretationBox["\<\"l=\\!\\(100\\)  boverkt=\\!\\(0.`\\)  \
joverkt=\\!\\(2.`\\) run for \\!\\(50000\\) steps\"\>",
  StringForm[
  "l=``  boverkt=``  joverkt=`` run for `` steps", 100, 0., 2., 50000],
  Editable->False]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972732102784*^9}],

Cell[BoxData[
 InterpretationBox["\<\"RMS spin deviation = \
\\!\\(0.0011488614019932691`\\)\"\>",
  StringForm["RMS spin deviation = ``", 0.0011488614019932691`],
  Editable->False]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972732104546*^9}],

Cell[BoxData[
 InterpretationBox["\<\"Mean spin = \\!\\(0.1655652800000015`\\)\"\>",
  StringForm["Mean spin = ``", 0.1655652800000015],
  Editable->False]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972732105514*^9}],

Cell[BoxData[
 InterpretationBox["\<\"Mean energy = \\!\\(-129366.21680000001`\\)\"\>",
  StringForm["Mean energy = ``", -129366.21680000001`],
  Editable->False]], "Print",
 CellChangeTimes->{3.44497602976*^9, 3.444976994883*^9, 3.4772905693676*^9, 
  3.634970201208106*^9, 3.6349702898378563`*^9, 3.634970955661051*^9, 
  3.634971216066596*^9, 3.634971387484673*^9, 3.634972732106439*^9}],

Cell[TextData[{
 "We find that the interactions lead to 'domains' in which the spins are all \
parallel -- as shown by the 'blocky' nature of the image -- but in the \
absence of any applied field there are as many domains with spin up as spin \
down. This order-disorder transition should set in, for this two-dimensional \
structure, at a value of ",
 StyleBox["joverkt",
  FontFamily->"Courier New"],
 " of 0.44. The bigger we make this parameter the clearer the blocks become. \
The essence of an order-disorder transition of this kind is that one should \
see 'patches' of order at all length scales. To model it properly needs large \
regions, and special techniques to overcome what is called 'critical slowing \
down' -- the fact that the system changes very slowly close to the critical \
point. "
}], "Text",
 CellChangeTimes->{{3.4772917887256002`*^9, 3.4772918028876*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Metropolis algorithm for minimisation", "Section"],

Cell["\<\
A very common problem in physics and in other walks of life is that of \
finding the minimum of some function. In a scientific application we might be \
trying to find the equilibrium, minimum energy, configuration of a system. In \
a commercial environment, we might want to find the shortest path joining a \
number of points (the so-called travelling salesman problem). These are very \
complicated problems, and it is fair to say that, except for very simple \
cases, there is no method that is guaranteed to find the global minimum. \
Simple algorithms simply try to go downhill all the time: in a case such as \
the one shown below that will find the minimum if it starts from point A, but \
only a local minimum if started from B (and that is assuming that there is no \
deeper minimum off the screen).\
\>", "Text",
 CellChangeTimes->{{3.4772908585056*^9, 3.4772908842816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"pp", "=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"3", " ", 
       SuperscriptBox["x", "4"]}], "-", 
      RowBox[{"5", " ", 
       SuperscriptBox["x", "3"]}], "+", "x", "-", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "2"}], "}"}], ",", 
     RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"gg", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PointSize", "[", "0.02`", "]"}], ",", 
      RowBox[{"Point", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.7`"}], ",", 
         RowBox[{"-", "0.35`"}]}], "}"}], "]"}], ",", 
      RowBox[{"Point", "[", 
       RowBox[{"{", 
        RowBox[{"1.65`", ",", 
         RowBox[{"-", "0.5`"}]}], "}"}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<B\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", ".8"}], ",", 
          RowBox[{"-", "0.5`"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<A\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1.8`", ",", 
          RowBox[{"-", "0.48`"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{"pp", ",", "gg"}], "]"}]}], "Input",
 CellChangeTimes->{{3.444976392432*^9, 3.4449764044*^9}, {3.4772908150736*^9, 
  3.4772908343206*^9}, {3.4772908895406*^9, 3.4772910002636003`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, 
   {PointSize[0.02], PointBox[{-0.7, -0.35}], PointBox[{1.65, -0.5}], 
    InsetBox["\<\"B\"\>", {-0.8, -0.5}], InsetBox["\<\"A\"\>", {1.8, -0.48}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-1, 2}, {-3.219788707185156, 7.999997734694034}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.444976029941*^9, 3.444976405528*^9, 3.444977188448*^9, 
   3.4772907643826*^9, {3.4772908166846*^9, 3.4772908354536*^9}, {
   3.4772909048216*^9, 3.4772910017676*^9}, 3.634895651852868*^9}]
}, Open  ]],

Cell["\<\
The ideas of the Metropolis algorithm are based on ideas of how liquids cool \
and solidify. At high temperatures the atoms have a lot of energy, and move \
around freely. If they are cooled slowly, they have time to explore lots of \
different relative positions and can settle down into regular structures - \
crystals. If they are cooled too quickly they can get trapped in positions \
which are not optimal, but they would require some thermal energy to jump out \
of those positions into somewhere better. This is what happens if a liquid is \
cooled quickly, and forms a glass -- it is in a metastable state, rather than \
the ground state. This is not unique to glasses: substances which can take on \
several crystal forms can get 'stuck' in forms which are not \
thermodynamically the most stable. This is the case with diamond, the stable \
form of which is graphite. 

  So what is done in a Metropolis minimisation is to run Monte Carlo \
simulations, but gradually decrease the control temperature (this temperature \
control is called the 'annealing schedule', by analogy of the use of \
temperature control in annealing defects out of metals). The exact details of \
how best to do this are hard to optimise. \
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Section"],

Cell[TextData[{
 "This lecture has only skimmed the surface of Monte Carlo methods. These \
techniques have been the subject of an enormous amount of research, which has \
led to their application in a huge range of areas. Other applications include \
the growth of crystal grain structures in solids (which use methods very \
similar to the Ising model), and crystal growth from a seed in a crystal \
(including the prediction of dendritic, tree-like, growth structures, as is \
followed in one of the miniprojects). They can also be used to solve \
differential equations, where instead of applying a finite difference formula \
such as (for steady-state heat flow, with the temperature at spatial position \
(",
 StyleBox["i,j",
  FontSlant->"Italic"],
 ") and heat input ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Q", 
    RowBox[{"i", ",", "j"}]], TraditionalForm]]],
 " at position (",
 StyleBox["i,j",
  FontSlant->"Italic"],
 ") - see Homework 2)\n   ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Theta]", 
     RowBox[{"i", ",", "j"}]], " ", "=", " ", 
    RowBox[{
     RowBox[{
      FractionBox["1", "4"], 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[Theta]", 
         RowBox[{
          RowBox[{"i", "+", "1"}], ",", "j"}]], "+", 
        SubscriptBox["\[Theta]", 
         RowBox[{
          RowBox[{"i", "-", "1"}], ",", "j"}]], "+", 
        SubscriptBox["\[Theta]", 
         RowBox[{"i", ",", 
          RowBox[{"j", "+", "1"}]}]], "+", 
        SubscriptBox["\[Theta]", 
         RowBox[{"i", ",", 
          RowBox[{"j", "-", "1"}]}]]}], "}"}]}], "+", 
     RowBox[{
      FractionBox[
       SuperscriptBox["\[CapitalDelta]x", "2"], "\[Kappa]"], 
      SubscriptBox["Q", 
       RowBox[{"i", ",", "j"}]]}]}]}], TraditionalForm]]],
 "\n   directly we take \n    ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Theta]", 
    RowBox[{
     RowBox[{"i", "+", "1"}], ",", "j"}]], TraditionalForm]]],
 "+",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      SuperscriptBox["\[CapitalDelta]x", "2"], 
      RowBox[{"4", "\[Kappa]"}]], 
     SubscriptBox["Q", 
      RowBox[{"i", ",", "j"}]]}], ",", " "}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Theta]", 
     RowBox[{
      RowBox[{"i", "-", "1"}], ",", "j"}]], "+", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[CapitalDelta]x", "2"], 
      RowBox[{"4", "\[Kappa]"}]], 
     SubscriptBox["Q", 
      RowBox[{"i", ",", "j"}]]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Theta]", 
     RowBox[{"i", ",", 
      RowBox[{"j", "+", "1"}]}]], "+", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[CapitalDelta]x", "2"], 
      RowBox[{"4", "\[Kappa]"}]], 
     SubscriptBox["Q", 
      RowBox[{"i", ",", "j"}]]}]}], TraditionalForm]]],
 " and  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Theta]", 
     RowBox[{"i", ",", 
      RowBox[{"j", "-", "1"}]}]], "+", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[CapitalDelta]x", "2"], 
      RowBox[{"4", "\[Kappa]"}]], 
     SubscriptBox["Q", 
      RowBox[{"i", ",", "j"}]]}]}], TraditionalForm]]],
 "\nas estimators of the temperature ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Theta]", 
    RowBox[{"i", ",", "j"}]], TraditionalForm]]],
 ", each with probability 0.25. A point is picked at random, its temperature \
updated, then one of its neighbours is picked and updated, and the process is \
repeated until a boundary (at known temperature) is reached. If this process \
is repeated a large number of times from different starting points a solution \
will be approached. This is, basically, a 'random walk' process, and works \
because of the diffusive nature of heat flow."
}], "Text"],

Cell[TextData[{
 "  Note that several of the examples in this lecture have been taken from ",
 StyleBox["An Introduction to Computer Simulation",
  FontSlant->"Italic"],
 " by M.M. Woolfson and G.J. Pert (Oxford 1999).\n"
}], "Text",
 CellChangeTimes->{3.63489709671129*^9}],

Cell["\<\
A.H. Harker
Physics and Astronomy, UCL
September 2005; updated February 2007, February 2008, February 2009, February \
2010.
Amended by Patrick Guio, Physics and Astronomy, UCL, March 2015, March 2016.
Minor amendment by N. A., March 2017\
\>", "Text",
 CellChangeTimes->{{3.4449749413129997`*^9, 3.444974945413*^9}, {
  3.4772907170176*^9, 3.4772907222346*^9}, {3.63489567863844*^9, 
  3.634895686320553*^9}, {3.634895726894927*^9, 3.63489573225499*^9}, {
  3.666342532883685*^9, 3.666342539830988*^9}, {3.6977890830801783`*^9, 
  3.69778910066035*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{980, 1001},
WindowMargins->{{149, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
Magnification->1.5,
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 10, \
2015)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["Style Definitions", "Subtitle"], 
      Cell[
      "Modify the definitions below to change the default appearance of all \
cells in a given style.  Make modifications to any definition using commands \
in the Format menu.", "Text"], 
      Cell[
       CellGroupData[{
         Cell["Style Environment Names", "Subsection"], 
         Cell[
          StyleData[All, "Working"], 
          CellBracketOptions -> {"Color" -> RGBColor[0, 0.2, 1]}, 
          ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Notebook Options", "Subsection"], 
         Cell[
         "  The options defined for the style below will be used at the \
Notebook level.  ", "Text"], 
         Cell[
          StyleData["Notebook"], PageHeaders -> {{
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"], None, 
             Cell[
              TextData[{
                OptionValueBox["FileName"]}], "Header"]}, {
             Cell[
              TextData[{
                OptionValueBox["FileName"]}], "Header"], None, 
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"]}}, 
          PrintingOptions -> {
           "FacingPages" -> False, "FirstPageHeader" -> False, 
            "PageHeaderMargins" -> {43, 43}, "PageSize" -> {611.688, 792}}, 
          CellFrameLabelMargins -> 6, StyleMenuListing -> None]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Headings", "Subsection", 
          HyphenationOptions -> {"HyphenationMinLengths" -> {Inherited, 7}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellFrame -> {{0, 0}, {15, 0}}, 
             CellMargins -> {{10, 0}, {0, 4}}, 
             CellGroupingRules -> {"TitleGrouping", 0}, 
             CellFrameMargins -> {{0, 0}, {-8, 0}}, CellFrameColor -> 
             RGBColor[0.400015, 0, 0.600015], TextAlignment -> Right, 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, 
             LineSpacing -> {1, 0}, CounterIncrements -> "Title", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subtitle", 0}}, FontFamily -> "Arial", 
             FontSize -> 72, FontWeight -> "Bold", FontColor -> 
             RGBColor[0.400015, 0, 0.600015]], 
            Cell[
             StyleData["Title", "Printout"], CellFrame -> {{0, 0}, {6, 0}}, 
             CellMargins -> {{10, 0}, {0, 6}}, 
             CellFrameMargins -> {{0, 0}, {-7, 0}}, CellFrameColor -> 
             GrayLevel[0.6], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, FontFamily -> 
             "Arial", FontSize -> 38, FontWeight -> "Bold", FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], CellMargins -> {{10, -0.75}, {20, 7}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, CounterIncrements -> 
             "Subtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subsubtitle", 0}}, FontFamily -> "Arial", 
             FontSize -> 32, FontWeight -> "Bold", FontColor -> 
             RGBColor[0.400015, 0, 0.600015]], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{10, -0.75}, {20, 8}}, 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, FontFamily -> 
             "Arial", FontSize -> 21, FontWeight -> "Bold", FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SmallText"], CellMargins -> {{50, 10}, {10, 2}}, 
             TextAlignment -> Right, Hyphenation -> True, 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, 
             LineSpacing -> {1, 2}, CounterIncrements -> "SmallText", 
             FontFamily -> "Times", FontSize -> 12, FontSlant -> "Italic"], 
            Cell[
             StyleData["SmallText", "Printout"], PageWidth -> PaperWidth, 
             CellMargins -> {{50, 2}, {10, 4}}, 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, 
             LineSpacing -> {1, 2}, FontFamily -> "Palatino", FontSize -> 9]},
            Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {12, 18}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 18}, 
             CellGroupingRules -> {"SectionGrouping", 30}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.530007, 0, 0], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, CounterIncrements -> 
             "Section", 
             CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
               "NumberedEquation", 0}}, FontFamily -> "Arial", FontSize -> 22,
              FontWeight -> "Bold", FontColor -> RGBColor[0.530007, 0, 0]], 
            Cell[
             StyleData["Section", "Printout"], 
             CellFrame -> {{0, 0}, {2.5, 0}}, 
             CellMargins -> {{10, 0}, {14, 18}}, PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0, 7}}, CellFrameColor -> 
             GrayLevel[0.500008], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, FontFamily -> 
             "Arial", FontSize -> 14, FontWeight -> "Bold", FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {11, 16}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.100008, 0.0899977, 0.659998], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Arial", FontSize -> 18, FontWeight -> "Bold", 
             FontColor -> RGBColor[0.100008, 0.0899977, 0.659998]], 
            Cell[
             StyleData["Subsection", "Printout"], CellFrame -> False, 
             CellDingbat -> None, CellMargins -> {{10, 0}, {9, 14}}, 
             PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0.6875, 6}}, CellFrameColor -> 
             GrayLevel[0.6], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, FontFamily -> 
             "Arial", FontSize -> 12, FontWeight -> "Bold", FontColor -> 
             GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellDingbat -> None, CellMargins -> {{10, 0}, {6, 12}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 50}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.110002, 0.429999, 0.110002], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, CounterIncrements -> 
             "Subsubsection", FontFamily -> "Arial", FontSize -> 14, 
             FontWeight -> "Bold", FontColor -> 
             RGBColor[0.110002, 0.429999, 0.110002]], 
            Cell[
             StyleData["Subsubsection", "Printout"], CellFrame -> False, 
             CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{21, 0}, {6, 9}}, PageBreakBelow -> False, 
             CellFrameColor -> GrayLevel[0.6], 
             HyphenationOptions -> {
              "HyphenationMinLengths" -> {Inherited, 7}}, 
             LineSpacing -> {1, 2}, FontFamily -> "Arial", FontSize -> 10, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0]]}, Open]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Text", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{10, 0}, {2, 2}}, 
             InputAutoReplacements -> {
              "mma" -> "Mathematica", "Mma" -> "Mathematica", "MMA" -> 
               "Mathematica", Inherited}, Hyphenation -> True, 
             LineSpacing -> {1, 4}, ParagraphSpacing -> {0, 0}, TabSpacings -> 
             1.8, CounterIncrements -> "Text", FontFamily -> "Times", 
             FontSize -> 12], 
            Cell[
             StyleData["Text", "Printout"], PageWidth -> PaperWidth, 
             CellMargins -> {{10, 0}, {0, 0}}, TextJustification -> 1, 
             LineSpacing -> {1, 2}, ParagraphSpacing -> {0, 0}, TabSpacings -> 
             1.5, FontFamily -> "Palatino", FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["EmphasizedText"], CellFrame -> {{1, 0}, {0, 0}}, 
             CellMargins -> {{10, 0}, {3, 3}}, 
             CellFrameMargins -> {{10, Inherited}, {Inherited, Inherited}}, 
             CellFrameColor -> RGBColor[0.829999, 0, 0.0500038], 
             InputAutoReplacements -> {
              "mma" -> "Mathematica", "Mma" -> "Mathematica", "MMA" -> 
               "Mathematica", Inherited}, Hyphenation -> True, 
             LineSpacing -> {1, 4}, ParagraphIndent -> -14, TabSpacings -> 
             1.8, CounterIncrements -> "Text", FontFamily -> "Times", 
             FontSize -> 12, Background -> RGBColor[1, 0.994522, 0.910979]], 
            Cell[
             StyleData["EmphasizedText", "Printout"], PageWidth -> PaperWidth,
              CellFrame -> False, CellMargins -> {{23, 0}, {5, 5}}, 
             CellFrameMargins -> {{7, Inherited}, {Inherited, Inherited}}, 
             CellFrameColor -> GrayLevel[0], TextJustification -> 1, 
             LineSpacing -> {1, 2}, ParagraphIndent -> -8.6875, TabSpacings -> 
             1.5, FontFamily -> "Palatino", FontSize -> 10, Background -> 
             GrayLevel[1]]}, Open]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Input/Output", "Subsection"], 
         Cell[
         "The cells in this section define styles used for input and output \
to the kernel.  Be careful when modifying, renaming, or removing these \
styles, because the front end associates special meanings with these style \
names.    ", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellMargins -> {{40, 10}, {4, 4}}, 
             Evaluatable -> True, CellGroupingRules -> "InputGrouping", 
             PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             CellLabelAutoDelete -> True, 
             CellLabelMargins -> {{11, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             LineSpacing -> {1, 4}, AutoItalicWords -> {}, LanguageCategory -> 
             "Mathematica", FormatType -> StandardForm, ShowStringCharacters -> 
             True, NumberMarks -> True, 
             LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> 
             "Input", FontFamily -> "Courier", FontSize -> 12, FontWeight -> 
             "Bold"], 
            Cell[
             StyleData["Input", "Printout"], CellMargins -> {{28, 0}, {4, 4}},
              LineSpacing -> {1, 1}, 
             LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
           Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], CellMargins -> {{40, 10}, {4, 2}}, 
             CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping",
              PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, 
             CellLabelAutoDelete -> True, 
             CellLabelMargins -> {{11, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> None, FormatType -> 
             StandardForm, CounterIncrements -> "Output", FontFamily -> 
             "Courier", FontSize -> 12], 
            Cell[
             StyleData["Output", "Printout"], 
             CellMargins -> {{28, 0}, {4, 0}}, FontSize -> 9]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Message"], CellMargins -> {{28, Inherited}, {2, 1}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> None, FormatType -> 
             InputForm, CounterIncrements -> "Message", StyleMenuListing -> 
             None, FontFamily -> "Courier", FontSize -> 12, FontColor -> 
             RGBColor[0, 0.2, 1]], 
            Cell[
             StyleData["Message", "Printout"], ShowCellBracket -> False, 
             FontSize -> 9]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Print"], CellMargins -> {{40, Inherited}, {2, 1}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Print", StyleMenuListing -> None, 
             FontFamily -> "Courier", FontSize -> 12], 
            Cell[
             StyleData["Print", "Printout"], ShowCellBracket -> False, 
             CellMargins -> {{28, Inherited}, {2, 1}}, FontSize -> 9]}, 
           Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], 
             CellMargins -> {{25, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, FormatType -> 
             InputForm, CounterIncrements -> "Graphics", 
             ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Graphics", "Printout"], 
             CellMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
             ImageSize -> {110, 110}, 
             ImageMargins -> {{18, Inherited}, {Inherited, 0}}, FontSize -> 
             9]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], StyleMenuListing -> None, FontFamily -> 
             "Arial", FontSize -> 12, FontColor -> RGBColor[0, 0.2, 1]], 
            Cell[
             StyleData["CellLabel", "Printout"], FontSize -> 9, FontSlant -> 
             "Oblique", FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["FrameLabel"], LanguageCategory -> None, 
             StyleMenuListing -> None, FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["FrameLabel", "Printout"], FontFamily -> "Palatino", 
             FontSize -> 10, FontColor -> GrayLevel[0]]}, Open]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Variations for Headings", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SectionZeroAbove"], CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {12, 18}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 18}, 
             CellGroupingRules -> {"SectionGrouping", 30}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.530007, 0, 0], CounterIncrements -> "Section", 
             CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
               "NumberedEquation", 0}}, FontFamily -> "Arial", FontSize -> 22,
              FontWeight -> "Bold", FontColor -> RGBColor[0.530007, 0, 0]], 
            Cell[
             StyleData["SectionZeroAbove", "Printout"], 
             CellFrame -> {{0, 0}, {2.5, 0}}, 
             CellMargins -> {{10, 0}, {14, 0}}, PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0, 7}}, CellFrameColor -> 
             GrayLevel[0.500008], FontFamily -> "Arial", FontSize -> 14, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsectionZeroAbove"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {11, 5}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.100008, 0.0899977, 0.659998], CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Arial", FontSize -> 18, FontWeight -> "Bold", 
             FontColor -> RGBColor[0.100008, 0.0899977, 0.659998]], 
            Cell[
             StyleData["SubsectionZeroAbove", "Printout"], CellFrame -> False,
              CellDingbat -> None, CellMargins -> {{10, 0}, {9, 0}}, 
             PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0.6875, 6}}, CellFrameColor -> 
             GrayLevel[0.6], FontFamily -> "Arial", FontSize -> 12, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsectionZeroBelow"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {8, 16}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.100008, 0.0899977, 0.659998], CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Arial", FontSize -> 18, FontWeight -> "Bold", 
             FontColor -> RGBColor[0.100008, 0.0899977, 0.659998]], 
            Cell[
             StyleData["SubsectionZeroBelow", "Printout"], CellFrame -> False,
              CellDingbat -> None, CellMargins -> {{10, 0}, {4, 14}}, 
             PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0.6875, 6}}, CellFrameColor -> 
             GrayLevel[0.6], FontFamily -> "Arial", FontSize -> 12, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsectionZeroAboveBelow"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, 
             CellMargins -> {{10, 0}, {8, 5}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 40}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.100008, 0.0899977, 0.659998], CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Arial", FontSize -> 18, FontWeight -> "Bold", 
             FontColor -> RGBColor[0.100008, 0.0899977, 0.659998]], 
            Cell[
             StyleData["SubsectionZeroAboveBelow", "Printout"], CellFrame -> 
             False, CellDingbat -> None, CellMargins -> {{10, 0}, {4, 0}}, 
             PageBreakBelow -> False, 
             CellFrameMargins -> {{10, 0}, {0.6875, 6}}, CellFrameColor -> 
             GrayLevel[0.6], FontFamily -> "Arial", FontSize -> 12, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsubsectionZeroAbove"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, CellDingbat -> None, 
             CellMargins -> {{10, 0}, {6, 7}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 50}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.110002, 0.429999, 0.110002], CounterIncrements -> 
             "Subsubsection", FontFamily -> "Arial", FontSize -> 14, 
             FontWeight -> "Bold", FontColor -> 
             RGBColor[0.110002, 0.429999, 0.110002]], 
            Cell[
             StyleData["SubsubsectionZeroAbove", "Printout"], CellFrame -> 
             False, CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{21, 0}, {6, 0}}, PageBreakBelow -> False, 
             CellFrameColor -> GrayLevel[0.6], LineSpacing -> {1, 2}, 
             FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Bold", 
             FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsubsectionZeroBelow"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, CellDingbat -> None, 
             CellMargins -> {{10, 0}, {3, 12}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 50}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.110002, 0.429999, 0.110002], CounterIncrements -> 
             "Subsubsection", FontFamily -> "Arial", FontSize -> 14, 
             FontWeight -> "Bold", FontColor -> 
             RGBColor[0.110002, 0.429999, 0.110002]], 
            Cell[
             StyleData["SubsubsectionZeroBelow", "Printout"], CellFrame -> 
             False, CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{21, 0}, {1, 9}}, PageBreakBelow -> False, 
             CellFrameColor -> GrayLevel[0.6], LineSpacing -> {1, 2}, 
             FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Bold", 
             FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SubsubsectionZeroAboveBelow"], 
             CellFrame -> {{6, 0}, {0, 1.5}}, CellDingbat -> None, 
             CellMargins -> {{10, 0}, {3, 7}}, 
             CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
             CellGroupingRules -> {"SectionGrouping", 50}, 
             CellFrameMargins -> {{12, 0}, {2, 4}}, CellFrameColor -> 
             RGBColor[0.110002, 0.429999, 0.110002], CounterIncrements -> 
             "Subsubsection", FontFamily -> "Arial", FontSize -> 14, 
             FontWeight -> "Bold", FontColor -> 
             RGBColor[0.110002, 0.429999, 0.110002]], 
            Cell[
             StyleData["SubsubsectionZeroAboveBelow", "Printout"], CellFrame -> 
             False, CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{21, 0}, {1, 0}}, PageBreakBelow -> False, 
             CellFrameColor -> GrayLevel[0.6], LineSpacing -> {1, 2}, 
             FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Bold", 
             FontColor -> GrayLevel[0]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ChapterContents1"], CellMargins -> {{10, 0}, {2, 2}}, 
             Hyphenation -> True, LineSpacing -> {1, 4}, FontFamily -> 
             "Times", FontSize -> 13, FontWeight -> "Bold"], 
            Cell[
             StyleData["ChapterContents1", "Printout"], PageWidth -> 
             PaperWidth, CellMargins -> {{10, 0}, {1, 1}}, FontFamily -> 
             "Palatino", FontSize -> 9]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ChapterContents2"], CellMargins -> {{32, 0}, {2, 2}}, 
             Hyphenation -> True, LineSpacing -> {1, 5}, 
             ParagraphIndent -> -30, FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["ChapterContents2", "Printout"], PageWidth -> 
             PaperWidth, CellMargins -> {{27, 0}, {0, 0}}, 
             LineSpacing -> {1, 4}, FontFamily -> "Palatino", FontSize -> 9]},
            Open]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Variations for Text", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BoxedText"], CellFrame -> {{1.5, 0.25}, {0.25, 1.5}}, 
             CellMargins -> {{10, 0}, {6, 6}}, 
             CellFrameMargins -> {{14, 4}, {6, 6}}, CellFrameColor -> 
             RGBColor[0, 0.00999466, 0.549996], Hyphenation -> True, 
             LineSpacing -> {1, 4}, ParagraphSpacing -> {0, 0}, 
             ParagraphIndent -> -15, TabSpacings -> 1.5, CounterIncrements -> 
             "Text", FontFamily -> "Times", FontSize -> 12, Background -> 
             RGBColor[0.930007, 0.949996, 1]], 
            Cell[
             StyleData["BoxedText", "Printout"], PageWidth -> PaperWidth, 
             CellFrame -> True, CellMargins -> {{10, 0}, {6, 6}}, 
             PageBreakWithin -> True, CellFrameMargins -> {{9, 3}, {4, 4}}, 
             CellFrameColor -> GrayLevel[0], LineSpacing -> {1, 2}, 
             ParagraphSpacing -> {0, 0}, ParagraphIndent -> -8.875, 
             TabSpacings -> 1.1, FontFamily -> "Palatino", FontSize -> 10, 
             Background -> GrayLevel[1]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BoxedProgram"], 
             CellFrame -> {{1.5, 0.25}, {0.25, 1.5}}, 
             CellMargins -> {{10, 0}, {6, 6}}, Evaluatable -> True, 
             CellFrameMargins -> {{14, 6}, {6, 6}}, CellFrameColor -> 
             RGBColor[0, 0.349996, 0], DefaultFormatType -> 
             DefaultInputFormatType, Hyphenation -> True, 
             LineSpacing -> {1, 2}, FormatType -> StandardForm, 
             ShowStringCharacters -> True, CounterIncrements -> "Text", 
             FontFamily -> "Courier", FontSize -> 12, FontWeight -> "Bold", 
             Background -> RGBColor[0.919997, 0.940002, 0.910079]], 
            Cell[
             StyleData["BoxedProgram", "Printout"], PageWidth -> PaperWidth, 
             CellFrame -> True, CellFrameMargins -> {{12, 3}, {4, 4}}, 
             CellFrameColor -> GrayLevel[0], ParagraphIndent -> -15, 
             FontFamily -> "Courier", FontSize -> 9, Background -> 
             GrayLevel[1]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Files"], FontFamily -> "Arial", FontSize -> 11, 
             FontWeight -> "Bold"], 
            Cell[
             StyleData["Files", "Printout"], PageWidth -> PaperWidth, 
             FontFamily -> "Arial", FontSize -> 9]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DisplayEquation"], CellMargins -> {{10, 0}, {7, 7}}, 
             InputAutoReplacements -> {
              "mma" -> "Mathematica", "Mma" -> "Mathematica", "MMA" -> 
               "Mathematica", Inherited}, Hyphenation -> True, 
             LineSpacing -> {1, 4}, TabSpacings -> 1.8, CounterIncrements -> 
             "Text", FontFamily -> "Times", FontSize -> 12], 
            Cell[
             StyleData["DisplayEquation", "Printout"], PageWidth -> 
             PaperWidth, CellMargins -> {{10, 0}, {4, 4}}, CellFrameColor -> 
             GrayLevel[0], TextJustification -> 1, LineSpacing -> {1, 2}, 
             TabSpacings -> 1.5, FontFamily -> "Palatino", FontSize -> 10, 
             Background -> GrayLevel[1]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedEquation"], CellMargins -> {{10, 0}, {7, 7}}, 
             CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(", 
                   CounterBox["NumberedEquation"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             LineSpacing -> {1, 4}, TabSpacings -> 1.8, CounterIncrements -> 
             "NumberedEquation", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["NumberedEquation", "Printout"], 
             CellMargins -> {{10, 0}, {4, 4}}, LineSpacing -> {1, 2}, 
             TabSpacings -> 1.5, FontSize -> 10]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DotNumberedEquation"], 
             CellMargins -> {{10, 0}, {7, 7}}, CellFrameLabels -> {{None, 
                Cell[
                 TextData[{"(", 
                   CounterBox["Section"], ".", 
                   CounterBox["NumberedEquation"], ")"}]]}, {None, None}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             LineSpacing -> {1, 4}, TabSpacings -> 1.8, CounterIncrements -> 
             "NumberedEquation", FormatTypeAutoConvert -> False], 
            Cell[
             StyleData["DotNumberedEquation", "Printout"], 
             CellMargins -> {{10, 0}, {4, 4}}, LineSpacing -> {1, 2}, 
             TabSpacings -> 1.5, FontSize -> 10]}, Open]], 
         Cell[
          StyleData["PictureGroup"], CellMargins -> {{41, 4}, {0, 4}}, 
          CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
          True, StyleMenuListing -> None]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Format Types", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellExpression"], PageWidth -> Infinity, 
             CellMargins -> {{28, 10}, {4, 4}}, ShowCellLabel -> False, 
             ShowSpecialCharacters -> False, AllowInlineCells -> False, 
             AutoItalicWords -> {}, StyleMenuListing -> None, FontFamily -> 
             "Courier", FontSize -> 12, Background -> GrayLevel[1]], 
            Cell[
             StyleData["CellExpression", "Printout"], PageWidth -> PaperWidth,
              CellMargins -> {{28, 0}, {4, 4}}, ShowCellLabel -> False, 
             ShowSpecialCharacters -> False, AllowInlineCells -> False, 
             AutoItalicWords -> {}, StyleMenuListing -> None, FontFamily -> 
             "Courier", FontSize -> 9, Background -> GrayLevel[1]]}, Open]], 
         Cell[
          StyleData["InputForm"], InputAutoReplacements -> {}, 
          AllowInlineCells -> False, Hyphenation -> False, StyleMenuListing -> 
          None, FontFamily -> "Courier"], 
         Cell[
          StyleData["OutputForm"], PageWidth -> Infinity, TextAlignment -> 
          Left, LineSpacing -> {0.6, 1}, StyleMenuListing -> None, FontFamily -> 
          "Courier"], 
         Cell[
          StyleData["StandardForm"], 
          InputAutoReplacements -> {
           "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
            "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", 
            "==" -> "\[Equal]", Inherited}, 
          "TwoByteSyntaxCharacterAutoReplacement" -> True, 
          LineSpacing -> {1.25, 0}, StyleMenuListing -> None, FontFamily -> 
          "Courier"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TraditionalForm"], 
             InputAutoReplacements -> {
              "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
               "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> 
               "\[NotEqual]", "==" -> "\[Equal]", Inherited}, 
             "TwoByteSyntaxCharacterAutoReplacement" -> True, 
             LineSpacing -> {1.25, 0}, SingleLetterItalics -> True, 
             TraditionalFunctionNotation -> True, DelimiterMatching -> None, 
             StyleMenuListing -> None, FontFamily -> "Times"], 
            Cell[
             StyleData["TraditionalForm", "Printout"], 
             InputAutoReplacements -> {
              "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
               "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> 
               "\[NotEqual]", "==" -> "\[Equal]", Inherited}, 
             "TwoByteSyntaxCharacterAutoReplacement" -> True, 
             LineSpacing -> {1.25, 0}, SingleLetterItalics -> True, 
             TraditionalFunctionNotation -> True, DelimiterMatching -> None, 
             StyleMenuListing -> None, FontFamily -> "Palatino", FontSize -> 
             10]}, Open]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Headers and Footers", "Subsection"], 
         Cell[
          StyleData["Header"], CellMargins -> {{10, 0}, {0, 0}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontFamily -> "Arial", 
          FontSize -> 9, FontWeight -> "Bold"], 
         Cell[
          StyleData["Footer"], CellMargins -> {{0, 0}, {0, 4}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontSize -> 9, 
          FontSlant -> "Italic"], 
         Cell[
          StyleData["PageNumber"], CellMargins -> {{10, 0}, {0, 0}}, 
          StyleMenuListing -> None, FontFamily -> "Palatino", FontSize -> 12, 
          FontSlant -> "Italic"]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Hyperlink Styles", "Subsection"], 
         Cell[
         "The cells below define styles useful for making hypertext \
ButtonBoxes.  The \"Hyperlink\" style is for links within the same Notebook, \
or between Notebooks.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               ButtonData}], 
            Cell[
             StyleData["Hyperlink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
         "The following styles are for linking automatically to the on-line \
help system.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MainBookLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["MainBook", #]}]& )}], 
            Cell[
             StyleData["MainBookLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AddOnsLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["AddOns", #]}]& )}], 
            Cell[
             StyleData["AddOnsLink", "Printout"], FontFamily -> "Palatino", 
             FontSize -> 10, FontVariations -> {"Underline" -> False}, 
             FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["RefGuideLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["RefGuide", #]}]& )}], 
            Cell[
             StyleData["RefGuideLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GettingStartedLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["GettingStarted", #]}]& )}], 
            Cell[
             StyleData["GettingStartedLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OtherInformationLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["OtherInformation", #]}]& )}], 
            Cell[
             StyleData["OtherInformationLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Palette Styles", "Subsection"], 
         Cell[
         "The cells below define styles that define standard ButtonFunctions, \
for use in palette buttons.", "Text"], 
         Cell[
          StyleData["Paste"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, After]}]& )}], 
         Cell[
          StyleData["Evaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["EvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionMove[
                FrontEnd`InputNotebook[], All, Cell, 1], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}]}, Closed]]}, Open]]}, 
  Visible -> False, FrontEndVersion -> 
  "10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 10, 2015)", 
  StyleDefinitions -> "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 18, 0, 137, "Title"],
Cell[588, 24, 94, 3, 152, "Subtitle"],
Cell[CellGroupData[{
Cell[707, 31, 31, 0, 90, "Section"],
Cell[741, 33, 887, 15, 175, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1665, 53, 54, 0, 90, "Section"],
Cell[1722, 55, 2242, 47, 305, "Text"],
Cell[3967, 104, 2765, 93, 374, "Text"],
Cell[6735, 199, 961, 27, 153, "BoxedProgram"],
Cell[7699, 228, 237, 4, 27, "Output"],
Cell[7939, 234, 237, 4, 27, "Output"],
Cell[8179, 240, 222145, 3654, 334, 111846, 1844, "CachedBoxData", "BoxData", \
"Output"],
Cell[230327, 3896, 192, 5, 25, "Text"],
Cell[230522, 3903, 886, 26, 131, "BoxedProgram"],
Cell[231411, 3931, 252, 4, 27, "Output"],
Cell[231666, 3937, 203000, 3341, 334, 116861, 1927, "CachedBoxData", \
"BoxData", "Output"],
Cell[434669, 7280, 1280, 30, 153, "Text"],
Cell[435952, 7312, 1177, 34, 127, "BoxedProgram"],
Cell[437132, 7348, 244, 4, 27, "Output"],
Cell[437379, 7354, 244, 4, 27, "Output"],
Cell[CellGroupData[{
Cell[437648, 7362, 67, 1, 60, "Subsubsection"],
Cell[437718, 7365, 1167, 44, 75, "Text"],
Cell[438888, 7411, 2628, 57, 498, "Input"],
Cell[441519, 7470, 4134, 150, 186, "Text"],
Cell[CellGroupData[{
Cell[445678, 7624, 1683, 51, 129, "Input"],
Cell[447364, 7677, 276, 4, 51, "Output"],
Cell[447643, 7683, 318, 6, 79, "Output"]
}, Open  ]],
Cell[447976, 7692, 1521, 50, 62, "Text"],
Cell[449500, 7744, 619, 21, 69, "Input",
 Evaluatable->False],
Cell[450122, 7767, 139, 4, 25, "Text"],
Cell[450264, 7773, 316, 10, 30, "Input",
 Evaluatable->False],
Cell[450583, 7785, 193, 5, 25, "Text"],
Cell[450779, 7792, 184, 4, 54, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[451000, 7801, 26, 0, 60, "Subsubsection"],
Cell[451029, 7803, 237, 4, 27, "Text"],
Cell[CellGroupData[{
Cell[451291, 7811, 289, 6, 54, "Input"],
Cell[451583, 7819, 3469, 68, 340, "Output"]
}, Open  ]],
Cell[455067, 7890, 3111, 105, 211, "Text"],
Cell[CellGroupData[{
Cell[458203, 7999, 4301, 125, 28, "Input",
 CellOpen->False],
Cell[462507, 8126, 1038, 19, 548, "Output"]
}, Open  ]],
Cell[463560, 8148, 17153, 567, 467, "Text"],
Cell[480716, 8717, 1751, 48, 199, "BoxedProgram"],
Cell[482470, 8767, 254, 5, 25, "Text"],
Cell[CellGroupData[{
Cell[482749, 8776, 450, 13, 77, "Input"],
Cell[483202, 8791, 195, 2, 27, "Output"],
Cell[483400, 8795, 3887, 73, 335, "Output"]
}, Open  ]],
Cell[487302, 8871, 1848, 71, 200, "Text"],
Cell[CellGroupData[{
Cell[489175, 8946, 3376, 106, 28, "Input",
 CellOpen->False,
 InitializationCell->True],
Cell[492554, 9054, 20773, 355, 373, "Output"]
}, Open  ]],
Cell[513342, 9412, 820, 33, 125, "Text"],
Cell[514165, 9447, 827, 30, 29, "Text",
 Evaluatable->True],
Cell[514995, 9479, 531, 15, 75, "Output"],
Cell[515529, 9496, 222, 9, 25, "Text"],
Cell[515754, 9507, 605, 22, 29, "Text",
 Evaluatable->True],
Cell[516362, 9531, 377, 8, 46, "Output"],
Cell[516742, 9541, 477, 17, 50, "Text"],
Cell[CellGroupData[{
Cell[517244, 9562, 624, 17, 85, "Input"],
Cell[517871, 9581, 376, 8, 33, "Output"],
Cell[518250, 9591, 4462, 83, 340, "Output"]
}, Open  ]],
Cell[522727, 9677, 51, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[522803, 9681, 1064, 30, 124, "Input"],
Cell[523870, 9713, 309, 5, 27, "Output"],
Cell[524182, 9720, 4077, 77, 340, "Output"]
}, Open  ]],
Cell[528274, 9800, 134, 3, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[528445, 9808, 67, 1, 60, "Subsubsection"],
Cell[528515, 9811, 301, 9, 27, "Text"],
Cell[528819, 9822, 287, 8, 30, "Input",
 Evaluatable->False],
Cell[529109, 9832, 464, 18, 54, "Text"],
Cell[529576, 9852, 467, 14, 30, "Input",
 Evaluatable->False],
Cell[530046, 9868, 75, 1, 25, "Text"],
Cell[530124, 9871, 173, 5, 30, "Input",
 Evaluatable->False],
Cell[530300, 9878, 187, 5, 27, "Text"],
Cell[530490, 9885, 309, 10, 33, "Input",
 Evaluatable->False],
Cell[530802, 9897, 200, 4, 50, "Text"],
Cell[531005, 9903, 178, 4, 54, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[531198, 9910, 26, 0, 60, "Subsubsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[531261, 9915, 42, 0, 90, "Section"],
Cell[531306, 9917, 6438, 194, 589, "Text"],
Cell[537747, 10113, 2269, 64, 252, "BoxedProgram"],
Cell[540019, 10179, 2207, 60, 123, "Output"],
Cell[542229, 10241, 377, 11, 55, "Text"],
Cell[CellGroupData[{
Cell[542631, 10256, 68, 1, 60, "Subsubsection"],
Cell[542702, 10259, 940, 30, 108, "Text"],
Cell[543645, 10291, 429, 14, 73, "Input",
 Evaluatable->False],
Cell[544077, 10307, 371, 8, 52, "Text"],
Cell[544451, 10317, 1172, 31, 147, "Input",
 Evaluatable->False],
Cell[545626, 10350, 205, 6, 27, "Text"],
Cell[545834, 10358, 708, 22, 59, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[546579, 10385, 26, 0, 60, "Subsubsection"],
Cell[546608, 10387, 2990, 113, 449, "Text"],
Cell[CellGroupData[{
Cell[549623, 10504, 877, 27, 28, "Input",
 CellOpen->False],
Cell[550503, 10533, 5584, 100, 397, "Output"]
}, Open  ]],
Cell[556102, 10636, 34, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[556161, 10640, 442, 14, 59, "Input"],
Cell[556606, 10656, 274, 8, 33, "Output"]
}, Open  ]],
Cell[556895, 10667, 45, 0, 25, "Text"],
Cell[CellGroupData[{
Cell[556965, 10671, 603, 20, 61, "Input"],
Cell[557571, 10693, 595, 20, 58, "Output"]
}, Open  ]],
Cell[558181, 10716, 2788, 80, 311, "BoxedProgram"],
Cell[560972, 10798, 2201, 60, 123, "Output"],
Cell[563176, 10860, 183, 5, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[563396, 10870, 68, 1, 60, "Subsubsection"],
Cell[563467, 10873, 180, 4, 25, "Text"],
Cell[563650, 10879, 1026, 33, 107, "Input",
 Evaluatable->False],
Cell[564679, 10914, 208, 4, 50, "Text"],
Cell[CellGroupData[{
Cell[564912, 10922, 311, 10, 61, "Input"],
Cell[565226, 10934, 365, 10, 54, "Output"]
}, Open  ]],
Cell[565606, 10947, 68, 1, 25, "Text"],
Cell[CellGroupData[{
Cell[565699, 10952, 269, 9, 61, "Input"],
Cell[565971, 10963, 371, 10, 54, "Output"]
}, Open  ]],
Cell[566357, 10976, 103, 5, 75, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566497, 10986, 26, 0, 60, "Subsubsection"],
Cell[566526, 10988, 1469, 53, 170, "Text"],
Cell[567998, 11043, 1305, 43, 201, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[569352, 11092, 41, 0, 90, "Section"],
Cell[569396, 11094, 1610, 59, 147, "Text"],
Cell[571009, 11155, 930, 21, 152, "Text"],
Cell[571942, 11178, 1316, 28, 200, "Text"],
Cell[573261, 11208, 4549, 112, 849, "Text"],
Cell[577813, 11322, 1431, 35, 210, "Text"],
Cell[579247, 11359, 381, 12, 126, "BoxedProgram"],
Cell[579631, 11373, 397, 8, 77, "Text"],
Cell[580031, 11383, 239, 5, 56, "BoxedProgram"],
Cell[580273, 11390, 370, 10, 54, "Text"],
Cell[580646, 11402, 209, 5, 80, "BoxedProgram"],
Cell[580858, 11409, 157, 5, 27, "Text"],
Cell[581018, 11416, 1052, 29, 127, "BoxedProgram"],
Cell[582073, 11447, 153, 3, 25, "Text"],
Cell[CellGroupData[{
Cell[582251, 11454, 143, 3, 30, "Input"],
Cell[582397, 11459, 1183, 31, 74, "Output"]
}, Open  ]],
Cell[583595, 11493, 792, 23, 172, "BoxedProgram"],
Cell[584390, 11518, 3593, 68, 548, "Output"],
Cell[587986, 11588, 765, 24, 106, "Text"],
Cell[588754, 11614, 7104, 202, 1002, "BoxedProgram"],
Cell[595861, 11818, 3572, 69, 566, "Print"],
Cell[599436, 11889, 3535, 68, 566, "Print"],
Cell[602974, 11959, 3554, 69, 566, "Print"],
Cell[606531, 12030, 3568, 69, 566, "Print"],
Cell[610102, 12101, 3531, 68, 566, "Print"],
Cell[613636, 12171, 3544, 69, 566, "Print"],
Cell[617183, 12242, 3535, 68, 566, "Print"],
Cell[620721, 12312, 3547, 69, 566, "Print"],
Cell[624271, 12383, 3559, 69, 566, "Print"],
Cell[627833, 12454, 3590, 69, 566, "Print"],
Cell[631426, 12525, 2357, 49, 367, "Print"],
Cell[633786, 12576, 633, 11, 22, "Print"],
Cell[634422, 12589, 570, 10, 22, "Print"],
Cell[634995, 12601, 551, 9, 22, "Print"],
Cell[635549, 12612, 554, 9, 22, "Print"],
Cell[636106, 12623, 613, 12, 22, "Print"],
Cell[636722, 12637, 304, 6, 25, "Text"],
Cell[CellGroupData[{
Cell[637051, 12647, 67, 1, 60, "Subsubsection"],
Cell[637121, 12650, 668, 21, 79, "Text"],
Cell[637792, 12673, 1233, 37, 169, "Input",
 Evaluatable->False],
Cell[639028, 12712, 487, 14, 79, "Text"],
Cell[639518, 12728, 1330, 42, 100, "Input",
 Evaluatable->False],
Cell[640851, 12772, 171, 4, 25, "Text"],
Cell[641025, 12778, 847, 27, 36, "Input",
 Evaluatable->False],
Cell[641875, 12807, 288, 10, 52, "Text"],
Cell[642166, 12819, 740, 24, 123, "Input",
 Evaluatable->False],
Cell[642909, 12845, 457, 15, 54, "Text"],
Cell[643369, 12862, 805, 21, 146, "Input",
 Evaluatable->False],
Cell[644177, 12885, 190, 6, 27, "Text"],
Cell[644370, 12893, 515, 15, 100, "Input",
 Evaluatable->False],
Cell[644888, 12910, 137, 6, 27, "Text"],
Cell[645028, 12918, 196, 7, 54, "Input",
 Evaluatable->False],
Cell[645227, 12927, 192, 4, 50, "Text"],
Cell[645422, 12933, 2032, 57, 389, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[647491, 12995, 26, 0, 60, "Subsubsection"],
Cell[647520, 12997, 436, 9, 50, "Text"],
Cell[CellGroupData[{
Cell[647981, 13010, 63, 1, 30, "Input"],
Cell[648047, 13013, 175, 2, 27, "Output"]
}, Open  ]],
Cell[648237, 13018, 44, 0, 25, "Text"],
Cell[648284, 13020, 1122, 20, 206, "Text"],
Cell[649409, 13042, 8736, 255, 1324, "BoxedProgram"],
Cell[658148, 13299, 7394, 131, 548, "Print"],
Cell[665545, 13432, 7282, 129, 548, "Print"],
Cell[672830, 13563, 7242, 129, 548, "Print"],
Cell[680075, 13694, 7136, 127, 548, "Print"],
Cell[687214, 13823, 7079, 126, 548, "Print"],
Cell[694296, 13951, 7022, 125, 548, "Print"],
Cell[701321, 14078, 6975, 124, 548, "Print"],
Cell[708299, 14204, 6933, 124, 548, "Print"],
Cell[715235, 14330, 6939, 124, 548, "Print"],
Cell[722177, 14456, 6923, 124, 548, "Print"],
Cell[729103, 14582, 2158, 46, 361, "Print"],
Cell[731264, 14630, 466, 8, 22, "Print"],
Cell[731733, 14640, 410, 7, 22, "Print"],
Cell[732146, 14649, 383, 6, 22, "Print"],
Cell[732532, 14657, 390, 6, 22, "Print"],
Cell[732925, 14665, 884, 15, 152, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[733858, 14686, 60, 0, 90, "Section"],
Cell[733921, 14688, 895, 13, 175, "Text"],
Cell[CellGroupData[{
Cell[734841, 14705, 1475, 44, 105, "Input"],
Cell[736319, 14751, 14842, 253, 343, "Output"]
}, Open  ]],
Cell[751176, 15007, 1248, 19, 275, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[752461, 15031, 26, 0, 90, "Section"],
Cell[752490, 15033, 3799, 115, 365, "Text"],
Cell[756292, 15150, 274, 6, 75, "Text"],
Cell[756569, 15158, 564, 12, 125, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

